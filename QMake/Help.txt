------- HELP on QMake make system V1.0 ------

Common targets (some compile targets may not have been installed on your system): 
  check     Build static binaries & libs with consistency checking (default).
            This is the recommended development target.
  debug     Build static binaries & libs with debug information, but link
            with the "check" version of RAVL.  I.e. debug just your code, not
	    all of RAVL.
  debugall  Build static binaries & libs with debug information, linking 
            "debug" RAVL libs.  NB. The executables may be very large.
  opt       Optimised build. 
  shared    Build "check" version but generating & using shared libraries.
  debugshared (or 'ds' for short)
            Build "debugall" version but generating & using shared debug libs. 
  optshared (or 'os' for short)
            Build "opt"  version but generating & using shared libraries.
  ne, debugne, optne, gprofne, sharedne, dsne
            As check,debug, opt etc. but only building libraries, not executables.
  build     Build check, debug, opt and executables
  buildall  Build check, debug, opt, executables and the documentation.
  fullbuild Builds all the variants specified by the FULLBUILD_TARGETS variable that is normally set in the relevant config.local.xxx file
  prof      Output optimised code with profiling info suitable for prof.
  gprof     Output optimised code with profiling info suitable for gprof.
  purify    Build all executables in the CURRENT directory with purify.
	    "purify" executables are prefixed with 'pure_'.  (Not available in
            CVSSP.)
  src       Check-out all source, and put headers in the right place.
  clean     Removes all object files created during compilation for this library
            - This forces all objects in the current source tree to be recompiled.
            - Use VAR=... to select variant - see below:
    optclean clean with VAR=opt
    dbclean  clean with VAR=debug
    chkclean clean with VAR=check
  cleanlib  Like clean, but removes library as well.
  cleandep  Remove all dependency files.  This forces the make system to recompute the library dependencies. 
  cleandoc  Remove all documentation files 
  distclean Remove ALL files from your project out and all temporary files.  
  doc       Make automatic documentation.
  chead     Check headers with original RAVL make system.
  lib_info  Tells you which library paths are needed/used to create an executable.
  help      Print this help on the QMake system. 
  defs      List of public ".def" files.
  test	    Compile and run test executables.
  retest    Rerun the final stage of RAVL testing.

Variables: 
  PROCS=       Number of processors to use. (Default varies with no. of c.p.u.s on machine.) 
  VAR=         check (default), debug, opt 
  QMAKE_INFO=1 Print command lines during make. 
  USERCFLAGS= ... Pass extra options to the compiler.
  NOEXEBUILD=1 Build libraries only, don't compile or link executables.
  TMP=         Directory to use for temporary files. Default = /tmp 
  ANSIFLAG=  Switch off strict ansi compilation (or switch to other gcc options).
  CXXEXT=    Name of extension for SOURCES/MAIN files.  E.g. CXXEXT=.cpp
  CHXXEXT=   Name of extension for HEADERS files.  E.g. CHXXEXT=.hpp
  QMAKECONFIGHOME=  Directory containing alternative RAVL config file.

Examples: 

  % qm opt
Make optimised version of code using static libraries

  % qm optshared
Make optimised version of code using dynamically linked libraries

  % qm debug PROCS=1 QMAKE_INFO=1 
Make debug version one file at a time, with command lines printed. 

  
Build Tags
----------

If you have several versions of a piece of source code, built to different PROJECT_OUTs it is very easy to get 
them confused and build the a piece of code to the wrong place.   To avoid doing this you can use a feature of
QMake called "Build Tags".   This feature attaches a tags your project out, build alias and source tree and then 
checks the tags are consistent before making a directory.

To use this feature you must:

1) Set BUILD_TAG=(Some tag) in your build alias or shell environment. 
2) Write a file in the root of your PROJECT_OUT called 'buildTag' containing the name of the build
3) Write a file in the root of the source tree called 'buildTag' containing the name of the build

When you do a build QMake will first go up the source tree looking for the 'buildTag' file, it will use the 
contents of the first one it finds.  It will then check that the value in the file match (less any whitespace) the 
one in the environment variable BUILD_TAG.  It will also check that the buildTag in the project out matches the 
BUILD_TAG value. Only if these two tests pass will QMake execute the compile command.
