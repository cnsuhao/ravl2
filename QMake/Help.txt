------- HELP on QMake make system V1.0 ------

Common targets: 
  check     Build binaries and libraries with consistancy checking (Default).
            This is the recomended development target.
  debugall  Build binaries with debug information, link executables with
	    all the available debug information. NB. The executables may
	    be very large.
  debug     Build binaries and code with debug information, but link
            with the "check" verson of RAVL. This should be quicker than
	    debuging all of RAVL.
  opt       Optimised build. 
  shared    Build "check" version but using shared libraries.
  debugshared Build "debugall" version but using shared debug libraries. 
  optshared Build "opt"  version but using shared libraries.
  ne, debugne, optne, gprofne, sharedne
            As check,debug, opt etc. but only building libraries, not executables.
  buildall  Build check,debug,opt and the documentation.
  prof      Output optimised code with profiling info suitable for prof.
  gprof     Output optimised code with profiling info suitable for gprof.
  purify    Build all executables in the CURRENT directory with purify.
	     purify executables are prefixed with 'pure_'. (Not available in CVSSP.)
  src       Check-out all source, and put headers in the right place.
  clean     Remove all temporary files. (NB. Use VAR=... to set variant.) (See below for details)
    optclean clean with VAR=opt
    dbclean  clean with VAR=debug
    chkclean clean with VAR=check
  cleanlib  Like clean, but removes library as well.  (See below for details)
  cleandep  Remove all dependency files. (See below for details)
  cleandoc  Remove all documentation files 
  distclean Remove ALL files from your project out.  
  doc       Make automatic documentation.
  docentry  Make semantic documentation
  chead     Check headers with original RAVL make system.
  lib_info  Tell's you which libraries are needed/used to create an executable.
  help      Print this help on the QMake system. 
  defs      List of public def's files.
  test	    Compile and run test executables.
  retest    Rerun the final stage of Ravl testing.
  notes     Print help on more obscure/unstable parts of the QMake system. 

Variables: 
  PROCS    = Number of processors to use. (Default varies with no. of cpus on machine.) 
  VAR      = check (default), debug, opt 
  QMAKE_INFO=1 Print command lines during make. 
  USERCFLAGS=... Pass extra options to the compiler.
  NOEXEBUILD=1 Build libraries only, don't compile or link executables.

Examples: 

  % qm opt
Make optimised version of code

  % qm debug PROCS=1 QMAKE_INFO=1 
Make debug version one file at a time, with command lines printed. 

The meaning of clean targets:

  clean    - Removes object files created during compilation for this library
          this forces all objects in the current library to be recompiled.
  cleanlib - Does clean as above, but also removed the library.
  cleandep - Clean dependancy information.  This forces the make system to
          recompute the library dependancies. 
  distclean - Cleans out the entire project out, and all intermediate files.

  
Build Tags
----------

If you have several versions of a piece of source code, built to different project outs it is very easy to get 
them confused and build the a piece of code to the wrong place.   To avoid doing this you can use a feature of
QMake called "Build Tags".   This feature attaches a tags your project out, build alias and source tree and then 
checks the tags are consistent before making a directory.

To use this feature you must:

1) Set BUILD_TAG=(Some tag) in your build alias or shell environment. 
2) Write a file in the root of your project out called 'buildTag' containing the name of the build
3) Write a file in the root of the source tree called 'buildTag' containing the name of the build

When you do a build QMake will first go up the source tree looking for the 'buildTag' file, it will use the 
contents of the first one it finds.  It will then check that the value in the file match (less any whitespace) the 
one in the environment variable BUILD_TAG.  It will also check that the buildTag in the project out matches the 
BUILD_TAG value. Only if these two tests pass will QMake execute the compile command.
