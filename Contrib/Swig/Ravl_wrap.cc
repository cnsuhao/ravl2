/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.27
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif



#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#  define SWIGINTERN static SWIGUNUSED
#endif

#ifndef SWIGINTERNINLINE
#  define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Python_SetModule(pointer)

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
#define PyOS_snprintf snprintf
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */
#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000
static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_BUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#if PY_VERSION_HEX < 0x01060000
#define PyObject_Del(op) PyMem_DEL((op))
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args && (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0)) {
    PyObject *ofmt = PyString_FromString(fmt);
    if (ofmt) {
      res = PyString_Format(ofmt,args);
      Py_DECREF(ofmt);
    }
    Py_DECREF(args);
  }  
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : ((i > j) ? 1 : 0);
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_Del(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static char pyswigobject_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#elif PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject pyswigobject_type
#if !defined(__cplusplus)
  ;  
  static int type_init = 0;
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigObject",		/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigobject_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigobject_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (self) {
    self->ptr = ptr;
    self->desc = desc;
  }
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromString(v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_Del(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static char pyswigpacked_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type
#if !defined(__cplusplus)
  ;
  static int type_init = 0;  
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigPacked",		/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigpacked_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigpacked_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      self->pack = pack;
      self->desc = desc;
      self->size = size;
      return (PyObject *) self;
    }
    return NULL;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }
  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = ty ? SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name) : 0;
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!type) {
    if (!PyErr_Occurred()) {
      PyErr_Format(PyExc_TypeError, "Swig: null type passed to NewPointerObj");
    }
    return robj;
  }
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return -1;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return -1;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return -1;
  }
  if (PyDict_SetItemString(dict, name, o))
    return -1;
  Py_DECREF(o);
  return 0;
}
#endif

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, NULL);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  }
}

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_RavlImageN__ByteRGBValueC swig_types[0]
#define SWIGTYPE_p_RavlImageN__FontC swig_types[1]
#define SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t swig_types[2]
#define SWIGTYPE_p_RavlImageN__ImageCTdouble_t swig_types[3]
#define SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t swig_types[4]
#define SWIGTYPE_p_RavlImageN__RealRGBValueC swig_types[5]
#define SWIGTYPE_p_RavlN__Affine2dC swig_types[6]
#define SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t swig_types[7]
#define SWIGTYPE_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t swig_types[8]
#define SWIGTYPE_p_RavlN__Array2dCTdouble_t swig_types[9]
#define SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t swig_types[10]
#define SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t swig_types[11]
#define SWIGTYPE_p_RavlN__DLIterCTdouble_t swig_types[12]
#define SWIGTYPE_p_RavlN__DLIterCTint_t swig_types[13]
#define SWIGTYPE_p_RavlN__DLIterCTlong_long_t swig_types[14]
#define SWIGTYPE_p_RavlN__DLIterCTshort_t swig_types[15]
#define SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t swig_types[16]
#define SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t swig_types[17]
#define SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t swig_types[18]
#define SWIGTYPE_p_RavlN__DListCTdouble_t swig_types[19]
#define SWIGTYPE_p_RavlN__DListCTint_t swig_types[20]
#define SWIGTYPE_p_RavlN__DListCTlong_long_t swig_types[21]
#define SWIGTYPE_p_RavlN__DListCTshort_t swig_types[22]
#define SWIGTYPE_p_RavlN__DListCTunsigned_char_t swig_types[23]
#define SWIGTYPE_p_RavlN__DListCTunsigned_int_t swig_types[24]
#define SWIGTYPE_p_RavlN__DateC swig_types[25]
#define SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t swig_types[26]
#define SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t swig_types[27]
#define SWIGTYPE_p_RavlN__Index2dC swig_types[28]
#define SWIGTYPE_p_RavlN__IndexC swig_types[29]
#define SWIGTYPE_p_RavlN__IndexRange2dC swig_types[30]
#define SWIGTYPE_p_RavlN__Point2dC swig_types[31]
#define SWIGTYPE_p_RavlN__PointSet2dC swig_types[32]
#define SWIGTYPE_p_RavlN__Polygon2dC swig_types[33]
#define SWIGTYPE_p_RavlN__RealRange2dC swig_types[34]
#define SWIGTYPE_p_RavlN__RealRangeC swig_types[35]
#define SWIGTYPE_p_RavlN__StringC swig_types[36]
#define SWIGTYPE_p_char swig_types[37]
#define SWIGTYPE_p_double swig_types[38]
#define SWIGTYPE_p_float swig_types[39]
#define SWIGTYPE_p_int swig_types[40]
#define SWIGTYPE_p_long_long swig_types[41]
#define SWIGTYPE_p_short swig_types[42]
#define SWIGTYPE_p_std__ostream swig_types[43]
#define SWIGTYPE_p_unsigned_char swig_types[44]
#define SWIGTYPE_p_unsigned_int swig_types[45]
#define SWIGTYPE_p_unsigned_long_long swig_types[46]
#define SWIGTYPE_ptrdiff_t swig_types[47]
#define SWIGTYPE_size_t swig_types[48]
#define SWIGTYPE_std__ptrdiff_t swig_types[49]
#define SWIGTYPE_std__size_t swig_types[50]
static swig_type_info *swig_types[52];
static swig_module_info swig_module = {swig_types, 51, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _Ravl.so
  ------------------------------------------------*/
#define SWIG_init    init_Ravl

#define SWIG_name    "_Ravl"

namespace RavlGUIN
{
  extern void InitDPWindowFormat();
  extern void InitDPDisplayImage();
  void XInitRavlGUIDisplay()
  {
    InitDPWindowFormat();
    InitDPDisplayImage();
  }
}


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/Types.hh"
#include "Ravl/Stream.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/DList.hh"
#include "Ravl/DLIter.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


SWIGINTERN int
  SWIG_AsVal_double(PyObject *obj, double *val)
{
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return 1;
  }  
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("double", obj);
  }
  return 0;
}


SWIGINTERNINLINE double
SWIG_As_double(PyObject* obj)
{
  double v;
  if (!SWIG_AsVal_double(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(double));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_double(PyObject* obj)
{
  return SWIG_AsVal_double(obj, (double*)0);
}


  /*@/usr/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_double PyFloat_FromDouble
/*@@*/


SWIGINTERNINLINE PyObject*
  SWIG_From_bool(bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}


#include <limits.h>


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return 1;
  }
  if (val) {
    SWIG_type_error("long", obj);
  }
  return 0;
 }


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = static_cast<int >(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERNINLINE int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}


#if 1
  PyObject *ToList(RavlN::DListC<RavlN::RealT> list)
  {
    PyObject *obj = PyList_New(0);
    if (PyErr_Occurred())
      SWIG_fail;
    for (RavlN::DLIterC<RavlN::RealT> it(list); it; it++)
    {
      PyObject *temp = PyFloat_FromDouble(*it);
      if (PyErr_Occurred())
        SWIG_fail;
      PyList_Append(obj, temp);
    }
    return obj;
    fail:
    return NULL;
  }
#endif


  /*@/usr/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


#if 1
  PyObject *ToList(RavlN::DListC<RavlN::IntT> list)
  {
    PyObject *obj = PyList_New(0);
    if (PyErr_Occurred())
      SWIG_fail;
    for (RavlN::DLIterC<RavlN::IntT> it(list); it; it++)
    {
      PyObject *temp = PyInt_FromLong(*it);
      if (PyErr_Occurred())
        SWIG_fail;
      PyList_Append(obj, temp);
    }
    return obj;
    fail:
    return NULL;
  }
#endif


SWIGINTERNINLINE int
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %lu is greater than '%s' minimum %lu",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_long(PyObject *obj, unsigned long *val) 
{
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  } 
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return 1;
    }   
  }
  if (val) {
    SWIG_type_error("unsigned long", obj);
  }
  return 0;
}


#if UINT_MAX != ULONG_MAX
SWIGINTERN int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{ 
  const char* errmsg = val ? "unsigned int" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, INT_MAX, errmsg)) {
      if (val) *val = static_cast<unsigned int >(v);
      return 1;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE unsigned int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{
  return SWIG_AsVal_unsigned_SS_long(obj,(unsigned long *)val);
}
#endif


SWIGINTERNINLINE unsigned int
SWIG_As_unsigned_SS_int(PyObject* obj)
{
  unsigned int v;
  if (!SWIG_AsVal_unsigned_SS_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_int(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_int(obj, (unsigned int*)0);
}


  /*@/usr/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/


SWIGINTERNINLINE PyObject* 
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong(static_cast<long >(value)); 
}


#if UINT_MAX < LONG_MAX
/*@/usr/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_long
/*@@*/
#else
/*@/usr/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_unsigned_SS_long
/*@@*/
#endif


#if 1
  PyObject *ToList(RavlN::DListC<RavlN::UIntT> list)
  {
    PyObject *obj = PyList_New(0);
    if (PyErr_Occurred())
      SWIG_fail;
    for (RavlN::DLIterC<RavlN::UIntT> it(list); it; it++)
    {
      PyObject *temp = PyInt_FromLong(*it);
      if (PyErr_Occurred())
        SWIG_fail;
      PyList_Append(obj, temp);
    }
    return obj;
    fail:
    return NULL;
  }
#endif


SWIGINTERN int
  SWIG_AsVal_long_SS_long(PyObject *obj, long long *val)
{
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return 1;
  }
  if (val) {
    SWIG_type_error("long long", obj);
  }
  return 0;
}


SWIGINTERNINLINE long long
SWIG_As_long_SS_long(PyObject* obj)
{
  long long v;
  if (!SWIG_AsVal_long_SS_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(long long));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_long_SS_long(PyObject* obj)
{
  return SWIG_AsVal_long_SS_long(obj, (long long*)0);
}


SWIGINTERNINLINE PyObject* 
  SWIG_From_long_SS_long(long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value)
    : PyInt_FromLong(static_cast<long >(value)); 
}


#if 1
  PyObject *ToList(RavlN::DListC<RavlN::Int64T> list)
  {
    PyObject *obj = PyList_New(0);
    if (PyErr_Occurred())
      SWIG_fail;
    for (RavlN::DLIterC<RavlN::Int64T> it(list); it; it++)
    {
      PyObject *temp = PyLong_FromLongLong(*it);
      if (PyErr_Occurred())
        SWIG_fail;
      PyList_Append(obj, temp);
    }
    return obj;
    fail:
    return NULL;
  }
#endif


SWIGINTERN int
  SWIG_AsVal_short(PyObject *obj, short *val)
{ 
  const char* errmsg = val ? "short" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, SHRT_MIN, SHRT_MAX, errmsg)) {
      if (val) *val = static_cast<short >(v);
      return 1;
    } else {
      return 0;
    }    
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}


SWIGINTERNINLINE short
SWIG_As_short(PyObject* obj)
{
  short v;
  if (!SWIG_AsVal_short(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(short));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_short(PyObject* obj)
{
  return SWIG_AsVal_short(obj, (short*)0);
}


  /*@/usr/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_short PyInt_FromLong
/*@@*/


#if 1
  PyObject *ToList(RavlN::DListC<RavlN::Int16T> list)
  {
    PyObject *obj = PyList_New(0);
    if (PyErr_Occurred())
      SWIG_fail;
    for (RavlN::DLIterC<RavlN::Int16T> it(list); it; it++)
    {
      PyObject *temp = PyInt_FromLong(*it);
      if (PyErr_Occurred())
        SWIG_fail;
      PyList_Append(obj, temp);
    }
    return obj;
    fail:
    return NULL;
  }
#endif


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_char(PyObject *obj, unsigned char *val)
{ 
  const char* errmsg = val ? "unsigned char" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, UCHAR_MAX,errmsg)) {
      if (val) *val = static_cast<unsigned char >(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


SWIGINTERNINLINE unsigned char
SWIG_As_unsigned_SS_char(PyObject* obj)
{
  unsigned char v;
  if (!SWIG_AsVal_unsigned_SS_char(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned char));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_char(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_char(obj, (unsigned char*)0);
}


  /*@/usr/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_unsigned_SS_char PyInt_FromLong
/*@@*/


#if 1
  PyObject *ToList(RavlN::DListC<RavlN::ByteT> list)
  {
    PyObject *obj = PyList_New(0);
    if (PyErr_Occurred())
      SWIG_fail;
    for (RavlN::DLIterC<RavlN::ByteT> it(list); it; it++)
    {
      PyObject *temp = PyInt_FromLong(*it);
      if (PyErr_Occurred())
        SWIG_fail;
      PyList_Append(obj, temp);
    }
    return obj;
    fail:
    return NULL;
  }
#endif


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/Point2d.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


#if 1
  PyObject *ToList(RavlN::DListC<RavlN::Point2dC> list)
  {
    PyObject *obj = PyList_New(0);
    if (PyErr_Occurred())
      SWIG_fail;
    {
      swig_type_info *typeInfo = SWIG_TypeQuery("RavlN::Point2dC" " *");
      for (RavlN::DLIterC<RavlN::Point2dC> it(list); it; it++)
      {
        PyObject *temp = SWIG_NewPointerObj((void*)&it.Data(), typeInfo, 0);
        if (PyErr_Occurred())
          SWIG_fail;
        PyList_Append(obj, temp);
      }
      return obj;
    }
    fail:
    return NULL;
  }
#endif


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/Index.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/Index2d.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/IndexRange2d.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/Array2d.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif

static RavlN::ByteT &RavlN_Array2dC_Sl_RavlN_ByteT_Sg__Access__SWIG_0(RavlN::Array2dC<RavlN::ByteT > *self,RavlN::Index2dC const &index){ return self->operator[](index); }
static RavlN::ByteT &RavlN_Array2dC_Sl_RavlN_ByteT_Sg__Access__SWIG_1(RavlN::Array2dC<RavlN::ByteT > *self,RavlN::IntT r,RavlN::IntT c){ return self->operator[](r)[c]; }
static RavlN::ByteT &RavlN_Array2dC_Sl_RavlN_ByteT_Sg__Access__SWIG_2(RavlN::Array2dC<RavlN::ByteT > *self,RavlN::IndexC r,RavlN::IndexC c){ return self->operator[](r)[c]; }
static RavlN::RealT &RavlN_Array2dC_Sl_RavlN_RealT_Sg__Access__SWIG_0(RavlN::Array2dC<RavlN::RealT > *self,RavlN::Index2dC const &index){ return self->operator[](index); }
static RavlN::RealT &RavlN_Array2dC_Sl_RavlN_RealT_Sg__Access__SWIG_1(RavlN::Array2dC<RavlN::RealT > *self,RavlN::IntT r,RavlN::IntT c){ return self->operator[](r)[c]; }
static RavlN::RealT &RavlN_Array2dC_Sl_RavlN_RealT_Sg__Access__SWIG_2(RavlN::Array2dC<RavlN::RealT > *self,RavlN::IndexC r,RavlN::IndexC c){ return self->operator[](r)[c]; }

#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/String.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    SWIG_type_error("char *", obj);
  }
  return 0;
}


SWIGINTERNINLINE int
SWIG_AsCharPtr(PyObject *obj, char **val)
{
  if (SWIG_AsCharPtrAndSize(obj, val, (size_t*)(0))) {
    return 1;
  }
  if (val) {
    PyErr_Clear();
    SWIG_type_error("char *", obj);
  }
  return 0;
}


SWIGINTERN PyObject *
SWIG_FromCharPtr(const char* cptr)
{ 
  if (cptr) {
    size_t size = strlen(cptr);
    if (size > INT_MAX) {
      return SWIG_NewPointerObj(const_cast<char* >(cptr), 
				SWIG_TypeQuery("char *"), 0);
    } else {
      if (size != 0) {
	return PyString_FromStringAndSize(cptr, size);
      } else {
	return PyString_FromString(cptr);
      }
    }
  }
  Py_INCREF(Py_None);
  return Py_None;
}

static char const *RavlN_StringC___str__(RavlN::StringC *self){
        return self->chars();
      }

#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/IO.hh"
#include "Ravl/DP/PrintIOInfo.hh"
#include "Ravl/Stream.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/RealRange1d.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/RealRange2d.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/PointSet2d.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/Polygon2d.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/Image/Image.hh"
#include "Ravl/Image/ByteRGBValue.hh"
#include "Ravl/Image/RealRGBValue.hh"
#include "Ravl/Image/DrawPolygon.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif

static RavlImageN::ByteRGBValueC &RavlN_Array2dC_Sl_RavlImageN_ByteRGBValueC_Sg__Access__SWIG_0(RavlN::Array2dC<RavlImageN::ByteRGBValueC > *self,RavlN::Index2dC const &index){ return self->operator[](index); }
static RavlImageN::ByteRGBValueC &RavlN_Array2dC_Sl_RavlImageN_ByteRGBValueC_Sg__Access__SWIG_1(RavlN::Array2dC<RavlImageN::ByteRGBValueC > *self,RavlN::IntT r,RavlN::IntT c){ return self->operator[](r)[c]; }
static RavlImageN::ByteRGBValueC &RavlN_Array2dC_Sl_RavlImageN_ByteRGBValueC_Sg__Access__SWIG_2(RavlN::Array2dC<RavlImageN::ByteRGBValueC > *self,RavlN::IndexC r,RavlN::IndexC c){ return self->operator[](r)[c]; }
static RavlImageN::RealRGBValueC &RavlN_Array2dC_Sl_RavlImageN_RealRGBValueC_Sg__Access__SWIG_0(RavlN::Array2dC<RavlImageN::RealRGBValueC > *self,RavlN::Index2dC const &index){ return self->operator[](index); }
static RavlImageN::RealRGBValueC &RavlN_Array2dC_Sl_RavlImageN_RealRGBValueC_Sg__Access__SWIG_1(RavlN::Array2dC<RavlImageN::RealRGBValueC > *self,RavlN::IntT r,RavlN::IntT c){ return self->operator[](r)[c]; }
static RavlImageN::RealRGBValueC &RavlN_Array2dC_Sl_RavlImageN_RealRGBValueC_Sg__Access__SWIG_2(RavlN::Array2dC<RavlImageN::RealRGBValueC > *self,RavlN::IndexC r,RavlN::IndexC c){ return self->operator[](r)[c]; }

SWIGINTERN int
  SWIG_AsVal_bool(PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return 1;
  }
  if (obj == Py_False) {
    if (val) *val = false;
    return 1;
  }
  int res = 0;
  if (SWIG_AsVal_int(obj, &res)) {    
    if (val) *val = res ? true : false;
    return 1;
  } else {
    PyErr_Clear();
  }  
  if (val) {
    SWIG_type_error("bool", obj);
  }
  return 0;
}


SWIGINTERNINLINE bool
SWIG_As_bool(PyObject* obj)
{
  bool v;
  if (!SWIG_AsVal_bool(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(bool));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_bool(PyObject* obj)
{
  return SWIG_AsVal_bool(obj, (bool*)0);
}


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/Image/Font.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif

// The following is a fix for windows.
#ifdef DrawText
#undef DrawText
#endif


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/SArray1d.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/Affine2d.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/OS/Date.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


SWIGINTERNINLINE long
SWIG_As_long(PyObject* obj)
{
  long v;
  if (!SWIG_AsVal_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(long));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_long(PyObject* obj)
{
  return SWIG_AsVal_long(obj, (long*)0);
}


#ifdef SWIGPERL
#undef Copy
#endif

#include "Ravl/Hash.hh"
#include "Ravl/HashIter.hh"

#ifdef SWIGPERL
#define Copy(s,d,n,t)   (MEM_WRAP_CHECK_(n,t) (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#endif


SWIGINTERN PyObject*
t_output_helper(PyObject* target, PyObject* o) {
  if (!target) {
    target = o;
  } else if (target == Py_None) {  
    Py_DECREF(target);
    target = o;
  } else {
    if (!PyList_Check(target)) {
      PyObject *o2 = target;
      target = PyList_New(1);
      PyList_SetItem(target, 0, o2);
    }
    PyList_Append(target,o);
    Py_DECREF(o);
    }
  return target;
}


#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_DListRealC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DListRealC")) goto fail;
    result = (RavlN::DListC<RavlN::RealT > *)new RavlN::DListC<RavlN::RealT >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DListCTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealC_Empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > *arg1 = (RavlN::DListC<RavlN::RealT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealC_Empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Empty();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealC_InsFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > *arg1 = (RavlN::DListC<RavlN::RealT > *) 0 ;
    RavlN::RealT *arg2 = 0 ;
    RavlN::RealT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListRealC_InsFirst",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->InsFirst((double const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealC_InsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > *arg1 = (RavlN::DListC<RavlN::RealT > *) 0 ;
    RavlN::RealT *arg2 = 0 ;
    RavlN::RealT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListRealC_InsLast",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->InsLast((double const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealC_PopFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > *arg1 = (RavlN::DListC<RavlN::RealT > *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealC_PopFirst",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)(arg1)->PopFirst();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealC_PopLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > *arg1 = (RavlN::DListC<RavlN::RealT > *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealC_PopLast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)(arg1)->PopLast();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealC_MoveFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > *arg1 = (RavlN::DListC<RavlN::RealT > *) 0 ;
    RavlN::DListC<RavlN::RealT > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListRealC_MoveFirst",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::RealT >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->MoveFirst(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealC_MoveLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > *arg1 = (RavlN::DListC<RavlN::RealT > *) 0 ;
    RavlN::DListC<RavlN::RealT > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListRealC_MoveLast",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::RealT >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->MoveLast(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealC_First(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > *arg1 = (RavlN::DListC<RavlN::RealT > *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealC_First",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)(arg1)->First();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealC_Last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > *arg1 = (RavlN::DListC<RavlN::RealT > *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealC_Last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)(arg1)->Last();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealC_Del(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > *arg1 = (RavlN::DListC<RavlN::RealT > *) 0 ;
    RavlN::RealT *arg2 = 0 ;
    bool result;
    RavlN::RealT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListRealC_Del",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (bool)(arg1)->Del((double const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealC_Contains(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > *arg1 = (RavlN::DListC<RavlN::RealT > *) 0 ;
    RavlN::RealT *arg2 = 0 ;
    bool result;
    RavlN::RealT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListRealC_Contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (bool)(arg1)->Contains((double const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealC_Nth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > *arg1 = (RavlN::DListC<RavlN::RealT > *) 0 ;
    int arg2 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListRealC_Nth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::RealT)(arg1)->Nth(arg2);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DListRealC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > *arg1 = (RavlN::DListC<RavlN::RealT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DListRealC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DListRealC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__DListCTdouble_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DListRealIterC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DListRealIterC")) goto fail;
    result = (RavlN::DLIterC<RavlN::RealT > *)new RavlN::DLIterC<RavlN::RealT >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DLIterCTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListRealIterC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > *arg1 = 0 ;
    RavlN::DLIterC<RavlN::RealT > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DListRealIterC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::RealT >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::DLIterC<RavlN::RealT > *)new RavlN::DLIterC<RavlN::RealT >((RavlN::DListC<double > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DLIterCTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListRealIterC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_DListRealIterC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DListCTdouble_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DListRealIterC__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_DListRealIterC'");
    return NULL;
}


static PyObject *_wrap_DListRealIterC_IsValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_IsValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::RealT > const *)arg1)->IsValid();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_First(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_First",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->First();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_Last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_Last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Last();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_IsElm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_IsElm",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::RealT > const *)arg1)->IsElm();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_IsFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_IsFirst",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::RealT > const *)arg1)->IsFirst();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_IsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_IsLast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::RealT > const *)arg1)->IsLast();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_Next(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_Next",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Next();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_Prev(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_Prev",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Prev();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_NextCrc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_NextCrc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->NextCrc();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_PrevCrc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_PrevCrc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->PrevCrc();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_Nth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    RavlN::IntT arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListRealIterC_Nth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->Nth(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_NextData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_NextData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)(arg1)->NextData();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_PrevData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_PrevData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)(arg1)->PrevData();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_NextCrcData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_NextCrcData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)(arg1)->NextCrcData();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_PrevCrcData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_PrevCrcData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)(arg1)->PrevCrcData();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_Tail(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    RavlN::DListC<RavlN::RealT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_Tail",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Tail();
    
    {
        RavlN::DListC<RavlN::RealT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::RealT >(static_cast<RavlN::DListC<RavlN::RealT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_Head(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    RavlN::DListC<RavlN::RealT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_Head",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Head();
    
    {
        RavlN::DListC<RavlN::RealT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::RealT >(static_cast<RavlN::DListC<RavlN::RealT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_InclusiveTail(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    RavlN::DListC<RavlN::RealT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_InclusiveTail",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->InclusiveTail();
    
    {
        RavlN::DListC<RavlN::RealT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::RealT >(static_cast<RavlN::DListC<RavlN::RealT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_InclusiveHead(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    RavlN::DListC<RavlN::RealT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_InclusiveHead",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->InclusiveHead();
    
    {
        RavlN::DListC<RavlN::RealT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::RealT >(static_cast<RavlN::DListC<RavlN::RealT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC_Data(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC_Data",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)(arg1)->Data();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListRealIterC___deref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    RavlN::RealT *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListRealIterC___deref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT *)(arg1)->operator ->();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DListRealIterC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::RealT > *arg1 = (RavlN::DLIterC<RavlN::RealT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DListRealIterC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DListRealIterC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__DLIterCTdouble_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ToList__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::RealT > arg1 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ToList",&obj0)) goto fail;
    {
        RavlN::DListC<RavlN::RealT > * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_RavlN__DListCTdouble_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::RealT >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    result = (PyObject *)ToList(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListIntC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DListIntC")) goto fail;
    result = (RavlN::DListC<RavlN::IntT > *)new RavlN::DListC<RavlN::IntT >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DListCTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntC_Empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > *arg1 = (RavlN::DListC<RavlN::IntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntC_Empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Empty();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntC_InsFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > *arg1 = (RavlN::DListC<RavlN::IntT > *) 0 ;
    RavlN::IntT *arg2 = 0 ;
    RavlN::IntT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListIntC_InsFirst",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->InsFirst((int const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntC_InsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > *arg1 = (RavlN::DListC<RavlN::IntT > *) 0 ;
    RavlN::IntT *arg2 = 0 ;
    RavlN::IntT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListIntC_InsLast",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->InsLast((int const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntC_PopFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > *arg1 = (RavlN::DListC<RavlN::IntT > *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntC_PopFirst",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)(arg1)->PopFirst();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntC_PopLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > *arg1 = (RavlN::DListC<RavlN::IntT > *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntC_PopLast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)(arg1)->PopLast();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntC_MoveFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > *arg1 = (RavlN::DListC<RavlN::IntT > *) 0 ;
    RavlN::DListC<RavlN::IntT > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListIntC_MoveFirst",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::IntT >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->MoveFirst(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntC_MoveLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > *arg1 = (RavlN::DListC<RavlN::IntT > *) 0 ;
    RavlN::DListC<RavlN::IntT > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListIntC_MoveLast",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::IntT >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->MoveLast(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntC_First(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > *arg1 = (RavlN::DListC<RavlN::IntT > *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntC_First",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)(arg1)->First();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntC_Last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > *arg1 = (RavlN::DListC<RavlN::IntT > *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntC_Last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)(arg1)->Last();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntC_Del(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > *arg1 = (RavlN::DListC<RavlN::IntT > *) 0 ;
    RavlN::IntT *arg2 = 0 ;
    bool result;
    RavlN::IntT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListIntC_Del",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (bool)(arg1)->Del((int const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntC_Contains(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > *arg1 = (RavlN::DListC<RavlN::IntT > *) 0 ;
    RavlN::IntT *arg2 = 0 ;
    bool result;
    RavlN::IntT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListIntC_Contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (bool)(arg1)->Contains((int const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntC_Nth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > *arg1 = (RavlN::DListC<RavlN::IntT > *) 0 ;
    int arg2 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListIntC_Nth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::IntT)(arg1)->Nth(arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DListIntC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > *arg1 = (RavlN::DListC<RavlN::IntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DListIntC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DListIntC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__DListCTint_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DListIntIterC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DListIntIterC")) goto fail;
    result = (RavlN::DLIterC<RavlN::IntT > *)new RavlN::DLIterC<RavlN::IntT >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DLIterCTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListIntIterC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > *arg1 = 0 ;
    RavlN::DLIterC<RavlN::IntT > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DListIntIterC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::IntT >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::DLIterC<RavlN::IntT > *)new RavlN::DLIterC<RavlN::IntT >((RavlN::DListC<int > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DLIterCTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListIntIterC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_DListIntIterC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DListCTint_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DListIntIterC__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_DListIntIterC'");
    return NULL;
}


static PyObject *_wrap_DListIntIterC_IsValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_IsValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::IntT > const *)arg1)->IsValid();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_First(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_First",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->First();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_Last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_Last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Last();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_IsElm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_IsElm",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::IntT > const *)arg1)->IsElm();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_IsFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_IsFirst",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::IntT > const *)arg1)->IsFirst();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_IsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_IsLast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::IntT > const *)arg1)->IsLast();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_Next(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_Next",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Next();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_Prev(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_Prev",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Prev();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_NextCrc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_NextCrc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->NextCrc();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_PrevCrc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_PrevCrc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->PrevCrc();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_Nth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    RavlN::IntT arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListIntIterC_Nth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->Nth(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_NextData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_NextData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)(arg1)->NextData();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_PrevData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_PrevData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)(arg1)->PrevData();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_NextCrcData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_NextCrcData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)(arg1)->NextCrcData();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_PrevCrcData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_PrevCrcData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)(arg1)->PrevCrcData();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_Tail(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    RavlN::DListC<RavlN::IntT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_Tail",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Tail();
    
    {
        RavlN::DListC<RavlN::IntT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::IntT >(static_cast<RavlN::DListC<RavlN::IntT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTint_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_Head(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    RavlN::DListC<RavlN::IntT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_Head",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Head();
    
    {
        RavlN::DListC<RavlN::IntT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::IntT >(static_cast<RavlN::DListC<RavlN::IntT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTint_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_InclusiveTail(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    RavlN::DListC<RavlN::IntT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_InclusiveTail",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->InclusiveTail();
    
    {
        RavlN::DListC<RavlN::IntT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::IntT >(static_cast<RavlN::DListC<RavlN::IntT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTint_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_InclusiveHead(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    RavlN::DListC<RavlN::IntT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_InclusiveHead",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->InclusiveHead();
    
    {
        RavlN::DListC<RavlN::IntT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::IntT >(static_cast<RavlN::DListC<RavlN::IntT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTint_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC_Data(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC_Data",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)(arg1)->Data();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListIntIterC___deref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    RavlN::IntT *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListIntIterC___deref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT *)(arg1)->operator ->();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DListIntIterC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::IntT > *arg1 = (RavlN::DLIterC<RavlN::IntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DListIntIterC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTint_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DListIntIterC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__DLIterCTint_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ToList__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::IntT > arg1 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ToList",&obj0)) goto fail;
    {
        RavlN::DListC<RavlN::IntT > * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_RavlN__DListCTint_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::IntT >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    result = (PyObject *)ToList(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListUIntC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DListUIntC")) goto fail;
    result = (RavlN::DListC<RavlN::UIntT > *)new RavlN::DListC<RavlN::UIntT >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DListCTunsigned_int_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntC_Empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > *arg1 = (RavlN::DListC<RavlN::UIntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntC_Empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Empty();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntC_InsFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > *arg1 = (RavlN::DListC<RavlN::UIntT > *) 0 ;
    RavlN::UIntT *arg2 = 0 ;
    RavlN::UIntT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListUIntC_InsFirst",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::UIntT >(SWIG_As_unsigned_SS_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->InsFirst((unsigned int const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntC_InsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > *arg1 = (RavlN::DListC<RavlN::UIntT > *) 0 ;
    RavlN::UIntT *arg2 = 0 ;
    RavlN::UIntT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListUIntC_InsLast",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::UIntT >(SWIG_As_unsigned_SS_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->InsLast((unsigned int const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntC_PopFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > *arg1 = (RavlN::DListC<RavlN::UIntT > *) 0 ;
    RavlN::UIntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntC_PopFirst",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::UIntT)(arg1)->PopFirst();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntC_PopLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > *arg1 = (RavlN::DListC<RavlN::UIntT > *) 0 ;
    RavlN::UIntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntC_PopLast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::UIntT)(arg1)->PopLast();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntC_MoveFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > *arg1 = (RavlN::DListC<RavlN::UIntT > *) 0 ;
    RavlN::DListC<RavlN::UIntT > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListUIntC_MoveFirst",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::UIntT >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->MoveFirst(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntC_MoveLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > *arg1 = (RavlN::DListC<RavlN::UIntT > *) 0 ;
    RavlN::DListC<RavlN::UIntT > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListUIntC_MoveLast",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::UIntT >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->MoveLast(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntC_First(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > *arg1 = (RavlN::DListC<RavlN::UIntT > *) 0 ;
    RavlN::UIntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntC_First",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::UIntT)(arg1)->First();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntC_Last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > *arg1 = (RavlN::DListC<RavlN::UIntT > *) 0 ;
    RavlN::UIntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntC_Last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::UIntT)(arg1)->Last();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntC_Del(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > *arg1 = (RavlN::DListC<RavlN::UIntT > *) 0 ;
    RavlN::UIntT *arg2 = 0 ;
    bool result;
    RavlN::UIntT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListUIntC_Del",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::UIntT >(SWIG_As_unsigned_SS_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (bool)(arg1)->Del((unsigned int const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntC_Contains(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > *arg1 = (RavlN::DListC<RavlN::UIntT > *) 0 ;
    RavlN::UIntT *arg2 = 0 ;
    bool result;
    RavlN::UIntT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListUIntC_Contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::UIntT >(SWIG_As_unsigned_SS_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (bool)(arg1)->Contains((unsigned int const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntC_Nth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > *arg1 = (RavlN::DListC<RavlN::UIntT > *) 0 ;
    int arg2 ;
    RavlN::UIntT result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListUIntC_Nth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::UIntT)(arg1)->Nth(arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DListUIntC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > *arg1 = (RavlN::DListC<RavlN::UIntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DListUIntC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DListUIntC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__DListCTunsigned_int_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DListUIntIterC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DListUIntIterC")) goto fail;
    result = (RavlN::DLIterC<RavlN::UIntT > *)new RavlN::DLIterC<RavlN::UIntT >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListUIntIterC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > *arg1 = 0 ;
    RavlN::DLIterC<RavlN::UIntT > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DListUIntIterC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::UIntT >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::DLIterC<RavlN::UIntT > *)new RavlN::DLIterC<RavlN::UIntT >((RavlN::DListC<unsigned int > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListUIntIterC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_DListUIntIterC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DListUIntIterC__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_DListUIntIterC'");
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_IsValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_IsValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::UIntT > const *)arg1)->IsValid();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_First(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_First",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->First();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_Last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_Last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Last();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_IsElm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_IsElm",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::UIntT > const *)arg1)->IsElm();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_IsFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_IsFirst",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::UIntT > const *)arg1)->IsFirst();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_IsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_IsLast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::UIntT > const *)arg1)->IsLast();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_Next(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_Next",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Next();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_Prev(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_Prev",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Prev();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_NextCrc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_NextCrc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->NextCrc();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_PrevCrc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_PrevCrc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->PrevCrc();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_Nth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    RavlN::IntT arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListUIntIterC_Nth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->Nth(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_NextData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    RavlN::UIntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_NextData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::UIntT)(arg1)->NextData();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_PrevData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    RavlN::UIntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_PrevData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::UIntT)(arg1)->PrevData();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_NextCrcData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    RavlN::UIntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_NextCrcData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::UIntT)(arg1)->NextCrcData();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_PrevCrcData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    RavlN::UIntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_PrevCrcData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::UIntT)(arg1)->PrevCrcData();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_Tail(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    RavlN::DListC<RavlN::UIntT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_Tail",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Tail();
    
    {
        RavlN::DListC<RavlN::UIntT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::UIntT >(static_cast<RavlN::DListC<RavlN::UIntT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTunsigned_int_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_Head(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    RavlN::DListC<RavlN::UIntT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_Head",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Head();
    
    {
        RavlN::DListC<RavlN::UIntT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::UIntT >(static_cast<RavlN::DListC<RavlN::UIntT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTunsigned_int_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_InclusiveTail(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    RavlN::DListC<RavlN::UIntT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_InclusiveTail",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->InclusiveTail();
    
    {
        RavlN::DListC<RavlN::UIntT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::UIntT >(static_cast<RavlN::DListC<RavlN::UIntT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTunsigned_int_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_InclusiveHead(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    RavlN::DListC<RavlN::UIntT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_InclusiveHead",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->InclusiveHead();
    
    {
        RavlN::DListC<RavlN::UIntT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::UIntT >(static_cast<RavlN::DListC<RavlN::UIntT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTunsigned_int_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC_Data(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    RavlN::UIntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC_Data",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::UIntT)(arg1)->Data();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListUIntIterC___deref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    RavlN::UIntT *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListUIntIterC___deref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::UIntT *)(arg1)->operator ->();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DListUIntIterC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::UIntT > *arg1 = (RavlN::DLIterC<RavlN::UIntT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DListUIntIterC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DListUIntIterC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__DLIterCTunsigned_int_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ToList__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::UIntT > arg1 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ToList",&obj0)) goto fail;
    {
        RavlN::DListC<RavlN::UIntT > * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::UIntT >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    result = (PyObject *)ToList(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListInt64C(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DListInt64C")) goto fail;
    result = (RavlN::DListC<RavlN::Int64T > *)new RavlN::DListC<RavlN::Int64T >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DListCTlong_long_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64C_Empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > *arg1 = (RavlN::DListC<RavlN::Int64T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64C_Empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Empty();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64C_InsFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > *arg1 = (RavlN::DListC<RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    RavlN::Int64T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt64C_InsFirst",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->InsFirst((long long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64C_InsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > *arg1 = (RavlN::DListC<RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    RavlN::Int64T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt64C_InsLast",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->InsLast((long long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64C_PopFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > *arg1 = (RavlN::DListC<RavlN::Int64T > *) 0 ;
    RavlN::Int64T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64C_PopFirst",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int64T)(arg1)->PopFirst();
    
    {
        resultobj = SWIG_From_long_SS_long(static_cast<long long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64C_PopLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > *arg1 = (RavlN::DListC<RavlN::Int64T > *) 0 ;
    RavlN::Int64T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64C_PopLast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int64T)(arg1)->PopLast();
    
    {
        resultobj = SWIG_From_long_SS_long(static_cast<long long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64C_MoveFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > *arg1 = (RavlN::DListC<RavlN::Int64T > *) 0 ;
    RavlN::DListC<RavlN::Int64T > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt64C_MoveFirst",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::Int64T >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->MoveFirst(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64C_MoveLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > *arg1 = (RavlN::DListC<RavlN::Int64T > *) 0 ;
    RavlN::DListC<RavlN::Int64T > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt64C_MoveLast",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::Int64T >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->MoveLast(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64C_First(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > *arg1 = (RavlN::DListC<RavlN::Int64T > *) 0 ;
    RavlN::Int64T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64C_First",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int64T)(arg1)->First();
    
    {
        resultobj = SWIG_From_long_SS_long(static_cast<long long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64C_Last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > *arg1 = (RavlN::DListC<RavlN::Int64T > *) 0 ;
    RavlN::Int64T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64C_Last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int64T)(arg1)->Last();
    
    {
        resultobj = SWIG_From_long_SS_long(static_cast<long long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64C_Del(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > *arg1 = (RavlN::DListC<RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    bool result;
    RavlN::Int64T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt64C_Del",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (bool)(arg1)->Del((long long const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64C_Contains(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > *arg1 = (RavlN::DListC<RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    bool result;
    RavlN::Int64T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt64C_Contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (bool)(arg1)->Contains((long long const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64C_Nth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > *arg1 = (RavlN::DListC<RavlN::Int64T > *) 0 ;
    int arg2 ;
    RavlN::Int64T result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt64C_Nth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::Int64T)(arg1)->Nth(arg2);
    
    {
        resultobj = SWIG_From_long_SS_long(static_cast<long long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DListInt64C(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > *arg1 = (RavlN::DListC<RavlN::Int64T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DListInt64C",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DListInt64C_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__DListCTlong_long_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DListInt64IterC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DListInt64IterC")) goto fail;
    result = (RavlN::DLIterC<RavlN::Int64T > *)new RavlN::DLIterC<RavlN::Int64T >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DLIterCTlong_long_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListInt64IterC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > *arg1 = 0 ;
    RavlN::DLIterC<RavlN::Int64T > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DListInt64IterC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::Int64T >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::DLIterC<RavlN::Int64T > *)new RavlN::DLIterC<RavlN::Int64T >((RavlN::DListC<long long > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DLIterCTlong_long_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListInt64IterC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_DListInt64IterC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DListCTlong_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DListInt64IterC__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_DListInt64IterC'");
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_IsValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_IsValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::Int64T > const *)arg1)->IsValid();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_First(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_First",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->First();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_Last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_Last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Last();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_IsElm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_IsElm",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::Int64T > const *)arg1)->IsElm();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_IsFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_IsFirst",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::Int64T > const *)arg1)->IsFirst();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_IsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_IsLast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::Int64T > const *)arg1)->IsLast();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_Next(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_Next",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Next();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_Prev(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_Prev",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Prev();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_NextCrc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_NextCrc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->NextCrc();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_PrevCrc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_PrevCrc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->PrevCrc();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_Nth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    RavlN::IntT arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt64IterC_Nth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->Nth(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_NextData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    RavlN::Int64T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_NextData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int64T)(arg1)->NextData();
    
    {
        resultobj = SWIG_From_long_SS_long(static_cast<long long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_PrevData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    RavlN::Int64T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_PrevData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int64T)(arg1)->PrevData();
    
    {
        resultobj = SWIG_From_long_SS_long(static_cast<long long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_NextCrcData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    RavlN::Int64T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_NextCrcData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int64T)(arg1)->NextCrcData();
    
    {
        resultobj = SWIG_From_long_SS_long(static_cast<long long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_PrevCrcData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    RavlN::Int64T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_PrevCrcData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int64T)(arg1)->PrevCrcData();
    
    {
        resultobj = SWIG_From_long_SS_long(static_cast<long long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_Tail(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    RavlN::DListC<RavlN::Int64T > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_Tail",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Tail();
    
    {
        RavlN::DListC<RavlN::Int64T > * resultptr;
        resultptr = new RavlN::DListC<RavlN::Int64T >(static_cast<RavlN::DListC<RavlN::Int64T > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTlong_long_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_Head(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    RavlN::DListC<RavlN::Int64T > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_Head",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Head();
    
    {
        RavlN::DListC<RavlN::Int64T > * resultptr;
        resultptr = new RavlN::DListC<RavlN::Int64T >(static_cast<RavlN::DListC<RavlN::Int64T > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTlong_long_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_InclusiveTail(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    RavlN::DListC<RavlN::Int64T > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_InclusiveTail",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->InclusiveTail();
    
    {
        RavlN::DListC<RavlN::Int64T > * resultptr;
        resultptr = new RavlN::DListC<RavlN::Int64T >(static_cast<RavlN::DListC<RavlN::Int64T > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTlong_long_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_InclusiveHead(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    RavlN::DListC<RavlN::Int64T > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_InclusiveHead",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->InclusiveHead();
    
    {
        RavlN::DListC<RavlN::Int64T > * resultptr;
        resultptr = new RavlN::DListC<RavlN::Int64T >(static_cast<RavlN::DListC<RavlN::Int64T > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTlong_long_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC_Data(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    RavlN::Int64T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC_Data",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int64T)(arg1)->Data();
    
    {
        resultobj = SWIG_From_long_SS_long(static_cast<long long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt64IterC___deref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    RavlN::Int64T *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt64IterC___deref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int64T *)(arg1)->operator ->();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_long_long, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DListInt64IterC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int64T > *arg1 = (RavlN::DLIterC<RavlN::Int64T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DListInt64IterC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTlong_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DListInt64IterC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__DLIterCTlong_long_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ToList__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int64T > arg1 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ToList",&obj0)) goto fail;
    {
        RavlN::DListC<RavlN::Int64T > * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_RavlN__DListCTlong_long_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::Int64T >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    result = (PyObject *)ToList(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListInt16C(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DListInt16C")) goto fail;
    result = (RavlN::DListC<RavlN::Int16T > *)new RavlN::DListC<RavlN::Int16T >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DListCTshort_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16C_Empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > *arg1 = (RavlN::DListC<RavlN::Int16T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16C_Empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Empty();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16C_InsFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > *arg1 = (RavlN::DListC<RavlN::Int16T > *) 0 ;
    RavlN::Int16T *arg2 = 0 ;
    RavlN::Int16T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt16C_InsFirst",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int16T >(SWIG_As_short(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->InsFirst((short const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16C_InsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > *arg1 = (RavlN::DListC<RavlN::Int16T > *) 0 ;
    RavlN::Int16T *arg2 = 0 ;
    RavlN::Int16T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt16C_InsLast",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int16T >(SWIG_As_short(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->InsLast((short const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16C_PopFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > *arg1 = (RavlN::DListC<RavlN::Int16T > *) 0 ;
    RavlN::Int16T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16C_PopFirst",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int16T)(arg1)->PopFirst();
    
    {
        resultobj = SWIG_From_short(static_cast<short >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16C_PopLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > *arg1 = (RavlN::DListC<RavlN::Int16T > *) 0 ;
    RavlN::Int16T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16C_PopLast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int16T)(arg1)->PopLast();
    
    {
        resultobj = SWIG_From_short(static_cast<short >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16C_MoveFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > *arg1 = (RavlN::DListC<RavlN::Int16T > *) 0 ;
    RavlN::DListC<RavlN::Int16T > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt16C_MoveFirst",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::Int16T >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->MoveFirst(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16C_MoveLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > *arg1 = (RavlN::DListC<RavlN::Int16T > *) 0 ;
    RavlN::DListC<RavlN::Int16T > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt16C_MoveLast",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::Int16T >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->MoveLast(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16C_First(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > *arg1 = (RavlN::DListC<RavlN::Int16T > *) 0 ;
    RavlN::Int16T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16C_First",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int16T)(arg1)->First();
    
    {
        resultobj = SWIG_From_short(static_cast<short >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16C_Last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > *arg1 = (RavlN::DListC<RavlN::Int16T > *) 0 ;
    RavlN::Int16T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16C_Last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int16T)(arg1)->Last();
    
    {
        resultobj = SWIG_From_short(static_cast<short >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16C_Del(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > *arg1 = (RavlN::DListC<RavlN::Int16T > *) 0 ;
    RavlN::Int16T *arg2 = 0 ;
    bool result;
    RavlN::Int16T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt16C_Del",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int16T >(SWIG_As_short(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (bool)(arg1)->Del((short const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16C_Contains(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > *arg1 = (RavlN::DListC<RavlN::Int16T > *) 0 ;
    RavlN::Int16T *arg2 = 0 ;
    bool result;
    RavlN::Int16T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt16C_Contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int16T >(SWIG_As_short(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (bool)(arg1)->Contains((short const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16C_Nth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > *arg1 = (RavlN::DListC<RavlN::Int16T > *) 0 ;
    int arg2 ;
    RavlN::Int16T result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt16C_Nth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::Int16T)(arg1)->Nth(arg2);
    
    {
        resultobj = SWIG_From_short(static_cast<short >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DListInt16C(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > *arg1 = (RavlN::DListC<RavlN::Int16T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DListInt16C",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DListInt16C_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__DListCTshort_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DListInt16IterC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DListInt16IterC")) goto fail;
    result = (RavlN::DLIterC<RavlN::Int16T > *)new RavlN::DLIterC<RavlN::Int16T >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DLIterCTshort_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListInt16IterC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > *arg1 = 0 ;
    RavlN::DLIterC<RavlN::Int16T > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DListInt16IterC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::Int16T >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::DLIterC<RavlN::Int16T > *)new RavlN::DLIterC<RavlN::Int16T >((RavlN::DListC<short > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DLIterCTshort_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListInt16IterC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_DListInt16IterC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DListCTshort_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DListInt16IterC__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_DListInt16IterC'");
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_IsValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_IsValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::Int16T > const *)arg1)->IsValid();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_First(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_First",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->First();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_Last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_Last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Last();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_IsElm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_IsElm",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::Int16T > const *)arg1)->IsElm();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_IsFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_IsFirst",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::Int16T > const *)arg1)->IsFirst();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_IsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_IsLast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::Int16T > const *)arg1)->IsLast();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_Next(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_Next",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Next();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_Prev(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_Prev",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Prev();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_NextCrc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_NextCrc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->NextCrc();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_PrevCrc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_PrevCrc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->PrevCrc();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_Nth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    RavlN::IntT arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListInt16IterC_Nth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->Nth(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_NextData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    RavlN::Int16T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_NextData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int16T)(arg1)->NextData();
    
    {
        resultobj = SWIG_From_short(static_cast<short >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_PrevData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    RavlN::Int16T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_PrevData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int16T)(arg1)->PrevData();
    
    {
        resultobj = SWIG_From_short(static_cast<short >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_NextCrcData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    RavlN::Int16T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_NextCrcData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int16T)(arg1)->NextCrcData();
    
    {
        resultobj = SWIG_From_short(static_cast<short >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_PrevCrcData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    RavlN::Int16T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_PrevCrcData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int16T)(arg1)->PrevCrcData();
    
    {
        resultobj = SWIG_From_short(static_cast<short >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_Tail(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    RavlN::DListC<RavlN::Int16T > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_Tail",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Tail();
    
    {
        RavlN::DListC<RavlN::Int16T > * resultptr;
        resultptr = new RavlN::DListC<RavlN::Int16T >(static_cast<RavlN::DListC<RavlN::Int16T > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTshort_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_Head(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    RavlN::DListC<RavlN::Int16T > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_Head",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Head();
    
    {
        RavlN::DListC<RavlN::Int16T > * resultptr;
        resultptr = new RavlN::DListC<RavlN::Int16T >(static_cast<RavlN::DListC<RavlN::Int16T > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTshort_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_InclusiveTail(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    RavlN::DListC<RavlN::Int16T > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_InclusiveTail",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->InclusiveTail();
    
    {
        RavlN::DListC<RavlN::Int16T > * resultptr;
        resultptr = new RavlN::DListC<RavlN::Int16T >(static_cast<RavlN::DListC<RavlN::Int16T > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTshort_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_InclusiveHead(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    RavlN::DListC<RavlN::Int16T > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_InclusiveHead",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->InclusiveHead();
    
    {
        RavlN::DListC<RavlN::Int16T > * resultptr;
        resultptr = new RavlN::DListC<RavlN::Int16T >(static_cast<RavlN::DListC<RavlN::Int16T > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTshort_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC_Data(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    RavlN::Int16T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC_Data",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int16T)(arg1)->Data();
    
    {
        resultobj = SWIG_From_short(static_cast<short >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListInt16IterC___deref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    RavlN::Int16T *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListInt16IterC___deref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Int16T *)(arg1)->operator ->();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_short, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DListInt16IterC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Int16T > *arg1 = (RavlN::DLIterC<RavlN::Int16T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DListInt16IterC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTshort_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DListInt16IterC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__DLIterCTshort_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ToList__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Int16T > arg1 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ToList",&obj0)) goto fail;
    {
        RavlN::DListC<RavlN::Int16T > * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_RavlN__DListCTshort_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::Int16T >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    result = (PyObject *)ToList(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListByteC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DListByteC")) goto fail;
    result = (RavlN::DListC<RavlN::ByteT > *)new RavlN::DListC<RavlN::ByteT >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DListCTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteC_Empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > *arg1 = (RavlN::DListC<RavlN::ByteT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteC_Empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Empty();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteC_InsFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > *arg1 = (RavlN::DListC<RavlN::ByteT > *) 0 ;
    RavlN::ByteT *arg2 = 0 ;
    RavlN::ByteT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListByteC_InsFirst",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::ByteT >(SWIG_As_unsigned_SS_char(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->InsFirst((unsigned char const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteC_InsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > *arg1 = (RavlN::DListC<RavlN::ByteT > *) 0 ;
    RavlN::ByteT *arg2 = 0 ;
    RavlN::ByteT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListByteC_InsLast",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::ByteT >(SWIG_As_unsigned_SS_char(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->InsLast((unsigned char const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteC_PopFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > *arg1 = (RavlN::DListC<RavlN::ByteT > *) 0 ;
    RavlN::ByteT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteC_PopFirst",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::ByteT)(arg1)->PopFirst();
    
    {
        resultobj = SWIG_From_unsigned_SS_char(static_cast<unsigned char >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteC_PopLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > *arg1 = (RavlN::DListC<RavlN::ByteT > *) 0 ;
    RavlN::ByteT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteC_PopLast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::ByteT)(arg1)->PopLast();
    
    {
        resultobj = SWIG_From_unsigned_SS_char(static_cast<unsigned char >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteC_MoveFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > *arg1 = (RavlN::DListC<RavlN::ByteT > *) 0 ;
    RavlN::DListC<RavlN::ByteT > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListByteC_MoveFirst",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::ByteT >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->MoveFirst(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteC_MoveLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > *arg1 = (RavlN::DListC<RavlN::ByteT > *) 0 ;
    RavlN::DListC<RavlN::ByteT > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListByteC_MoveLast",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::ByteT >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->MoveLast(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteC_First(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > *arg1 = (RavlN::DListC<RavlN::ByteT > *) 0 ;
    RavlN::ByteT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteC_First",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::ByteT)(arg1)->First();
    
    {
        resultobj = SWIG_From_unsigned_SS_char(static_cast<unsigned char >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteC_Last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > *arg1 = (RavlN::DListC<RavlN::ByteT > *) 0 ;
    RavlN::ByteT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteC_Last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::ByteT)(arg1)->Last();
    
    {
        resultobj = SWIG_From_unsigned_SS_char(static_cast<unsigned char >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteC_Del(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > *arg1 = (RavlN::DListC<RavlN::ByteT > *) 0 ;
    RavlN::ByteT *arg2 = 0 ;
    bool result;
    RavlN::ByteT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListByteC_Del",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::ByteT >(SWIG_As_unsigned_SS_char(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (bool)(arg1)->Del((unsigned char const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteC_Contains(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > *arg1 = (RavlN::DListC<RavlN::ByteT > *) 0 ;
    RavlN::ByteT *arg2 = 0 ;
    bool result;
    RavlN::ByteT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListByteC_Contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::ByteT >(SWIG_As_unsigned_SS_char(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (bool)(arg1)->Contains((unsigned char const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteC_Nth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > *arg1 = (RavlN::DListC<RavlN::ByteT > *) 0 ;
    int arg2 ;
    RavlN::ByteT result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListByteC_Nth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::ByteT)(arg1)->Nth(arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_char(static_cast<unsigned char >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DListByteC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > *arg1 = (RavlN::DListC<RavlN::ByteT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DListByteC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DListByteC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__DListCTunsigned_char_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DListByteIterC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DListByteIterC")) goto fail;
    result = (RavlN::DLIterC<RavlN::ByteT > *)new RavlN::DLIterC<RavlN::ByteT >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListByteIterC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > *arg1 = 0 ;
    RavlN::DLIterC<RavlN::ByteT > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DListByteIterC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::ByteT >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::DLIterC<RavlN::ByteT > *)new RavlN::DLIterC<RavlN::ByteT >((RavlN::DListC<unsigned char > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListByteIterC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_DListByteIterC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DListByteIterC__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_DListByteIterC'");
    return NULL;
}


static PyObject *_wrap_DListByteIterC_IsValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_IsValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::ByteT > const *)arg1)->IsValid();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_First(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_First",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->First();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_Last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_Last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Last();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_IsElm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_IsElm",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::ByteT > const *)arg1)->IsElm();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_IsFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_IsFirst",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::ByteT > const *)arg1)->IsFirst();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_IsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_IsLast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::ByteT > const *)arg1)->IsLast();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_Next(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_Next",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Next();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_Prev(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_Prev",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Prev();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_NextCrc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_NextCrc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->NextCrc();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_PrevCrc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_PrevCrc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->PrevCrc();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_Nth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    RavlN::IntT arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListByteIterC_Nth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->Nth(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_NextData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    RavlN::ByteT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_NextData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::ByteT)(arg1)->NextData();
    
    {
        resultobj = SWIG_From_unsigned_SS_char(static_cast<unsigned char >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_PrevData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    RavlN::ByteT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_PrevData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::ByteT)(arg1)->PrevData();
    
    {
        resultobj = SWIG_From_unsigned_SS_char(static_cast<unsigned char >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_NextCrcData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    RavlN::ByteT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_NextCrcData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::ByteT)(arg1)->NextCrcData();
    
    {
        resultobj = SWIG_From_unsigned_SS_char(static_cast<unsigned char >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_PrevCrcData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    RavlN::ByteT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_PrevCrcData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::ByteT)(arg1)->PrevCrcData();
    
    {
        resultobj = SWIG_From_unsigned_SS_char(static_cast<unsigned char >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_Tail(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    RavlN::DListC<RavlN::ByteT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_Tail",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Tail();
    
    {
        RavlN::DListC<RavlN::ByteT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::ByteT >(static_cast<RavlN::DListC<RavlN::ByteT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTunsigned_char_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_Head(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    RavlN::DListC<RavlN::ByteT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_Head",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Head();
    
    {
        RavlN::DListC<RavlN::ByteT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::ByteT >(static_cast<RavlN::DListC<RavlN::ByteT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTunsigned_char_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_InclusiveTail(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    RavlN::DListC<RavlN::ByteT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_InclusiveTail",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->InclusiveTail();
    
    {
        RavlN::DListC<RavlN::ByteT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::ByteT >(static_cast<RavlN::DListC<RavlN::ByteT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTunsigned_char_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_InclusiveHead(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    RavlN::DListC<RavlN::ByteT > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_InclusiveHead",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->InclusiveHead();
    
    {
        RavlN::DListC<RavlN::ByteT > * resultptr;
        resultptr = new RavlN::DListC<RavlN::ByteT >(static_cast<RavlN::DListC<RavlN::ByteT > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTunsigned_char_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC_Data(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    RavlN::ByteT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC_Data",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::ByteT)(arg1)->Data();
    
    {
        resultobj = SWIG_From_unsigned_SS_char(static_cast<unsigned char >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListByteIterC___deref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    RavlN::ByteT *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListByteIterC___deref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::ByteT *)(arg1)->operator ->();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DListByteIterC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::ByteT > *arg1 = (RavlN::DLIterC<RavlN::ByteT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DListByteIterC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DListByteIterC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__DLIterCTunsigned_char_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ToList__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::ByteT > arg1 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ToList",&obj0)) goto fail;
    {
        RavlN::DListC<RavlN::ByteT > * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::ByteT >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    result = (PyObject *)ToList(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Point2dC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Point2dC *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Point2dC")) goto fail;
    result = (RavlN::Point2dC *)new RavlN::Point2dC();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Point2dC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Point2dC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealT arg1 ;
    RavlN::RealT arg2 ;
    RavlN::Point2dC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Point2dC",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<RavlN::RealT >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::Point2dC *)new RavlN::Point2dC(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Point2dC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Point2dC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Point2dC__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_Point2dC__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Point2dC'");
    return NULL;
}


static PyObject *_wrap_Point2dC_Row(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Point2dC *arg1 = (RavlN::Point2dC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Point2dC_Row",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Point2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)((RavlN::Point2dC const *)arg1)->Row();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point2dC_Col(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Point2dC *arg1 = (RavlN::Point2dC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Point2dC_Col",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Point2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)((RavlN::Point2dC const *)arg1)->Col();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Point2dC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Point2dC *arg1 = (RavlN::Point2dC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Point2dC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Point2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Point2dC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__Point2dC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DListPoint2dC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DListPoint2dC")) goto fail;
    result = (RavlN::DListC<RavlN::Point2dC > *)new RavlN::DListC<RavlN::Point2dC >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dC_Empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > *arg1 = (RavlN::DListC<RavlN::Point2dC > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dC_Empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Empty();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dC_InsFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > *arg1 = (RavlN::DListC<RavlN::Point2dC > *) 0 ;
    RavlN::Point2dC *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListPoint2dC_InsFirst",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__Point2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::Point2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->InsFirst((RavlN::Point2dC const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dC_InsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > *arg1 = (RavlN::DListC<RavlN::Point2dC > *) 0 ;
    RavlN::Point2dC *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListPoint2dC_InsLast",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__Point2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::Point2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->InsLast((RavlN::Point2dC const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dC_PopFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > *arg1 = (RavlN::DListC<RavlN::Point2dC > *) 0 ;
    RavlN::Point2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dC_PopFirst",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->PopFirst();
    
    {
        RavlN::Point2dC * resultptr;
        resultptr = new RavlN::Point2dC(static_cast<RavlN::Point2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__Point2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dC_PopLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > *arg1 = (RavlN::DListC<RavlN::Point2dC > *) 0 ;
    RavlN::Point2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dC_PopLast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->PopLast();
    
    {
        RavlN::Point2dC * resultptr;
        resultptr = new RavlN::Point2dC(static_cast<RavlN::Point2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__Point2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dC_MoveFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > *arg1 = (RavlN::DListC<RavlN::Point2dC > *) 0 ;
    RavlN::DListC<RavlN::Point2dC > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListPoint2dC_MoveFirst",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::Point2dC >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->MoveFirst(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dC_MoveLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > *arg1 = (RavlN::DListC<RavlN::Point2dC > *) 0 ;
    RavlN::DListC<RavlN::Point2dC > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListPoint2dC_MoveLast",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::Point2dC >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->MoveLast(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dC_First(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > *arg1 = (RavlN::DListC<RavlN::Point2dC > *) 0 ;
    RavlN::Point2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dC_First",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->First();
    
    {
        RavlN::Point2dC * resultptr;
        resultptr = new RavlN::Point2dC(static_cast<RavlN::Point2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__Point2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dC_Last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > *arg1 = (RavlN::DListC<RavlN::Point2dC > *) 0 ;
    RavlN::Point2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dC_Last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Last();
    
    {
        RavlN::Point2dC * resultptr;
        resultptr = new RavlN::Point2dC(static_cast<RavlN::Point2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__Point2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dC_Del(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > *arg1 = (RavlN::DListC<RavlN::Point2dC > *) 0 ;
    RavlN::Point2dC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListPoint2dC_Del",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__Point2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::Point2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->Del((RavlN::Point2dC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dC_Contains(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > *arg1 = (RavlN::DListC<RavlN::Point2dC > *) 0 ;
    RavlN::Point2dC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListPoint2dC_Contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__Point2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::Point2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->Contains((RavlN::Point2dC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dC_Nth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > *arg1 = (RavlN::DListC<RavlN::Point2dC > *) 0 ;
    int arg2 ;
    RavlN::Point2dC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListPoint2dC_Nth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->Nth(arg2);
    
    {
        RavlN::Point2dC * resultptr;
        resultptr = new RavlN::Point2dC(static_cast<RavlN::Point2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__Point2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DListPoint2dC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > *arg1 = (RavlN::DListC<RavlN::Point2dC > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DListPoint2dC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DListPoint2dC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DListPoint2dIterC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DListPoint2dIterC")) goto fail;
    result = (RavlN::DLIterC<RavlN::Point2dC > *)new RavlN::DLIterC<RavlN::Point2dC >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListPoint2dIterC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > *arg1 = 0 ;
    RavlN::DLIterC<RavlN::Point2dC > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DListPoint2dIterC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::Point2dC >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::DLIterC<RavlN::Point2dC > *)new RavlN::DLIterC<RavlN::Point2dC >((RavlN::DListC<RavlN::Point2dC > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DListPoint2dIterC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_DListPoint2dIterC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DListPoint2dIterC__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_DListPoint2dIterC'");
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_IsValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_IsValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::Point2dC > const *)arg1)->IsValid();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_First(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_First",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->First();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_Last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_Last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Last();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_IsElm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_IsElm",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::Point2dC > const *)arg1)->IsElm();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_IsFirst(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_IsFirst",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::Point2dC > const *)arg1)->IsFirst();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_IsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_IsLast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DLIterC<RavlN::Point2dC > const *)arg1)->IsLast();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_Next(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_Next",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Next();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_Prev(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_Prev",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Prev();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_NextCrc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_NextCrc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->NextCrc();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_PrevCrc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_PrevCrc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->PrevCrc();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_Nth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    RavlN::IntT arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DListPoint2dIterC_Nth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->Nth(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_NextData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    RavlN::Point2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_NextData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->NextData();
    
    {
        RavlN::Point2dC * resultptr;
        resultptr = new RavlN::Point2dC(static_cast<RavlN::Point2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__Point2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_PrevData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    RavlN::Point2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_PrevData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->PrevData();
    
    {
        RavlN::Point2dC * resultptr;
        resultptr = new RavlN::Point2dC(static_cast<RavlN::Point2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__Point2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_NextCrcData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    RavlN::Point2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_NextCrcData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->NextCrcData();
    
    {
        RavlN::Point2dC * resultptr;
        resultptr = new RavlN::Point2dC(static_cast<RavlN::Point2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__Point2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_PrevCrcData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    RavlN::Point2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_PrevCrcData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->PrevCrcData();
    
    {
        RavlN::Point2dC * resultptr;
        resultptr = new RavlN::Point2dC(static_cast<RavlN::Point2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__Point2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_Tail(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    RavlN::DListC<RavlN::Point2dC > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_Tail",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Tail();
    
    {
        RavlN::DListC<RavlN::Point2dC > * resultptr;
        resultptr = new RavlN::DListC<RavlN::Point2dC >(static_cast<RavlN::DListC<RavlN::Point2dC > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_Head(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    RavlN::DListC<RavlN::Point2dC > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_Head",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Head();
    
    {
        RavlN::DListC<RavlN::Point2dC > * resultptr;
        resultptr = new RavlN::DListC<RavlN::Point2dC >(static_cast<RavlN::DListC<RavlN::Point2dC > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_InclusiveTail(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    RavlN::DListC<RavlN::Point2dC > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_InclusiveTail",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->InclusiveTail();
    
    {
        RavlN::DListC<RavlN::Point2dC > * resultptr;
        resultptr = new RavlN::DListC<RavlN::Point2dC >(static_cast<RavlN::DListC<RavlN::Point2dC > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_InclusiveHead(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    RavlN::DListC<RavlN::Point2dC > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_InclusiveHead",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->InclusiveHead();
    
    {
        RavlN::DListC<RavlN::Point2dC > * resultptr;
        resultptr = new RavlN::DListC<RavlN::Point2dC >(static_cast<RavlN::DListC<RavlN::Point2dC > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_Data(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    RavlN::Point2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_Data",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Data();
    
    {
        RavlN::Point2dC * resultptr;
        resultptr = new RavlN::Point2dC(static_cast<RavlN::Point2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__Point2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC___deref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    RavlN::Point2dC *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC___deref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::Point2dC *)(arg1)->operator ->();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Point2dC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_Row(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_Row",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)(*arg1)->Row();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DListPoint2dIterC_Col(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DListPoint2dIterC_Col",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)(*arg1)->Col();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DListPoint2dIterC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DLIterC<RavlN::Point2dC > *arg1 = (RavlN::DLIterC<RavlN::Point2dC > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DListPoint2dIterC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DListPoint2dIterC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__DLIterCTRavlN__Point2dC_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ToList__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DListC<RavlN::Point2dC > arg1 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ToList",&obj0)) goto fail;
    {
        RavlN::DListC<RavlN::Point2dC > * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::DListC<RavlN::Point2dC >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    result = (PyObject *)ToList(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ToList(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DListCTdouble_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_ToList__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DListCTint_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_ToList__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DListCTunsigned_int_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_ToList__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DListCTlong_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_ToList__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DListCTshort_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_ToList__SWIG_4(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DListCTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_ToList__SWIG_5(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DListCTRavlN__Point2dC_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_ToList__SWIG_6(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ToList'");
    return NULL;
}


static PyObject *_wrap_new_IndexC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexC *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_IndexC")) goto fail;
    result = (RavlN::IndexC *)new RavlN::IndexC();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__IndexC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IndexC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IntT arg1 ;
    RavlN::IndexC *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_IndexC",&obj0)) goto fail;
    {
        arg1 = static_cast<RavlN::IntT >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::IndexC *)new RavlN::IndexC(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__IndexC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IndexC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_IndexC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_IndexC__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_IndexC'");
    return NULL;
}


static PyObject *_wrap_IndexC_V(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexC *arg1 = (RavlN::IndexC *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IndexC_V",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlN::IndexC const *)arg1)->V();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IndexC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexC *arg1 = (RavlN::IndexC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IndexC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IndexC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__IndexC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Index2dC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Index2dC *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Index2dC")) goto fail;
    result = (RavlN::Index2dC *)new RavlN::Index2dC();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Index2dC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Index2dC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IntT arg1 ;
    RavlN::IntT arg2 ;
    RavlN::Index2dC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Index2dC",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<RavlN::IntT >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::Index2dC *)new RavlN::Index2dC(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Index2dC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Index2dC__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexC arg1 ;
    RavlN::IndexC arg2 ;
    RavlN::Index2dC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Index2dC",&obj0,&obj1)) goto fail;
    {
        RavlN::IndexC * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_RavlN__IndexC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::IndexC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        RavlN::IndexC * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_RavlN__IndexC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::IndexC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (RavlN::Index2dC *)new RavlN::Index2dC(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Index2dC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Index2dC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Index2dC__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__IndexC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__IndexC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_Index2dC__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_Index2dC__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Index2dC'");
    return NULL;
}


static PyObject *_wrap_Index2dC_Row(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Index2dC *arg1 = (RavlN::Index2dC *) 0 ;
    RavlN::IndexC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Index2dC_Row",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Index2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((RavlN::Index2dC const *)arg1)->Row();
    
    {
        RavlN::IndexC * resultptr;
        resultptr = new RavlN::IndexC(static_cast<RavlN::IndexC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__IndexC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Index2dC_Col(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Index2dC *arg1 = (RavlN::Index2dC *) 0 ;
    RavlN::IndexC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Index2dC_Col",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Index2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((RavlN::Index2dC const *)arg1)->Col();
    
    {
        RavlN::IndexC * resultptr;
        resultptr = new RavlN::IndexC(static_cast<RavlN::IndexC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__IndexC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Index2dC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Index2dC *arg1 = (RavlN::Index2dC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Index2dC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Index2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Index2dC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__Index2dC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IndexRange2dC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexRange2dC *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_IndexRange2dC")) goto fail;
    result = (RavlN::IndexRange2dC *)new RavlN::IndexRange2dC();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__IndexRange2dC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexRange2dC_Rows(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexRange2dC *arg1 = (RavlN::IndexRange2dC *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IndexRange2dC_Rows",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlN::IndexRange2dC const *)arg1)->Rows();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexRange2dC_Cols(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexRange2dC *arg1 = (RavlN::IndexRange2dC *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IndexRange2dC_Cols",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlN::IndexRange2dC const *)arg1)->Cols();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexRange2dC_Area(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexRange2dC *arg1 = (RavlN::IndexRange2dC *) 0 ;
    RavlN::SizeT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IndexRange2dC_Area",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::SizeT)((RavlN::IndexRange2dC const *)arg1)->Area();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexRange2dC_Contains(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexRange2dC *arg1 = (RavlN::IndexRange2dC *) 0 ;
    RavlN::Index2dC arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IndexRange2dC_Contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::Index2dC * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_RavlN__Index2dC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::Index2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (bool)((RavlN::IndexRange2dC const *)arg1)->Contains(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexRange2dC_Expand(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexRange2dC *arg1 = (RavlN::IndexRange2dC *) 0 ;
    RavlN::IntT arg2 ;
    RavlN::IndexRange2dC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IndexRange2dC_Expand",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((RavlN::IndexRange2dC const *)arg1)->Expand(arg2);
    
    {
        RavlN::IndexRange2dC * resultptr;
        resultptr = new RavlN::IndexRange2dC(static_cast<RavlN::IndexRange2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__IndexRange2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexRange2dC_ClipBy(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexRange2dC *arg1 = (RavlN::IndexRange2dC *) 0 ;
    RavlN::IndexRange2dC arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IndexRange2dC_ClipBy",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::IndexRange2dC * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::IndexRange2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    (arg1)->ClipBy(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IndexRange2dC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexRange2dC *arg1 = (RavlN::IndexRange2dC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IndexRange2dC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IndexRange2dC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__IndexRange2dC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Array2dByteC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::ByteT > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Array2dByteC")) goto fail;
    result = (RavlN::Array2dC<RavlN::ByteT > *)new RavlN::Array2dC<RavlN::ByteT >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Array2dByteC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::SizeT arg1 ;
    RavlN::SizeT arg2 ;
    RavlN::Array2dC<RavlN::ByteT > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Array2dByteC",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<RavlN::SizeT >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::SizeT >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::Array2dC<RavlN::ByteT > *)new RavlN::Array2dC<RavlN::ByteT >(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Array2dByteC__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexRange2dC *arg1 = 0 ;
    RavlN::Array2dC<RavlN::ByteT > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Array2dByteC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::IndexRange2dC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::Array2dC<RavlN::ByteT > *)new RavlN::Array2dC<RavlN::ByteT >((RavlN::IndexRange2dC const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Array2dByteC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Array2dByteC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__IndexRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Array2dByteC__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_new_Array2dByteC__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Array2dByteC'");
    return NULL;
}


static PyObject *_wrap_Array2dByteC_Frame(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::ByteT > *arg1 = (RavlN::Array2dC<RavlN::ByteT > *) 0 ;
    RavlN::IndexRange2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Array2dByteC_Frame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Frame();
    
    {
        RavlN::IndexRange2dC * resultptr;
        resultptr = new RavlN::IndexRange2dC(static_cast<RavlN::IndexRange2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__IndexRange2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Array2dByteC_Fill(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::ByteT > *arg1 = (RavlN::Array2dC<RavlN::ByteT > *) 0 ;
    RavlN::ByteT *arg2 = 0 ;
    RavlN::ByteT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Array2dByteC_Fill",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::ByteT >(SWIG_As_unsigned_SS_char(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->Fill((unsigned char const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Array2dByteC_Stride(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::ByteT > *arg1 = (RavlN::Array2dC<RavlN::ByteT > *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Array2dByteC_Stride",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlN::Array2dC<RavlN::ByteT > const *)arg1)->Stride();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Array2dByteC_Access__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::ByteT > *arg1 = (RavlN::Array2dC<RavlN::ByteT > *) 0 ;
    RavlN::Index2dC *arg2 = 0 ;
    RavlN::ByteT *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Array2dByteC_Access",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__Index2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::Index2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlN::ByteT &_result_ref = RavlN_Array2dC_Sl_RavlN_ByteT_Sg__Access__SWIG_0(arg1,(RavlN::Index2dC const &)*arg2);
        result = (RavlN::ByteT *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Array2dByteC_Access__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::ByteT > *arg1 = (RavlN::Array2dC<RavlN::ByteT > *) 0 ;
    RavlN::IntT arg2 ;
    RavlN::IntT arg3 ;
    RavlN::ByteT *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Array2dByteC_Access",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<RavlN::IntT >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        RavlN::ByteT &_result_ref = RavlN_Array2dC_Sl_RavlN_ByteT_Sg__Access__SWIG_1(arg1,arg2,arg3);
        result = (RavlN::ByteT *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Array2dByteC_Access__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::ByteT > *arg1 = (RavlN::Array2dC<RavlN::ByteT > *) 0 ;
    RavlN::IndexC arg2 ;
    RavlN::IndexC arg3 ;
    RavlN::ByteT *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Array2dByteC_Access",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::IndexC * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_RavlN__IndexC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::IndexC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        RavlN::IndexC * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_RavlN__IndexC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::IndexC");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        RavlN::ByteT &_result_ref = RavlN_Array2dC_Sl_RavlN_ByteT_Sg__Access__SWIG_2(arg1,arg2,arg3);
        result = (RavlN::ByteT *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Array2dByteC_Access(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__Index2dC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Array2dByteC_Access__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__IndexC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RavlN__IndexC, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_Array2dByteC_Access__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_Array2dByteC_Access__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Array2dByteC_Access'");
    return NULL;
}


static PyObject *_wrap_delete_Array2dByteC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::ByteT > *arg1 = (RavlN::Array2dC<RavlN::ByteT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Array2dByteC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Array2dByteC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Array2dRealC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::RealT > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Array2dRealC")) goto fail;
    result = (RavlN::Array2dC<RavlN::RealT > *)new RavlN::Array2dC<RavlN::RealT >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Array2dCTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Array2dRealC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::SizeT arg1 ;
    RavlN::SizeT arg2 ;
    RavlN::Array2dC<RavlN::RealT > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Array2dRealC",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<RavlN::SizeT >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::SizeT >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::Array2dC<RavlN::RealT > *)new RavlN::Array2dC<RavlN::RealT >(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Array2dCTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Array2dRealC__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexRange2dC *arg1 = 0 ;
    RavlN::Array2dC<RavlN::RealT > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Array2dRealC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::IndexRange2dC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::Array2dC<RavlN::RealT > *)new RavlN::Array2dC<RavlN::RealT >((RavlN::IndexRange2dC const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Array2dCTdouble_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Array2dRealC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Array2dRealC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__IndexRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Array2dRealC__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_new_Array2dRealC__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Array2dRealC'");
    return NULL;
}


static PyObject *_wrap_Array2dRealC_Frame(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::RealT > *arg1 = (RavlN::Array2dC<RavlN::RealT > *) 0 ;
    RavlN::IndexRange2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Array2dRealC_Frame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Frame();
    
    {
        RavlN::IndexRange2dC * resultptr;
        resultptr = new RavlN::IndexRange2dC(static_cast<RavlN::IndexRange2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__IndexRange2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Array2dRealC_Fill(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::RealT > *arg1 = (RavlN::Array2dC<RavlN::RealT > *) 0 ;
    RavlN::RealT *arg2 = 0 ;
    RavlN::RealT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Array2dRealC_Fill",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->Fill((double const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Array2dRealC_Stride(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::RealT > *arg1 = (RavlN::Array2dC<RavlN::RealT > *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Array2dRealC_Stride",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlN::Array2dC<RavlN::RealT > const *)arg1)->Stride();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Array2dRealC_Access__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::RealT > *arg1 = (RavlN::Array2dC<RavlN::RealT > *) 0 ;
    RavlN::Index2dC *arg2 = 0 ;
    RavlN::RealT *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Array2dRealC_Access",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__Index2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::Index2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlN::RealT &_result_ref = RavlN_Array2dC_Sl_RavlN_RealT_Sg__Access__SWIG_0(arg1,(RavlN::Index2dC const &)*arg2);
        result = (RavlN::RealT *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Array2dRealC_Access__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::RealT > *arg1 = (RavlN::Array2dC<RavlN::RealT > *) 0 ;
    RavlN::IntT arg2 ;
    RavlN::IntT arg3 ;
    RavlN::RealT *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Array2dRealC_Access",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<RavlN::IntT >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        RavlN::RealT &_result_ref = RavlN_Array2dC_Sl_RavlN_RealT_Sg__Access__SWIG_1(arg1,arg2,arg3);
        result = (RavlN::RealT *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Array2dRealC_Access__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::RealT > *arg1 = (RavlN::Array2dC<RavlN::RealT > *) 0 ;
    RavlN::IndexC arg2 ;
    RavlN::IndexC arg3 ;
    RavlN::RealT *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Array2dRealC_Access",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::IndexC * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_RavlN__IndexC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::IndexC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        RavlN::IndexC * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_RavlN__IndexC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::IndexC");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        RavlN::RealT &_result_ref = RavlN_Array2dC_Sl_RavlN_RealT_Sg__Access__SWIG_2(arg1,arg2,arg3);
        result = (RavlN::RealT *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Array2dRealC_Access(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTdouble_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__Index2dC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Array2dRealC_Access__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTdouble_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__IndexC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RavlN__IndexC, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_Array2dRealC_Access__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTdouble_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_Array2dRealC_Access__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Array2dRealC_Access'");
    return NULL;
}


static PyObject *_wrap_delete_Array2dRealC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::RealT > *arg1 = (RavlN::Array2dC<RavlN::RealT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Array2dRealC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Array2dRealC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__Array2dCTdouble_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_StringC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::StringC *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_StringC")) goto fail;
    result = (RavlN::StringC *)new RavlN::StringC();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__StringC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StringC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    RavlN::StringC *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_StringC",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (RavlN::StringC *)new RavlN::StringC((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__StringC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StringC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_StringC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_StringC__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_StringC'");
    return NULL;
}


static PyObject *_wrap_StringC_IsEmpty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::StringC *arg1 = (RavlN::StringC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StringC_IsEmpty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::StringC const *)arg1)->IsEmpty();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringC_chars(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::StringC *arg1 = (RavlN::StringC *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StringC_chars",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)((RavlN::StringC const *)arg1)->chars();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringC_Size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::StringC *arg1 = (RavlN::StringC *) 0 ;
    RavlN::SizeT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StringC_Size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::SizeT)((RavlN::StringC const *)arg1)->Size();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringC___str__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::StringC *arg1 = (RavlN::StringC *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StringC___str__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)RavlN_StringC___str__(arg1);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_StringC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::StringC *arg1 = (RavlN::StringC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_StringC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * StringC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__StringC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_PrintIOFormats__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PrintIOFormats",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ostream, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    RavlN::PrintIOFormats(*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PrintIOFormats__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":PrintIOFormats")) goto fail;
    RavlN::PrintIOFormats();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PrintIOFormats(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_PrintIOFormats__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__ostream, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_PrintIOFormats__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'PrintIOFormats'");
    return NULL;
}


static PyObject *_wrap_PrintIOConversions__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PrintIOConversions",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ostream, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    RavlN::PrintIOConversions(*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PrintIOConversions__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":PrintIOConversions")) goto fail;
    RavlN::PrintIOConversions();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PrintIOConversions(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_PrintIOConversions__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__ostream, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_PrintIOConversions__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'PrintIOConversions'");
    return NULL;
}


static PyObject *_wrap_PrintIOClassTypes__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PrintIOClassTypes",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ostream, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    RavlN::PrintIOClassTypes(*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PrintIOClassTypes__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":PrintIOClassTypes")) goto fail;
    RavlN::PrintIOClassTypes();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PrintIOClassTypes(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_PrintIOClassTypes__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__ostream, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_PrintIOClassTypes__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'PrintIOClassTypes'");
    return NULL;
}


static PyObject *_wrap_new_RealRangeC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealT arg1 ;
    RavlN::RealRangeC *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_RealRangeC",&obj0)) goto fail;
    {
        arg1 = static_cast<RavlN::RealT >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::RealRangeC *)new RavlN::RealRangeC(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRangeC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RealRangeC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RealRangeC")) goto fail;
    result = (RavlN::RealRangeC *)new RavlN::RealRangeC();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRangeC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RealRangeC__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealT arg1 ;
    RavlN::RealT arg2 ;
    RavlN::RealRangeC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_RealRangeC",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<RavlN::RealT >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::RealRangeC *)new RavlN::RealRangeC(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRangeC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RealRangeC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_RealRangeC__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            return _wrap_new_RealRangeC__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_RealRangeC__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_RealRangeC'");
    return NULL;
}


static PyObject *_wrap_RealRangeC_Size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRangeC_Size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)((RavlN::RealRangeC const *)arg1)->Size();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Range(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealRangeC *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRangeC_Range",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::RealRangeC const &_result_ref = ((RavlN::RealRangeC const *)arg1)->Range();
        result = (RavlN::RealRangeC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRangeC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Min__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRangeC_Min",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::RealT const &_result_ref = ((RavlN::RealRangeC const *)arg1)->Min();
        result = (RavlN::RealT *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_double(static_cast<double >(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Max__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRangeC_Max",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::RealT const &_result_ref = ((RavlN::RealRangeC const *)arg1)->Max();
        result = (RavlN::RealT *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_double(static_cast<double >(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Min__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRangeC_Min",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::RealT &_result_ref = (arg1)->Min();
        result = (RavlN::RealT *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Min(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRangeC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_RealRangeC_Min__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRangeC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_RealRangeC_Min__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RealRangeC_Min'");
    return NULL;
}


static PyObject *_wrap_RealRangeC_Max__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRangeC_Max",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::RealT &_result_ref = (arg1)->Max();
        result = (RavlN::RealT *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Max(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRangeC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_RealRangeC_Max__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRangeC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_RealRangeC_Max__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RealRangeC_Max'");
    return NULL;
}


static PyObject *_wrap_RealRangeC_Center(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRangeC_Center",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)((RavlN::RealRangeC const *)arg1)->Center();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_CenterD(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRangeC_CenterD",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)((RavlN::RealRangeC const *)arg1)->CenterD();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Percentage(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT arg2 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC_Percentage",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::RealT)((RavlN::RealRangeC const *)arg1)->Percentage(arg2);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_IsEmpty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRangeC_IsEmpty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::RealRangeC const *)arg1)->IsEmpty();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_IsValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRangeC_IsValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::RealRangeC const *)arg1)->IsValid();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Contains__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC_Contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::RealRangeC const *)arg1)->Contains(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Contains__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealRangeC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC_Contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::RealRangeC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::RealRangeC const *)arg1)->Contains((RavlN::RealRangeC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Contains(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRangeC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__RealRangeC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_RealRangeC_Contains__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRangeC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_RealRangeC_Contains__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RealRangeC_Contains'");
    return NULL;
}


static PyObject *_wrap_RealRangeC___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealRangeC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::RealRangeC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::RealRangeC const *)arg1)->operator ==((RavlN::RealRangeC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealRangeC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::RealRangeC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::RealRangeC const *)arg1)->operator !=((RavlN::RealRangeC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_In(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealRangeC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC_In",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::RealRangeC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::RealRangeC const *)arg1)->In((RavlN::RealRangeC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_IsOverlapping(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealRangeC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC_IsOverlapping",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::RealRangeC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::RealRangeC const *)arg1)->IsOverlapping((RavlN::RealRangeC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_SetOrigin(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT arg2 ;
    RavlN::RealRangeC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC_SetOrigin",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlN::RealRangeC const &_result_ref = (arg1)->SetOrigin(arg2);
        result = (RavlN::RealRangeC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRangeC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC___iadd__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT arg2 ;
    RavlN::RealRangeC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlN::RealRangeC const &_result_ref = (arg1)->operator +=(arg2);
        result = (RavlN::RealRangeC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRangeC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC___isub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT arg2 ;
    RavlN::RealRangeC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC___isub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlN::RealRangeC const &_result_ref = (arg1)->operator -=(arg2);
        result = (RavlN::RealRangeC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRangeC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC___add__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT arg2 ;
    RavlN::RealRangeC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC___add__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((RavlN::RealRangeC const *)arg1)->operator +(arg2);
    
    {
        RavlN::RealRangeC * resultptr;
        resultptr = new RavlN::RealRangeC(static_cast<RavlN::RealRangeC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRangeC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC___sub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT arg2 ;
    RavlN::RealRangeC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((RavlN::RealRangeC const *)arg1)->operator -(arg2);
    
    {
        RavlN::RealRangeC * resultptr;
        resultptr = new RavlN::RealRangeC(static_cast<RavlN::RealRangeC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRangeC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_ClipBy(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealRangeC *arg2 = 0 ;
    RavlN::RealRangeC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC_ClipBy",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::RealRangeC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlN::RealRangeC &_result_ref = (arg1)->ClipBy((RavlN::RealRangeC const &)*arg2);
        result = (RavlN::RealRangeC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRangeC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Clip(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT *arg2 = 0 ;
    RavlN::RealT result;
    RavlN::RealT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC_Clip",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (RavlN::RealT)(arg1)->Clip((double const &)*arg2);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_FirstHalf(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealRangeC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRangeC_FirstHalf",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((RavlN::RealRangeC const *)arg1)->FirstHalf();
    
    {
        RavlN::RealRangeC * resultptr;
        resultptr = new RavlN::RealRangeC(static_cast<RavlN::RealRangeC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRangeC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_FirstHalfD(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealRangeC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRangeC_FirstHalfD",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((RavlN::RealRangeC const *)arg1)->FirstHalfD();
    
    {
        RavlN::RealRangeC * resultptr;
        resultptr = new RavlN::RealRangeC(static_cast<RavlN::RealRangeC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRangeC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Enlarge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT arg2 ;
    RavlN::RealRangeC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC_Enlarge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((RavlN::RealRangeC const *)arg1)->Enlarge(arg2);
    
    {
        RavlN::RealRangeC * resultptr;
        resultptr = new RavlN::RealRangeC(static_cast<RavlN::RealRangeC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRangeC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Expand(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT arg2 ;
    RavlN::RealRangeC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC_Expand",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((RavlN::RealRangeC const *)arg1)->Expand(arg2);
    
    {
        RavlN::RealRangeC * resultptr;
        resultptr = new RavlN::RealRangeC(static_cast<RavlN::RealRangeC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRangeC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Shrink(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT arg2 ;
    RavlN::RealRangeC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC_Shrink",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((RavlN::RealRangeC const *)arg1)->Shrink(arg2);
    
    {
        RavlN::RealRangeC * resultptr;
        resultptr = new RavlN::RealRangeC(static_cast<RavlN::RealRangeC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRangeC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_ShrinkHigh(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT arg2 ;
    RavlN::RealRangeC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC_ShrinkHigh",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlN::RealRangeC &_result_ref = (arg1)->ShrinkHigh(arg2);
        result = (RavlN::RealRangeC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRangeC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealRangeC *arg2 = 0 ;
    RavlN::RealRangeC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC_Swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::RealRangeC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlN::RealRangeC &_result_ref = (arg1)->Swap(*arg2);
        result = (RavlN::RealRangeC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRangeC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Involve__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealT arg2 ;
    RavlN::RealRangeC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC_Involve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlN::RealRangeC const &_result_ref = (arg1)->Involve(arg2);
        result = (RavlN::RealRangeC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRangeC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Involve__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    RavlN::RealRangeC *arg2 = 0 ;
    RavlN::RealRangeC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRangeC_Involve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::RealRangeC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlN::RealRangeC const &_result_ref = (arg1)->Involve((RavlN::RealRangeC const &)*arg2);
        result = (RavlN::RealRangeC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRangeC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRangeC_Involve(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRangeC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__RealRangeC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_RealRangeC_Involve__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRangeC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_RealRangeC_Involve__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RealRangeC_Involve'");
    return NULL;
}


static PyObject *_wrap_delete_RealRangeC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = (RavlN::RealRangeC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RealRangeC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RealRangeC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__RealRangeC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RealRange2dC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RealRange2dC")) goto fail;
    result = (RavlN::RealRange2dC *)new RavlN::RealRange2dC();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRange2dC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RealRange2dC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealT arg1 ;
    RavlN::RealT arg2 ;
    RavlN::RealRange2dC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_RealRange2dC",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<RavlN::RealT >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::RealRange2dC *)new RavlN::RealRange2dC(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRange2dC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RealRange2dC__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRangeC *arg1 = 0 ;
    RavlN::RealRangeC *arg2 = 0 ;
    RavlN::RealRange2dC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_RealRange2dC",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::RealRangeC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__RealRangeC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::RealRangeC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::RealRange2dC *)new RavlN::RealRange2dC((RavlN::RealRangeC const &)*arg1,(RavlN::RealRangeC const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRange2dC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RealRange2dC__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = 0 ;
    RavlN::RealRange2dC *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_RealRange2dC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::RealRange2dC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::RealRange2dC *)new RavlN::RealRange2dC((RavlN::RealRange2dC const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRange2dC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RealRange2dC__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealT arg1 ;
    RavlN::RealT arg2 ;
    RavlN::RealT arg3 ;
    RavlN::RealT arg4 ;
    RavlN::RealRange2dC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_RealRange2dC",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = static_cast<RavlN::RealT >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<RavlN::RealT >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<RavlN::RealT >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (RavlN::RealRange2dC *)new RavlN::RealRange2dC(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRange2dC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RealRange2dC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_RealRange2dC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_RealRange2dC__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRangeC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__RealRangeC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_RealRange2dC__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_RealRange2dC__SWIG_1(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_new_RealRange2dC__SWIG_4(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_RealRange2dC'");
    return NULL;
}


static PyObject *_wrap_RealRange2dC_TRow__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_TRow",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)((RavlN::RealRange2dC const *)arg1)->TRow();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_LCol__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_LCol",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)((RavlN::RealRange2dC const *)arg1)->LCol();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_BRow__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_BRow",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)((RavlN::RealRange2dC const *)arg1)->BRow();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_RCol__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_RCol",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)((RavlN::RealRange2dC const *)arg1)->RCol();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_TRow__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_TRow",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)(arg1)->TRow();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_TRow(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_RealRange2dC_TRow__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_RealRange2dC_TRow__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RealRange2dC_TRow'");
    return NULL;
}


static PyObject *_wrap_RealRange2dC_LCol__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_LCol",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)(arg1)->LCol();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_LCol(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_RealRange2dC_LCol__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_RealRange2dC_LCol__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RealRange2dC_LCol'");
    return NULL;
}


static PyObject *_wrap_RealRange2dC_BRow__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_BRow",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)(arg1)->BRow();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_BRow(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_RealRange2dC_BRow__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_RealRange2dC_BRow__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RealRange2dC_BRow'");
    return NULL;
}


static PyObject *_wrap_RealRange2dC_RCol__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_RCol",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)(arg1)->RCol();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_RCol(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_RealRange2dC_RCol__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__RealRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_RealRange2dC_RCol__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RealRange2dC_RCol'");
    return NULL;
}


static PyObject *_wrap_RealRange2dC_Rows(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_Rows",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)((RavlN::RealRange2dC const *)arg1)->Rows();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_Cols(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_Cols",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)((RavlN::RealRange2dC const *)arg1)->Cols();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_Area(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_Area",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)((RavlN::RealRange2dC const *)arg1)->Area();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_Dilate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealRange2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_Dilate",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((RavlN::RealRange2dC const *)arg1)->Dilate();
    
    {
        RavlN::RealRange2dC * resultptr;
        resultptr = new RavlN::RealRange2dC(static_cast<RavlN::RealRange2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRange2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_Erode(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealRange2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_Erode",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((RavlN::RealRange2dC const *)arg1)->Erode();
    
    {
        RavlN::RealRange2dC * resultptr;
        resultptr = new RavlN::RealRange2dC(static_cast<RavlN::RealRange2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRange2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_Expand(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealT arg2 ;
    RavlN::RealRange2dC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRange2dC_Expand",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->Expand(arg2);
    
    {
        RavlN::RealRange2dC * resultptr;
        resultptr = new RavlN::RealRange2dC(static_cast<RavlN::RealRange2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRange2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_Shrink(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealT arg2 ;
    RavlN::RealRange2dC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRange2dC_Shrink",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((RavlN::RealRange2dC const *)arg1)->Shrink(arg2);
    
    {
        RavlN::RealRange2dC * resultptr;
        resultptr = new RavlN::RealRange2dC(static_cast<RavlN::RealRange2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRange2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_ClipBy(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealRange2dC *arg2 = 0 ;
    RavlN::RealRange2dC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRange2dC_ClipBy",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::RealRange2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlN::RealRange2dC &_result_ref = (arg1)->ClipBy((RavlN::RealRange2dC const &)*arg2);
        result = (RavlN::RealRange2dC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__RealRange2dC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_Contains(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealRange2dC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRange2dC_Contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::RealRange2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::RealRange2dC const *)arg1)->Contains((RavlN::RealRange2dC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_RowRange(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealRangeC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_RowRange",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->RowRange();
    
    {
        RavlN::RealRangeC * resultptr;
        resultptr = new RavlN::RealRangeC(static_cast<RavlN::RealRangeC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRangeC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_ColRange(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealRangeC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_ColRange",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->ColRange();
    
    {
        RavlN::RealRangeC * resultptr;
        resultptr = new RavlN::RealRangeC(static_cast<RavlN::RealRangeC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRangeC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_Range1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealRangeC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_Range1",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Range1();
    
    {
        RavlN::RealRangeC * resultptr;
        resultptr = new RavlN::RealRangeC(static_cast<RavlN::RealRangeC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRangeC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_Range2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealRangeC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_Range2",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Range2();
    
    {
        RavlN::RealRangeC * resultptr;
        resultptr = new RavlN::RealRangeC(static_cast<RavlN::RealRangeC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRangeC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_Involve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealRange2dC *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRange2dC_Involve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::RealRange2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->Involve((RavlN::RealRange2dC const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_IsValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRange2dC_IsValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::RealRange2dC const *)arg1)->IsValid();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealRange2dC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRange2dC___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::RealRange2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::RealRange2dC const *)arg1)->operator ==((RavlN::RealRange2dC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealRange2dC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRange2dC___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::RealRange2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::RealRange2dC const *)arg1)->operator !=((RavlN::RealRange2dC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRange2dC_IsOverlapping(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    RavlN::RealRange2dC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRange2dC_IsOverlapping",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::RealRange2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::RealRange2dC const *)arg1)->IsOverlapping((RavlN::RealRange2dC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RealRange2dC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealRange2dC *arg1 = (RavlN::RealRange2dC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RealRange2dC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__RealRange2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RealRange2dC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__RealRange2dC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_PointSet2dC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::PointSet2dC *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_PointSet2dC")) goto fail;
    result = (RavlN::PointSet2dC *)new RavlN::PointSet2dC();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__PointSet2dC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PointSet2dC_Centroid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::PointSet2dC *arg1 = (RavlN::PointSet2dC *) 0 ;
    RavlN::Point2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PointSet2dC_Centroid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__PointSet2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((RavlN::PointSet2dC const *)arg1)->Centroid();
    
    {
        RavlN::Point2dC * resultptr;
        resultptr = new RavlN::Point2dC(static_cast<RavlN::Point2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__Point2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PointSet2dC_BoundingRectangle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::PointSet2dC *arg1 = (RavlN::PointSet2dC *) 0 ;
    RavlN::RealRange2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PointSet2dC_BoundingRectangle",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__PointSet2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((RavlN::PointSet2dC const *)arg1)->BoundingRectangle();
    
    {
        RavlN::RealRange2dC * resultptr;
        resultptr = new RavlN::RealRange2dC(static_cast<RavlN::RealRange2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__RealRange2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_PointSet2dC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::PointSet2dC *arg1 = (RavlN::PointSet2dC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_PointSet2dC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__PointSet2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PointSet2dC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__PointSet2dC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Polygon2dC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Polygon2dC *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Polygon2dC")) goto fail;
    result = (RavlN::Polygon2dC *)new RavlN::Polygon2dC();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Polygon2dC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Polygon2dC_InsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Polygon2dC *arg1 = (RavlN::Polygon2dC *) 0 ;
    RavlN::Point2dC *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Polygon2dC_InsLast",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Polygon2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__Point2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::Point2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->InsLast(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Polygon2dC_Size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Polygon2dC *arg1 = (RavlN::Polygon2dC *) 0 ;
    RavlN::SizeT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Polygon2dC_Size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Polygon2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::SizeT)((RavlN::Polygon2dC const *)arg1)->Size();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Polygon2dC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Polygon2dC *arg1 = (RavlN::Polygon2dC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Polygon2dC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Polygon2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Polygon2dC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__Polygon2dC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ByteRGBArray2dC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::ByteRGBValueC > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ByteRGBArray2dC")) goto fail;
    result = (RavlN::Array2dC<RavlImageN::ByteRGBValueC > *)new RavlN::Array2dC<RavlImageN::ByteRGBValueC >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ByteRGBArray2dC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::SizeT arg1 ;
    RavlN::SizeT arg2 ;
    RavlN::Array2dC<RavlImageN::ByteRGBValueC > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ByteRGBArray2dC",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<RavlN::SizeT >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::SizeT >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::Array2dC<RavlImageN::ByteRGBValueC > *)new RavlN::Array2dC<RavlImageN::ByteRGBValueC >(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ByteRGBArray2dC__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexRange2dC *arg1 = 0 ;
    RavlN::Array2dC<RavlImageN::ByteRGBValueC > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ByteRGBArray2dC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::IndexRange2dC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::Array2dC<RavlImageN::ByteRGBValueC > *)new RavlN::Array2dC<RavlImageN::ByteRGBValueC >((RavlN::IndexRange2dC const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ByteRGBArray2dC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ByteRGBArray2dC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__IndexRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_ByteRGBArray2dC__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_new_ByteRGBArray2dC__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ByteRGBArray2dC'");
    return NULL;
}


static PyObject *_wrap_ByteRGBArray2dC_Frame(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::ByteRGBValueC > *arg1 = (RavlN::Array2dC<RavlImageN::ByteRGBValueC > *) 0 ;
    RavlN::IndexRange2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteRGBArray2dC_Frame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Frame();
    
    {
        RavlN::IndexRange2dC * resultptr;
        resultptr = new RavlN::IndexRange2dC(static_cast<RavlN::IndexRange2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__IndexRange2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteRGBArray2dC_Fill(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::ByteRGBValueC > *arg1 = (RavlN::Array2dC<RavlImageN::ByteRGBValueC > *) 0 ;
    RavlImageN::ByteRGBValueC *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteRGBArray2dC_Fill",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlImageN__ByteRGBValueC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlImageN::ByteRGBValueC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->Fill((RavlImageN::ByteRGBValueC const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteRGBArray2dC_Stride(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::ByteRGBValueC > *arg1 = (RavlN::Array2dC<RavlImageN::ByteRGBValueC > *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteRGBArray2dC_Stride",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlN::Array2dC<RavlImageN::ByteRGBValueC > const *)arg1)->Stride();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteRGBArray2dC_Access__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::ByteRGBValueC > *arg1 = (RavlN::Array2dC<RavlImageN::ByteRGBValueC > *) 0 ;
    RavlN::Index2dC *arg2 = 0 ;
    RavlImageN::ByteRGBValueC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ByteRGBArray2dC_Access",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__Index2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::Index2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlImageN::ByteRGBValueC &_result_ref = RavlN_Array2dC_Sl_RavlImageN_ByteRGBValueC_Sg__Access__SWIG_0(arg1,(RavlN::Index2dC const &)*arg2);
        result = (RavlImageN::ByteRGBValueC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ByteRGBValueC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteRGBArray2dC_Access__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::ByteRGBValueC > *arg1 = (RavlN::Array2dC<RavlImageN::ByteRGBValueC > *) 0 ;
    RavlN::IntT arg2 ;
    RavlN::IntT arg3 ;
    RavlImageN::ByteRGBValueC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ByteRGBArray2dC_Access",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<RavlN::IntT >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        RavlImageN::ByteRGBValueC &_result_ref = RavlN_Array2dC_Sl_RavlImageN_ByteRGBValueC_Sg__Access__SWIG_1(arg1,arg2,arg3);
        result = (RavlImageN::ByteRGBValueC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ByteRGBValueC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteRGBArray2dC_Access__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::ByteRGBValueC > *arg1 = (RavlN::Array2dC<RavlImageN::ByteRGBValueC > *) 0 ;
    RavlN::IndexC arg2 ;
    RavlN::IndexC arg3 ;
    RavlImageN::ByteRGBValueC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ByteRGBArray2dC_Access",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::IndexC * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_RavlN__IndexC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::IndexC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        RavlN::IndexC * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_RavlN__IndexC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::IndexC");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        RavlImageN::ByteRGBValueC &_result_ref = RavlN_Array2dC_Sl_RavlImageN_ByteRGBValueC_Sg__Access__SWIG_2(arg1,arg2,arg3);
        result = (RavlImageN::ByteRGBValueC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ByteRGBValueC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteRGBArray2dC_Access(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__Index2dC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_ByteRGBArray2dC_Access__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__IndexC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RavlN__IndexC, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_ByteRGBArray2dC_Access__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_ByteRGBArray2dC_Access__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ByteRGBArray2dC_Access'");
    return NULL;
}


static PyObject *_wrap_delete_ByteRGBArray2dC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::ByteRGBValueC > *arg1 = (RavlN::Array2dC<RavlImageN::ByteRGBValueC > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ByteRGBArray2dC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ByteRGBArray2dC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RealRGBArray2dC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::RealRGBValueC > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RealRGBArray2dC")) goto fail;
    result = (RavlN::Array2dC<RavlImageN::RealRGBValueC > *)new RavlN::Array2dC<RavlImageN::RealRGBValueC >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RealRGBArray2dC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::SizeT arg1 ;
    RavlN::SizeT arg2 ;
    RavlN::Array2dC<RavlImageN::RealRGBValueC > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_RealRGBArray2dC",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<RavlN::SizeT >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::SizeT >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::Array2dC<RavlImageN::RealRGBValueC > *)new RavlN::Array2dC<RavlImageN::RealRGBValueC >(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RealRGBArray2dC__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexRange2dC *arg1 = 0 ;
    RavlN::Array2dC<RavlImageN::RealRGBValueC > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_RealRGBArray2dC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::IndexRange2dC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::Array2dC<RavlImageN::RealRGBValueC > *)new RavlN::Array2dC<RavlImageN::RealRGBValueC >((RavlN::IndexRange2dC const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RealRGBArray2dC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_RealRGBArray2dC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__IndexRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_RealRGBArray2dC__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_new_RealRGBArray2dC__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_RealRGBArray2dC'");
    return NULL;
}


static PyObject *_wrap_RealRGBArray2dC_Frame(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::RealRGBValueC > *arg1 = (RavlN::Array2dC<RavlImageN::RealRGBValueC > *) 0 ;
    RavlN::IndexRange2dC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRGBArray2dC_Frame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->Frame();
    
    {
        RavlN::IndexRange2dC * resultptr;
        resultptr = new RavlN::IndexRange2dC(static_cast<RavlN::IndexRange2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__IndexRange2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRGBArray2dC_Fill(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::RealRGBValueC > *arg1 = (RavlN::Array2dC<RavlImageN::RealRGBValueC > *) 0 ;
    RavlImageN::RealRGBValueC *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRGBArray2dC_Fill",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlImageN__RealRGBValueC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlImageN::RealRGBValueC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->Fill((RavlImageN::RealRGBValueC const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRGBArray2dC_Stride(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::RealRGBValueC > *arg1 = (RavlN::Array2dC<RavlImageN::RealRGBValueC > *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRGBArray2dC_Stride",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlN::Array2dC<RavlImageN::RealRGBValueC > const *)arg1)->Stride();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRGBArray2dC_Access__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::RealRGBValueC > *arg1 = (RavlN::Array2dC<RavlImageN::RealRGBValueC > *) 0 ;
    RavlN::Index2dC *arg2 = 0 ;
    RavlImageN::RealRGBValueC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RealRGBArray2dC_Access",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__Index2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::Index2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlImageN::RealRGBValueC &_result_ref = RavlN_Array2dC_Sl_RavlImageN_RealRGBValueC_Sg__Access__SWIG_0(arg1,(RavlN::Index2dC const &)*arg2);
        result = (RavlImageN::RealRGBValueC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__RealRGBValueC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRGBArray2dC_Access__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::RealRGBValueC > *arg1 = (RavlN::Array2dC<RavlImageN::RealRGBValueC > *) 0 ;
    RavlN::IntT arg2 ;
    RavlN::IntT arg3 ;
    RavlImageN::RealRGBValueC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RealRGBArray2dC_Access",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<RavlN::IntT >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        RavlImageN::RealRGBValueC &_result_ref = RavlN_Array2dC_Sl_RavlImageN_RealRGBValueC_Sg__Access__SWIG_1(arg1,arg2,arg3);
        result = (RavlImageN::RealRGBValueC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__RealRGBValueC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRGBArray2dC_Access__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::RealRGBValueC > *arg1 = (RavlN::Array2dC<RavlImageN::RealRGBValueC > *) 0 ;
    RavlN::IndexC arg2 ;
    RavlN::IndexC arg3 ;
    RavlImageN::RealRGBValueC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RealRGBArray2dC_Access",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::IndexC * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_RavlN__IndexC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::IndexC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        RavlN::IndexC * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_RavlN__IndexC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::IndexC");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        RavlImageN::RealRGBValueC &_result_ref = RavlN_Array2dC_Sl_RavlImageN_RealRGBValueC_Sg__Access__SWIG_2(arg1,arg2,arg3);
        result = (RavlImageN::RealRGBValueC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__RealRGBValueC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRGBArray2dC_Access(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__Index2dC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_RealRGBArray2dC_Access__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__IndexC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RavlN__IndexC, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_RealRGBArray2dC_Access__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_RealRGBArray2dC_Access__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RealRGBArray2dC_Access'");
    return NULL;
}


static PyObject *_wrap_delete_RealRGBArray2dC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::RealRGBValueC > *arg1 = (RavlN::Array2dC<RavlImageN::RealRGBValueC > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RealRGBArray2dC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RealRGBArray2dC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RealRGBValueC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealT arg1 ;
    RavlN::RealT arg2 ;
    RavlN::RealT arg3 ;
    RavlImageN::RealRGBValueC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_RealRGBValueC",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = static_cast<RavlN::RealT >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::RealT >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<RavlN::RealT >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (RavlImageN::RealRGBValueC *)new RavlImageN::RealRGBValueC(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__RealRGBValueC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRGBValueC_Red(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::RealRGBValueC *arg1 = (RavlImageN::RealRGBValueC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRGBValueC_Red",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__RealRGBValueC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)((RavlImageN::RealRGBValueC const *)arg1)->Red();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRGBValueC_Green(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::RealRGBValueC *arg1 = (RavlImageN::RealRGBValueC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRGBValueC_Green",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__RealRGBValueC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)((RavlImageN::RealRGBValueC const *)arg1)->Green();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RealRGBValueC_Blue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::RealRGBValueC *arg1 = (RavlImageN::RealRGBValueC *) 0 ;
    RavlN::RealT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RealRGBValueC_Blue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__RealRGBValueC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::RealT)((RavlImageN::RealRGBValueC const *)arg1)->Blue();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RealRGBValueC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::RealRGBValueC *arg1 = (RavlImageN::RealRGBValueC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RealRGBValueC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__RealRGBValueC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RealRGBValueC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlImageN__RealRGBValueC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ByteRGBValueC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IntT arg1 ;
    RavlN::IntT arg2 ;
    RavlN::IntT arg3 ;
    RavlImageN::ByteRGBValueC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_ByteRGBValueC",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = static_cast<RavlN::IntT >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<RavlN::IntT >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (RavlImageN::ByteRGBValueC *)new RavlImageN::ByteRGBValueC(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ByteRGBValueC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteRGBValueC_Red(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ByteRGBValueC *arg1 = (RavlImageN::ByteRGBValueC *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteRGBValueC_Red",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ByteRGBValueC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlImageN::ByteRGBValueC const *)arg1)->Red();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteRGBValueC_Green(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ByteRGBValueC *arg1 = (RavlImageN::ByteRGBValueC *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteRGBValueC_Green",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ByteRGBValueC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlImageN::ByteRGBValueC const *)arg1)->Green();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteRGBValueC_Blue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ByteRGBValueC *arg1 = (RavlImageN::ByteRGBValueC *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteRGBValueC_Blue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ByteRGBValueC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlImageN::ByteRGBValueC const *)arg1)->Blue();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ByteRGBValueC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ByteRGBValueC *arg1 = (RavlImageN::ByteRGBValueC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ByteRGBValueC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ByteRGBValueC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ByteRGBValueC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlImageN__ByteRGBValueC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ImageByteRGBValueC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ImageByteRGBValueC")) goto fail;
    result = (RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *)new RavlImageN::ImageC<RavlImageN::ByteRGBValueC >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ImageByteRGBValueC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::SizeT arg1 ;
    RavlN::SizeT arg2 ;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ImageByteRGBValueC",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<RavlN::SizeT >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::SizeT >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *)new RavlImageN::ImageC<RavlImageN::ByteRGBValueC >(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ImageByteRGBValueC__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexRange2dC *arg1 = 0 ;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ImageByteRGBValueC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::IndexRange2dC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *)new RavlImageN::ImageC<RavlImageN::ByteRGBValueC >((RavlN::IndexRange2dC const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ImageByteRGBValueC__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *arg1 = 0 ;
    RavlN::IndexRange2dC *arg2 = 0 ;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ImageByteRGBValueC",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlImageN::ImageC<RavlImageN::ByteRGBValueC >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::IndexRange2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *)new RavlImageN::ImageC<RavlImageN::ByteRGBValueC >((RavlImageN::ImageC<RavlImageN::ByteRGBValueC > const &)*arg1,(RavlN::IndexRange2dC const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ImageByteRGBValueC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ImageByteRGBValueC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__IndexRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_ImageByteRGBValueC__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__IndexRange2dC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_ImageByteRGBValueC__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_new_ImageByteRGBValueC__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ImageByteRGBValueC'");
    return NULL;
}


static PyObject *_wrap_ImageByteRGBValueC_Rows(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *arg1 = (RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *) 0 ;
    RavlN::SizeT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ImageByteRGBValueC_Rows",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::SizeT)((RavlImageN::ImageC<RavlImageN::ByteRGBValueC > const *)arg1)->Rows();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageByteRGBValueC_Cols(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *arg1 = (RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *) 0 ;
    RavlN::SizeT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ImageByteRGBValueC_Cols",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::SizeT)((RavlImageN::ImageC<RavlImageN::ByteRGBValueC > const *)arg1)->Cols();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ImageByteRGBValueC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *arg1 = (RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ImageByteRGBValueC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ImageByteRGBValueC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ByteRGBImageC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ByteRGBImageC")) goto fail;
    result = (RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *)new RavlImageN::ImageC<RavlImageN::ByteRGBValueC >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ByteRGBImageC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::SizeT arg1 ;
    RavlN::SizeT arg2 ;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ByteRGBImageC",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<RavlN::SizeT >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::SizeT >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *)new RavlImageN::ImageC<RavlImageN::ByteRGBValueC >(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ByteRGBImageC__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexRange2dC *arg1 = 0 ;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ByteRGBImageC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::IndexRange2dC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *)new RavlImageN::ImageC<RavlImageN::ByteRGBValueC >((RavlN::IndexRange2dC const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ByteRGBImageC__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *arg1 = 0 ;
    RavlN::IndexRange2dC *arg2 = 0 ;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ByteRGBImageC",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlImageN::ImageC<RavlImageN::ByteRGBValueC >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::IndexRange2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *)new RavlImageN::ImageC<RavlImageN::ByteRGBValueC >((RavlImageN::ImageC<RavlImageN::ByteRGBValueC > const &)*arg1,(RavlN::IndexRange2dC const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ByteRGBImageC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ByteRGBImageC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__IndexRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_ByteRGBImageC__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__IndexRange2dC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_ByteRGBImageC__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_new_ByteRGBImageC__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ByteRGBImageC'");
    return NULL;
}


static PyObject *_wrap_ByteRGBImageC_Rows(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *arg1 = (RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *) 0 ;
    RavlN::SizeT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteRGBImageC_Rows",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::SizeT)((RavlImageN::ImageC<RavlImageN::ByteRGBValueC > const *)arg1)->Rows();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ByteRGBImageC_Cols(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *arg1 = (RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *) 0 ;
    RavlN::SizeT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ByteRGBImageC_Cols",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::SizeT)((RavlImageN::ImageC<RavlImageN::ByteRGBValueC > const *)arg1)->Cols();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ByteRGBImageC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *arg1 = (RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ByteRGBImageC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ByteRGBImageC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ImageByteC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ImageC<RavlN::ByteT > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ImageByteC")) goto fail;
    result = (RavlImageN::ImageC<RavlN::ByteT > *)new RavlImageN::ImageC<RavlN::ByteT >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ImageByteC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::SizeT arg1 ;
    RavlN::SizeT arg2 ;
    RavlImageN::ImageC<RavlN::ByteT > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ImageByteC",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<RavlN::SizeT >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::SizeT >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlImageN::ImageC<RavlN::ByteT > *)new RavlImageN::ImageC<RavlN::ByteT >(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ImageByteC__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IndexRange2dC *arg1 = 0 ;
    RavlImageN::ImageC<RavlN::ByteT > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ImageByteC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::IndexRange2dC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlImageN::ImageC<RavlN::ByteT > *)new RavlImageN::ImageC<RavlN::ByteT >((RavlN::IndexRange2dC const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ImageByteC__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ImageC<RavlN::ByteT > *arg1 = 0 ;
    RavlN::IndexRange2dC *arg2 = 0 ;
    RavlImageN::ImageC<RavlN::ByteT > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ImageByteC",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlImageN::ImageC<RavlN::ByteT >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__IndexRange2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::IndexRange2dC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlImageN::ImageC<RavlN::ByteT > *)new RavlImageN::ImageC<RavlN::ByteT >((RavlImageN::ImageC<unsigned char > const &)*arg1,(RavlN::IndexRange2dC const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ImageByteC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ImageByteC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__IndexRange2dC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_ImageByteC__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__IndexRange2dC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_ImageByteC__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_new_ImageByteC__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ImageByteC'");
    return NULL;
}


static PyObject *_wrap_ImageByteC_Rows(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ImageC<RavlN::ByteT > *arg1 = (RavlImageN::ImageC<RavlN::ByteT > *) 0 ;
    RavlN::SizeT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ImageByteC_Rows",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::SizeT)((RavlImageN::ImageC<RavlN::ByteT > const *)arg1)->Rows();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ImageByteC_Cols(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ImageC<RavlN::ByteT > *arg1 = (RavlImageN::ImageC<RavlN::ByteT > *) 0 ;
    RavlN::SizeT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ImageByteC_Cols",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::SizeT)((RavlImageN::ImageC<RavlN::ByteT > const *)arg1)->Cols();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ImageByteC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::ImageC<RavlN::ByteT > *arg1 = (RavlImageN::ImageC<RavlN::ByteT > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ImageByteC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ImageByteC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Save__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::StringC arg1 ;
    RavlImageN::ImageC<RavlN::ByteT > *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Save",&obj0,&obj1)) goto fail;
    {
        RavlN::StringC * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::StringC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlImageN::ImageC<RavlN::ByteT >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)RavlImageN::Save(arg1,(RavlImageN::ImageC<unsigned char > const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Load__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::StringC arg1 ;
    RavlImageN::ImageC<RavlN::ByteT > *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Load",&obj0,&obj1)) goto fail;
    {
        RavlN::StringC * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::StringC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlImageN::ImageC<RavlN::ByteT >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)RavlImageN::Load(arg1,*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Save__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::StringC arg1 ;
    RavlImageN::ImageC<RavlN::RealT > *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Save",&obj0,&obj1)) goto fail;
    {
        RavlN::StringC * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::StringC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlImageN__ImageCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlImageN::ImageC<RavlN::RealT >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)RavlImageN::Save(arg1,(RavlImageN::ImageC<double > const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Load__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::StringC arg1 ;
    RavlImageN::ImageC<RavlN::RealT > *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Load",&obj0,&obj1)) goto fail;
    {
        RavlN::StringC * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::StringC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlImageN__ImageCTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlImageN::ImageC<RavlN::RealT >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)RavlImageN::Load(arg1,*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Save__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::StringC arg1 ;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Save",&obj0,&obj1)) goto fail;
    {
        RavlN::StringC * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::StringC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlImageN::ImageC<RavlImageN::ByteRGBValueC >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)RavlImageN::Save(arg1,(RavlImageN::ImageC<RavlImageN::ByteRGBValueC > const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Load__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::StringC arg1 ;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Load",&obj0,&obj1)) goto fail;
    {
        RavlN::StringC * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::StringC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlImageN::ImageC<RavlImageN::ByteRGBValueC >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)RavlImageN::Load(arg1,*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Save__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Save",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlImageN::ImageC<RavlImageN::ByteRGBValueC >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)RavlImageN::Save((char const *)arg1,(RavlImageN::ImageC<RavlImageN::ByteRGBValueC > const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Save(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__StringC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Save__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__StringC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlImageN__ImageCTdouble_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Save__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__StringC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Save__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Save__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Save'");
    return NULL;
}


static PyObject *_wrap_Load__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Load",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlImageN::ImageC<RavlImageN::ByteRGBValueC >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)RavlImageN::Load((char const *)arg1,*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Load(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__StringC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Load__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__StringC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlImageN__ImageCTdouble_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Load__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__StringC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Load__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Load__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Load'");
    return NULL;
}


static PyObject *_wrap_DrawPolygon__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::ByteRGBValueC > *arg1 = 0 ;
    RavlImageN::ByteRGBValueC *arg2 = 0 ;
    RavlN::Polygon2dC *arg3 = 0 ;
    bool arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DrawPolygon",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::Array2dC<RavlImageN::ByteRGBValueC >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlImageN__ByteRGBValueC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlImageN::ByteRGBValueC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RavlN__Polygon2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("RavlN::Polygon2dC");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<bool >(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    RavlImageN::DrawPolygon(*arg1,(RavlImageN::ByteRGBValueC const &)*arg2,(RavlN::Polygon2dC const &)*arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DrawPolygon__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlImageN::ByteRGBValueC > *arg1 = 0 ;
    RavlImageN::ByteRGBValueC *arg2 = 0 ;
    RavlN::Polygon2dC *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DrawPolygon",&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::Array2dC<RavlImageN::ByteRGBValueC >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlImageN__ByteRGBValueC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlImageN::ByteRGBValueC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RavlN__Polygon2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("RavlN::Polygon2dC");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    RavlImageN::DrawPolygon(*arg1,(RavlImageN::ByteRGBValueC const &)*arg2,(RavlN::Polygon2dC const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DrawPolygon__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::ByteT > *arg1 = 0 ;
    RavlN::ByteT *arg2 = 0 ;
    RavlN::Polygon2dC *arg3 = 0 ;
    bool arg4 ;
    RavlN::ByteT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DrawPolygon",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::Array2dC<RavlN::ByteT >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        temp2 = static_cast<RavlN::ByteT >(SWIG_As_unsigned_SS_char(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RavlN__Polygon2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("RavlN::Polygon2dC");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<bool >(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    RavlImageN::DrawPolygon(*arg1,(unsigned char const &)*arg2,(RavlN::Polygon2dC const &)*arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DrawPolygon__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Array2dC<RavlN::ByteT > *arg1 = 0 ;
    RavlN::ByteT *arg2 = 0 ;
    RavlN::Polygon2dC *arg3 = 0 ;
    RavlN::ByteT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DrawPolygon",&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::Array2dC<RavlN::ByteT >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        temp2 = static_cast<RavlN::ByteT >(SWIG_As_unsigned_SS_char(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RavlN__Polygon2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("RavlN::Polygon2dC");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    RavlImageN::DrawPolygon(*arg1,(unsigned char const &)*arg2,(RavlN::Polygon2dC const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DrawPolygon(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlImageN__ByteRGBValueC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RavlN__Polygon2dC, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_DrawPolygon__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_char(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RavlN__Polygon2dC, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_DrawPolygon__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_char(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RavlN__Polygon2dC, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        return _wrap_DrawPolygon__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlImageN__ByteRGBValueC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RavlN__Polygon2dC, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        return _wrap_DrawPolygon__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DrawPolygon'");
    return NULL;
}


static PyObject *_wrap_new_FontC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::FontC *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_FontC")) goto fail;
    result = (RavlImageN::FontC *)new RavlImageN::FontC();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlImageN__FontC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontC_IsValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::FontC *arg1 = (RavlImageN::FontC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FontC_IsValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__FontC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlImageN::FontC const *)arg1)->IsValid();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontC_Center(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::FontC *arg1 = (RavlImageN::FontC *) 0 ;
    RavlN::StringC arg2 ;
    RavlN::Index2dC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FontC_Center",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__FontC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::StringC * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::StringC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = ((RavlImageN::FontC const *)arg1)->Center(arg2);
    
    {
        RavlN::Index2dC * resultptr;
        resultptr = new RavlN::Index2dC(static_cast<RavlN::Index2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__Index2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontC_Size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::FontC *arg1 = (RavlImageN::FontC *) 0 ;
    RavlN::StringC arg2 ;
    RavlN::Index2dC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FontC_Size",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__FontC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::StringC * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RavlN::StringC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = ((RavlImageN::FontC const *)arg1)->Size(arg2);
    
    {
        RavlN::Index2dC * resultptr;
        resultptr = new RavlN::Index2dC(static_cast<RavlN::Index2dC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__Index2dC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FontC_Count(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::FontC *arg1 = (RavlImageN::FontC *) 0 ;
    RavlN::UIntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FontC_Count",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__FontC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::UIntT)((RavlImageN::FontC const *)arg1)->Count();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FontC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::FontC *arg1 = (RavlImageN::FontC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FontC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__FontC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FontC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlImageN__FontC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_DefaultFont(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::FontC result;
    
    if(!PyArg_ParseTuple(args,(char *)":DefaultFont")) goto fail;
    result = RavlImageN::DefaultFont();
    
    {
        RavlImageN::FontC * resultptr;
        resultptr = new RavlImageN::FontC(static_cast<RavlImageN::FontC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlImageN__FontC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DrawText__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::FontC *arg1 = 0 ;
    RavlImageN::ByteRGBValueC *arg2 = 0 ;
    RavlN::Index2dC *arg3 = 0 ;
    RavlN::StringC *arg4 = 0 ;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *arg5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:DrawText",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__FontC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlImageN::FontC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlImageN__ByteRGBValueC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlImageN::ByteRGBValueC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RavlN__Index2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("RavlN::Index2dC");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("RavlN::StringC");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("RavlImageN::ImageC<RavlImageN::ByteRGBValueC >");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    RavlImageN::DrawText((RavlImageN::FontC const &)*arg1,(RavlImageN::ByteRGBValueC const &)*arg2,(RavlN::Index2dC const &)*arg3,(RavlN::StringC const &)*arg4,*arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DrawText__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::FontC *arg1 = 0 ;
    RavlN::ByteT *arg2 = 0 ;
    RavlN::Index2dC *arg3 = 0 ;
    RavlN::StringC *arg4 = 0 ;
    RavlImageN::ImageC<RavlN::ByteT > *arg5 = 0 ;
    RavlN::ByteT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:DrawText",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__FontC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlImageN::FontC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        temp2 = static_cast<RavlN::ByteT >(SWIG_As_unsigned_SS_char(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RavlN__Index2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("RavlN::Index2dC");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("RavlN::StringC");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("RavlImageN::ImageC<RavlN::ByteT >");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    RavlImageN::DrawText((RavlImageN::FontC const &)*arg1,(unsigned char const &)*arg2,(RavlN::Index2dC const &)*arg3,(RavlN::StringC const &)*arg4,*arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DrawText(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlImageN__FontC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlImageN__ByteRGBValueC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RavlN__Index2dC, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_RavlN__StringC, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            return _wrap_DrawText__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlImageN__FontC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_char(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RavlN__Index2dC, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_RavlN__StringC, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            return _wrap_DrawText__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DrawText'");
    return NULL;
}


static PyObject *_wrap_DrawTextCenter__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::FontC *arg1 = 0 ;
    RavlImageN::ByteRGBValueC *arg2 = 0 ;
    RavlN::Index2dC *arg3 = 0 ;
    RavlN::StringC *arg4 = 0 ;
    RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *arg5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:DrawTextCenter",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__FontC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlImageN::FontC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlImageN__ByteRGBValueC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlImageN::ByteRGBValueC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RavlN__Index2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("RavlN::Index2dC");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("RavlN::StringC");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("RavlImageN::ImageC<RavlImageN::ByteRGBValueC >");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    RavlImageN::DrawTextCenter((RavlImageN::FontC const &)*arg1,(RavlImageN::ByteRGBValueC const &)*arg2,(RavlN::Index2dC const &)*arg3,(RavlN::StringC const &)*arg4,*arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DrawTextCenter__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlImageN::FontC *arg1 = 0 ;
    RavlN::ByteT *arg2 = 0 ;
    RavlN::Index2dC *arg3 = 0 ;
    RavlN::StringC *arg4 = 0 ;
    RavlImageN::ImageC<RavlN::ByteT > *arg5 = 0 ;
    RavlN::ByteT temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:DrawTextCenter",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlImageN__FontC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlImageN::FontC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        temp2 = static_cast<RavlN::ByteT >(SWIG_As_unsigned_SS_char(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RavlN__Index2dC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("RavlN::Index2dC");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("RavlN::StringC");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("RavlImageN::ImageC<RavlN::ByteT >");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    RavlImageN::DrawTextCenter((RavlImageN::FontC const &)*arg1,(unsigned char const &)*arg2,(RavlN::Index2dC const &)*arg3,(RavlN::StringC const &)*arg4,*arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DrawTextCenter(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlImageN__FontC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlImageN__ByteRGBValueC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RavlN__Index2dC, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_RavlN__StringC, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            return _wrap_DrawTextCenter__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlImageN__FontC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_char(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RavlN__Index2dC, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_RavlN__StringC, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_RavlImageN__ImageCTunsigned_char_t, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            return _wrap_DrawTextCenter__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DrawTextCenter'");
    return NULL;
}


static PyObject *_wrap_new_Affine2dC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Affine2dC *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Affine2dC")) goto fail;
    result = (RavlN::Affine2dC *)new RavlN::Affine2dC();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__Affine2dC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Affine2dC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::Affine2dC *arg1 = (RavlN::Affine2dC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Affine2dC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__Affine2dC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Affine2dC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__Affine2dC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DateC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DateC")) goto fail;
    result = (RavlN::DateC *)new RavlN::DateC();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_NowUTC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC result;
    
    if(!PyArg_ParseTuple(args,(char *)":DateC_NowUTC")) goto fail;
    result = RavlN::DateC::NowUTC();
    
    {
        RavlN::DateC * resultptr;
        resultptr = new RavlN::DateC(static_cast<RavlN::DateC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DateC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_NowLocal(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC result;
    
    if(!PyArg_ParseTuple(args,(char *)":DateC_NowLocal")) goto fail;
    result = RavlN::DateC::NowLocal();
    
    {
        RavlN::DateC * resultptr;
        resultptr = new RavlN::DateC(static_cast<RavlN::DateC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DateC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_NowVirtual(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC result;
    
    if(!PyArg_ParseTuple(args,(char *)":DateC_NowVirtual")) goto fail;
    result = RavlN::DateC::NowVirtual();
    
    {
        RavlN::DateC * resultptr;
        resultptr = new RavlN::DateC(static_cast<RavlN::DateC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DateC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_TimeZoneOffset(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC result;
    
    if(!PyArg_ParseTuple(args,(char *)":DateC_TimeZoneOffset")) goto fail;
    result = RavlN::DateC::TimeZoneOffset();
    
    {
        RavlN::DateC * resultptr;
        resultptr = new RavlN::DateC(static_cast<RavlN::DateC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DateC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    bool arg1 ;
    bool arg2 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_DateC",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<bool >(SWIG_As_bool(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::DateC *)new RavlN::DateC(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateC__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    bool arg1 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DateC",&obj0)) goto fail;
    {
        arg1 = static_cast<bool >(SWIG_As_bool(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::DateC *)new RavlN::DateC(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateC__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::RealT arg1 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DateC",&obj0)) goto fail;
    {
        arg1 = static_cast<RavlN::RealT >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::DateC *)new RavlN::DateC(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateC__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IntT arg1 ;
    RavlN::IntT arg2 ;
    RavlN::IntT arg3 ;
    RavlN::IntT arg4 ;
    RavlN::IntT arg5 ;
    RavlN::IntT arg6 ;
    RavlN::IntT arg7 ;
    bool arg8 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_DateC",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    {
        arg1 = static_cast<RavlN::IntT >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<RavlN::IntT >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<RavlN::IntT >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<RavlN::IntT >(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = static_cast<RavlN::IntT >(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = static_cast<RavlN::IntT >(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = static_cast<bool >(SWIG_As_bool(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    result = (RavlN::DateC *)new RavlN::DateC(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateC__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IntT arg1 ;
    RavlN::IntT arg2 ;
    RavlN::IntT arg3 ;
    RavlN::IntT arg4 ;
    RavlN::IntT arg5 ;
    RavlN::IntT arg6 ;
    RavlN::IntT arg7 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_DateC",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        arg1 = static_cast<RavlN::IntT >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<RavlN::IntT >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<RavlN::IntT >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<RavlN::IntT >(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = static_cast<RavlN::IntT >(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = static_cast<RavlN::IntT >(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    result = (RavlN::DateC *)new RavlN::DateC(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateC__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IntT arg1 ;
    RavlN::IntT arg2 ;
    RavlN::IntT arg3 ;
    RavlN::IntT arg4 ;
    RavlN::IntT arg5 ;
    RavlN::IntT arg6 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:new_DateC",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        arg1 = static_cast<RavlN::IntT >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<RavlN::IntT >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<RavlN::IntT >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<RavlN::IntT >(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = static_cast<RavlN::IntT >(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    result = (RavlN::DateC *)new RavlN::DateC(arg1,arg2,arg3,arg4,arg5,arg6);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateC__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IntT arg1 ;
    RavlN::IntT arg2 ;
    RavlN::IntT arg3 ;
    RavlN::IntT arg4 ;
    RavlN::IntT arg5 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:new_DateC",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = static_cast<RavlN::IntT >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<RavlN::IntT >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<RavlN::IntT >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<RavlN::IntT >(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    result = (RavlN::DateC *)new RavlN::DateC(arg1,arg2,arg3,arg4,arg5);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateC__SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IntT arg1 ;
    RavlN::IntT arg2 ;
    RavlN::IntT arg3 ;
    RavlN::IntT arg4 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_DateC",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = static_cast<RavlN::IntT >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<RavlN::IntT >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<RavlN::IntT >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (RavlN::DateC *)new RavlN::DateC(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateC__SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::IntT arg1 ;
    RavlN::IntT arg2 ;
    RavlN::IntT arg3 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_DateC",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = static_cast<RavlN::IntT >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<RavlN::IntT >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<RavlN::IntT >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (RavlN::DateC *)new RavlN::DateC(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateC__SWIG_10(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    long arg1 ;
    long arg2 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_DateC",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<long >(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<long >(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::DateC *)new RavlN::DateC(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateC__SWIG_11(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = 0 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DateC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::DateC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::DateC *)new RavlN::DateC((RavlN::DateC const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateC__SWIG_12(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::StringC *arg1 = 0 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DateC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::StringC");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::DateC *)new RavlN::DateC((RavlN::StringC const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[9];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 8); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_DateC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DateC__SWIG_11(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__StringC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DateC__SWIG_12(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            return _wrap_new_DateC__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_bool(argv[0]);
        if (_v) {
            return _wrap_new_DateC__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_long(argv[0]);
        if (_v) {
            _v = SWIG_Check_long(argv[1]);
            if (_v) {
                return _wrap_new_DateC__SWIG_10(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_bool(argv[0]);
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_new_DateC__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_DateC__SWIG_9(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_new_DateC__SWIG_8(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_new_DateC__SWIG_7(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_int(argv[5]);
                            if (_v) {
                                return _wrap_new_DateC__SWIG_6(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_int(argv[5]);
                            if (_v) {
                                _v = SWIG_Check_int(argv[6]);
                                if (_v) {
                                    return _wrap_new_DateC__SWIG_5(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 8) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_int(argv[5]);
                            if (_v) {
                                _v = SWIG_Check_int(argv[6]);
                                if (_v) {
                                    _v = SWIG_Check_bool(argv[7]);
                                    if (_v) {
                                        return _wrap_new_DateC__SWIG_4(self,args);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_DateC'");
    return NULL;
}


static PyObject *_wrap_DateC_IsLeapYear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_IsLeapYear",&obj0)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)RavlN::DateC::IsLeapYear(arg1);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_YearToDaysSince1970(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_YearToDaysSince1970",&obj0)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (int)RavlN::DateC::YearToDaysSince1970(arg1);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_IsValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_IsValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DateC const *)arg1)->IsValid();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_IsZero(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_IsZero",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DateC const *)arg1)->IsZero();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_SetInvalid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_SetInvalid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetInvalid();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_SetToNow__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC_SetToNow",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetToNow(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_SetToNow__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_SetToNow",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetToNow();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_SetToNow(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateC_SetToNow__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_DateC_SetToNow__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateC_SetToNow'");
    return NULL;
}


static PyObject *_wrap_DateC_MaxUSeconds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_MaxUSeconds",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long)((RavlN::DateC const *)arg1)->MaxUSeconds();
    
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_Resolution(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_Resolution",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long)((RavlN::DateC const *)arg1)->Resolution();
    
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_NormalisePos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_NormalisePos",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->NormalisePos();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_NormaliseNeg(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_NormaliseNeg",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->NormaliseNeg();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::DateC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DateC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::DateC const *)arg1)->operator ==((RavlN::DateC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::DateC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DateC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::DateC const *)arg1)->operator !=((RavlN::DateC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC___gt__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::DateC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC___gt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DateC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::DateC const *)arg1)->operator >((RavlN::DateC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC___lt__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::DateC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DateC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::DateC const *)arg1)->operator <((RavlN::DateC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC___ge__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::DateC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC___ge__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DateC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::DateC const *)arg1)->operator >=((RavlN::DateC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC___le__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::DateC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC___le__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DateC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((RavlN::DateC const *)arg1)->operator <=((RavlN::DateC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC___add__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::DateC *arg2 = 0 ;
    RavlN::DateC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC___add__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DateC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((RavlN::DateC const *)arg1)->operator +((RavlN::DateC const &)*arg2);
    
    {
        RavlN::DateC * resultptr;
        resultptr = new RavlN::DateC(static_cast<RavlN::DateC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DateC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC___sub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::DateC *arg2 = 0 ;
    RavlN::DateC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DateC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((RavlN::DateC const *)arg1)->operator -((RavlN::DateC const &)*arg2);
    
    {
        RavlN::DateC * resultptr;
        resultptr = new RavlN::DateC(static_cast<RavlN::DateC & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RavlN__DateC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC___isub____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::DateC *arg2 = 0 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC___isub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DateC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlN::DateC const &_result_ref = (arg1)->operator -=((RavlN::DateC const &)*arg2);
        result = (RavlN::DateC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC___isub____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    double arg2 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC___isub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<double >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlN::DateC const &_result_ref = (arg1)->operator -=(arg2);
        result = (RavlN::DateC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC___isub__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateC___isub____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_DateC___isub____SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateC___isub__'");
    return NULL;
}


static PyObject *_wrap_DateC___iadd____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::DateC *arg2 = 0 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::DateC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlN::DateC const &_result_ref = (arg1)->operator +=((RavlN::DateC const &)*arg2);
        result = (RavlN::DateC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC___iadd____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    double arg2 ;
    RavlN::DateC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<double >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        RavlN::DateC const &_result_ref = (arg1)->operator +=(arg2);
        result = (RavlN::DateC *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__DateC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC___iadd__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DateC___iadd____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_DateC___iadd____SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateC___iadd__'");
    return NULL;
}


static PyObject *_wrap_DateC_Text(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::StringC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_Text",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((RavlN::DateC const *)arg1)->Text();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->chars(), (&result)->Size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_ODBC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool arg2 ;
    RavlN::StringC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC_ODBC",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((RavlN::DateC const *)arg1)->ODBC(arg2);
    
    {
        resultobj = PyString_FromStringAndSize((&result)->chars(), (&result)->Size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_ODBC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::StringC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_ODBC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((RavlN::DateC const *)arg1)->ODBC();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->chars(), (&result)->Size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_ODBC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateC_ODBC__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_DateC_ODBC__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateC_ODBC'");
    return NULL;
}


static PyObject *_wrap_DateC_SetODBC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::StringC *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC_SetODBC",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RavlN__StringC, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("RavlN::StringC");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->SetODBC((RavlN::StringC const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_CTime__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool arg2 ;
    RavlN::StringC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC_CTime",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((RavlN::DateC const *)arg1)->CTime(arg2);
    
    {
        resultobj = PyString_FromStringAndSize((&result)->chars(), (&result)->Size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_CTime__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::StringC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_CTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((RavlN::DateC const *)arg1)->CTime();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->chars(), (&result)->Size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_CTime(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateC_CTime__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_DateC_CTime__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateC_CTime'");
    return NULL;
}


static PyObject *_wrap_DateC_CTimeShort__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool arg2 ;
    RavlN::StringC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC_CTimeShort",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((RavlN::DateC const *)arg1)->CTimeShort(arg2);
    
    {
        resultobj = PyString_FromStringAndSize((&result)->chars(), (&result)->Size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_CTimeShort__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::StringC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_CTimeShort",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((RavlN::DateC const *)arg1)->CTimeShort();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->chars(), (&result)->Size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_CTimeShort(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateC_CTimeShort__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_DateC_CTimeShort__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateC_CTimeShort'");
    return NULL;
}


static PyObject *_wrap_DateC_USeconds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_USeconds",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long)((RavlN::DateC const *)arg1)->USeconds();
    
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_TotalSeconds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_TotalSeconds",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long)((RavlN::DateC const *)arg1)->TotalSeconds();
    
    {
        resultobj = SWIG_From_long(static_cast<long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_Double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_Double",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((RavlN::DateC const *)arg1)->Double();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_Seconds__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool arg2 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC_Seconds",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->Seconds(arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_Seconds__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_Seconds",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->Seconds();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_Seconds(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateC_Seconds__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_DateC_Seconds__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateC_Seconds'");
    return NULL;
}


static PyObject *_wrap_DateC_Minute__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool arg2 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC_Minute",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->Minute(arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_Minute__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_Minute",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->Minute();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_Minute(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateC_Minute__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_DateC_Minute__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateC_Minute'");
    return NULL;
}


static PyObject *_wrap_DateC_Hour__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool arg2 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC_Hour",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->Hour(arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_Hour__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_Hour",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->Hour();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_Hour(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateC_Hour__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_DateC_Hour__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateC_Hour'");
    return NULL;
}


static PyObject *_wrap_DateC_Month__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool arg2 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC_Month",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->Month(arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_Month__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_Month",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->Month();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_Month(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateC_Month__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_DateC_Month__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateC_Month'");
    return NULL;
}


static PyObject *_wrap_DateC_Year__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool arg2 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC_Year",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->Year(arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_Year__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_Year",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->Year();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_Year(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateC_Year__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_DateC_Year__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateC_Year'");
    return NULL;
}


static PyObject *_wrap_DateC_DayInMonth__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool arg2 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC_DayInMonth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->DayInMonth(arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_DayInMonth__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_DayInMonth",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->DayInMonth();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_DayInMonth(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateC_DayInMonth__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_DateC_DayInMonth__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateC_DayInMonth'");
    return NULL;
}


static PyObject *_wrap_DateC_DayInYear__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool arg2 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC_DayInYear",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->DayInYear(arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_DayInYear__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_DayInYear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->DayInYear();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_DayInYear(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateC_DayInYear__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_DateC_DayInYear__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateC_DayInYear'");
    return NULL;
}


static PyObject *_wrap_DateC_DayInWeek__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool arg2 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC_DayInWeek",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->DayInWeek(arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_DayInWeek__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::IntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_DayInWeek",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::IntT)((RavlN::DateC const *)arg1)->DayInWeek();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_DayInWeek(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateC_DayInWeek__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_DateC_DayInWeek__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateC_DayInWeek'");
    return NULL;
}


static PyObject *_wrap_DateC_TextDayInWeek__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool arg2 ;
    RavlN::StringC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DateC_TextDayInWeek",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((RavlN::DateC const *)arg1)->TextDayInWeek(arg2);
    
    {
        resultobj = PyString_FromStringAndSize((&result)->chars(), (&result)->Size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_TextDayInWeek__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    RavlN::StringC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_TextDayInWeek",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((RavlN::DateC const *)arg1)->TextDayInWeek();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->chars(), (&result)->Size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_TextDayInWeek(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DateC_TextDayInWeek__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__DateC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_DateC_TextDayInWeek__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DateC_TextDayInWeek'");
    return NULL;
}


static PyObject *_wrap_DateC_DaylightSaving(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_DaylightSaving",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DateC const *)arg1)->DaylightSaving();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateC_Wait(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateC_Wait",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::DateC const *)arg1)->Wait();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DateC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::DateC *arg1 = (RavlN::DateC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DateC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__DateC, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DateC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__DateC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_HashInt64Int64C__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::UIntT arg1 ;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_HashInt64Int64C",&obj0)) goto fail;
    {
        arg1 = static_cast<RavlN::UIntT >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *)new RavlN::HashC<RavlN::Int64T,RavlN::Int64T >(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_HashInt64Int64C__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_HashInt64Int64C")) goto fail;
    result = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *)new RavlN::HashC<RavlN::Int64T,RavlN::Int64T >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_HashInt64Int64C(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_HashInt64Int64C__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            return _wrap_new_HashInt64Int64C__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_HashInt64Int64C'");
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Lookup(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    RavlN::Int64T *arg3 = 0 ;
    bool result;
    RavlN::Int64T temp2 ;
    RavlN::Int64T temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    if(!PyArg_ParseTuple(args,(char *)"OO:HashInt64Int64C_Lookup",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (bool)((RavlN::HashC<RavlN::Int64T,RavlN::Int64T > const *)arg1)->Lookup((long long const &)*arg2,*arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_long_SS_long((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Update__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    RavlN::Int64T *arg3 = 0 ;
    bool result;
    RavlN::Int64T temp2 ;
    RavlN::Int64T temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HashInt64Int64C_Update",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    result = (bool)(arg1)->Update((long long const &)*arg2,(long long const &)*arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Update__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    RavlN::Int64T *result;
    RavlN::Int64T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HashInt64Int64C_Update",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        RavlN::Int64T &_result_ref = (arg1)->Update((long long const &)*arg2);
        result = (RavlN::Int64T *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_long_long, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Update(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long_SS_long(argv[1]);
            if (_v) {
                return _wrap_HashInt64Int64C_Update__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_long_SS_long(argv[2]);
                if (_v) {
                    return _wrap_HashInt64Int64C_Update__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'HashInt64Int64C_Update'");
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Insert(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    RavlN::Int64T *arg3 = 0 ;
    bool result;
    RavlN::Int64T temp2 ;
    RavlN::Int64T temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HashInt64Int64C_Insert",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    result = (bool)(arg1)->Insert((long long const &)*arg2,(long long const &)*arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Access__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    RavlN::Int64T *arg3 = 0 ;
    RavlN::Int64T *result;
    RavlN::Int64T temp2 ;
    RavlN::Int64T temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HashInt64Int64C_Access",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        RavlN::Int64T &_result_ref = (arg1)->Access((long long const &)*arg2,(long long const &)*arg3);
        result = (RavlN::Int64T *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_long_long, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Access__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    RavlN::Int64T *result;
    RavlN::Int64T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HashInt64Int64C_Access",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        RavlN::Int64T &_result_ref = (arg1)->Access((long long const &)*arg2);
        result = (RavlN::Int64T *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_long_long, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Access(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long_SS_long(argv[1]);
            if (_v) {
                return _wrap_HashInt64Int64C_Access__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_long_SS_long(argv[2]);
                if (_v) {
                    return _wrap_HashInt64Int64C_Access__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'HashInt64Int64C_Access'");
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_AccessCopy__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    RavlN::Int64T *arg3 = 0 ;
    RavlN::Int64T *result;
    RavlN::Int64T temp2 ;
    RavlN::Int64T temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HashInt64Int64C_AccessCopy",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        RavlN::Int64T &_result_ref = (arg1)->AccessCopy((long long const &)*arg2,(long long const &)*arg3);
        result = (RavlN::Int64T *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_long_long, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_AccessCopy__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    RavlN::Int64T *result;
    RavlN::Int64T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HashInt64Int64C_AccessCopy",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        RavlN::Int64T &_result_ref = (arg1)->AccessCopy((long long const &)*arg2);
        result = (RavlN::Int64T *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_long_long, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_AccessCopy(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long_SS_long(argv[1]);
            if (_v) {
                return _wrap_HashInt64Int64C_AccessCopy__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_long_SS_long(argv[2]);
                if (_v) {
                    return _wrap_HashInt64Int64C_AccessCopy__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'HashInt64Int64C_AccessCopy'");
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Del__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    bool arg3 ;
    bool result;
    RavlN::Int64T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HashInt64Int64C_Del",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)(arg1)->Del((long long const &)*arg2,arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Del__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    bool result;
    RavlN::Int64T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HashInt64Int64C_Del",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (bool)(arg1)->Del((long long const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Del(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long_SS_long(argv[1]);
            if (_v) {
                return _wrap_HashInt64Int64C_Del__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_HashInt64Int64C_Del__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'HashInt64Int64C_Del'");
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Get__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    bool arg3 ;
    RavlN::Int64T result;
    RavlN::Int64T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HashInt64Int64C_Get",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (RavlN::Int64T)(arg1)->Get((long long const &)*arg2,arg3);
    
    {
        resultobj = SWIG_From_long_SS_long(static_cast<long long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Get__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    RavlN::Int64T result;
    RavlN::Int64T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HashInt64Int64C_Get",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (RavlN::Int64T)(arg1)->Get((long long const &)*arg2);
    
    {
        resultobj = SWIG_From_long_SS_long(static_cast<long long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Get(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long_SS_long(argv[1]);
            if (_v) {
                return _wrap_HashInt64Int64C_Get__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_HashInt64Int64C_Get__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'HashInt64Int64C_Get'");
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_IsElm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *arg2 = 0 ;
    bool result;
    RavlN::Int64T temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HashInt64Int64C_IsElm",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<RavlN::Int64T >(SWIG_As_long_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (bool)((RavlN::HashC<RavlN::Int64T,RavlN::Int64T > const *)arg1)->IsElm((long long const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HashInt64Int64C_Empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Empty();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Bins(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::UIntT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HashInt64Int64C_Bins",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RavlN::UIntT)((RavlN::HashC<RavlN::Int64T,RavlN::Int64T > const *)arg1)->Bins();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64C_Resize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::SizeT arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HashInt64Int64C_Resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<RavlN::SizeT >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->Resize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_HashInt64Int64C(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_HashInt64Int64C",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * HashInt64Int64C_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_HashInt64Int64IterC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_HashInt64Int64IterC")) goto fail;
    result = (RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *)new RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_HashInt64Int64IterC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *arg1 = 0 ;
    RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_HashInt64Int64IterC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::HashC<RavlN::Int64T,RavlN::Int64T >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *)new RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T >((RavlN::HashC<long long,RavlN::Int64T > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_HashInt64Int64IterC__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *arg1 = 0 ;
    RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_HashInt64Int64IterC",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *)new RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T >((RavlN::HashIterC<long long,RavlN::Int64T > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_HashInt64Int64IterC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_HashInt64Int64IterC__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__HashCTlong_long_long_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_HashInt64Int64IterC__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_HashInt64Int64IterC__SWIG_2(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_HashInt64Int64IterC'");
    return NULL;
}


static PyObject *_wrap_HashInt64Int64IterC_First(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HashInt64Int64IterC_First",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->First();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64IterC_Next(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HashInt64Int64IterC_Next",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->Next();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64IterC_IsElm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HashInt64Int64IterC_IsElm",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > const *)arg1)->IsElm();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64IterC_Key(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HashInt64Int64IterC_Key",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::Int64T const &_result_ref = ((RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > const *)arg1)->Key();
        result = (RavlN::Int64T *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_long_SS_long(static_cast<long long >(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64IterC_Data__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HashInt64Int64IterC_Data",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::Int64T const &_result_ref = ((RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > const *)arg1)->Data();
        result = (RavlN::Int64T *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_long_SS_long(static_cast<long long >(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64IterC_Data__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    RavlN::Int64T *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HashInt64Int64IterC_Data",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RavlN::Int64T &_result_ref = (arg1)->Data();
        result = (RavlN::Int64T *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_long_long, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashInt64Int64IterC_Data(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_HashInt64Int64IterC_Data__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_HashInt64Int64IterC_Data__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'HashInt64Int64IterC_Data'");
    return NULL;
}


static PyObject *_wrap_HashInt64Int64IterC_Del(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HashInt64Int64IterC_Del",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->Del();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_HashInt64Int64IterC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *arg1 = (RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_HashInt64Int64IterC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * HashInt64Int64IterC_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RavlN__HashIterCTlong_long_long_long_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_DListRealC", _wrap_new_DListRealC, METH_VARARGS, NULL},
	 { (char *)"DListRealC_Empty", _wrap_DListRealC_Empty, METH_VARARGS, NULL},
	 { (char *)"DListRealC_InsFirst", _wrap_DListRealC_InsFirst, METH_VARARGS, NULL},
	 { (char *)"DListRealC_InsLast", _wrap_DListRealC_InsLast, METH_VARARGS, NULL},
	 { (char *)"DListRealC_PopFirst", _wrap_DListRealC_PopFirst, METH_VARARGS, NULL},
	 { (char *)"DListRealC_PopLast", _wrap_DListRealC_PopLast, METH_VARARGS, NULL},
	 { (char *)"DListRealC_MoveFirst", _wrap_DListRealC_MoveFirst, METH_VARARGS, NULL},
	 { (char *)"DListRealC_MoveLast", _wrap_DListRealC_MoveLast, METH_VARARGS, NULL},
	 { (char *)"DListRealC_First", _wrap_DListRealC_First, METH_VARARGS, NULL},
	 { (char *)"DListRealC_Last", _wrap_DListRealC_Last, METH_VARARGS, NULL},
	 { (char *)"DListRealC_Del", _wrap_DListRealC_Del, METH_VARARGS, NULL},
	 { (char *)"DListRealC_Contains", _wrap_DListRealC_Contains, METH_VARARGS, NULL},
	 { (char *)"DListRealC_Nth", _wrap_DListRealC_Nth, METH_VARARGS, NULL},
	 { (char *)"delete_DListRealC", _wrap_delete_DListRealC, METH_VARARGS, NULL},
	 { (char *)"DListRealC_swigregister", DListRealC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DListRealIterC", _wrap_new_DListRealIterC, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_IsValid", _wrap_DListRealIterC_IsValid, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_First", _wrap_DListRealIterC_First, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_Last", _wrap_DListRealIterC_Last, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_IsElm", _wrap_DListRealIterC_IsElm, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_IsFirst", _wrap_DListRealIterC_IsFirst, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_IsLast", _wrap_DListRealIterC_IsLast, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_Next", _wrap_DListRealIterC_Next, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_Prev", _wrap_DListRealIterC_Prev, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_NextCrc", _wrap_DListRealIterC_NextCrc, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_PrevCrc", _wrap_DListRealIterC_PrevCrc, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_Nth", _wrap_DListRealIterC_Nth, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_NextData", _wrap_DListRealIterC_NextData, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_PrevData", _wrap_DListRealIterC_PrevData, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_NextCrcData", _wrap_DListRealIterC_NextCrcData, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_PrevCrcData", _wrap_DListRealIterC_PrevCrcData, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_Tail", _wrap_DListRealIterC_Tail, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_Head", _wrap_DListRealIterC_Head, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_InclusiveTail", _wrap_DListRealIterC_InclusiveTail, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_InclusiveHead", _wrap_DListRealIterC_InclusiveHead, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_Data", _wrap_DListRealIterC_Data, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC___deref__", _wrap_DListRealIterC___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_DListRealIterC", _wrap_delete_DListRealIterC, METH_VARARGS, NULL},
	 { (char *)"DListRealIterC_swigregister", DListRealIterC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DListIntC", _wrap_new_DListIntC, METH_VARARGS, NULL},
	 { (char *)"DListIntC_Empty", _wrap_DListIntC_Empty, METH_VARARGS, NULL},
	 { (char *)"DListIntC_InsFirst", _wrap_DListIntC_InsFirst, METH_VARARGS, NULL},
	 { (char *)"DListIntC_InsLast", _wrap_DListIntC_InsLast, METH_VARARGS, NULL},
	 { (char *)"DListIntC_PopFirst", _wrap_DListIntC_PopFirst, METH_VARARGS, NULL},
	 { (char *)"DListIntC_PopLast", _wrap_DListIntC_PopLast, METH_VARARGS, NULL},
	 { (char *)"DListIntC_MoveFirst", _wrap_DListIntC_MoveFirst, METH_VARARGS, NULL},
	 { (char *)"DListIntC_MoveLast", _wrap_DListIntC_MoveLast, METH_VARARGS, NULL},
	 { (char *)"DListIntC_First", _wrap_DListIntC_First, METH_VARARGS, NULL},
	 { (char *)"DListIntC_Last", _wrap_DListIntC_Last, METH_VARARGS, NULL},
	 { (char *)"DListIntC_Del", _wrap_DListIntC_Del, METH_VARARGS, NULL},
	 { (char *)"DListIntC_Contains", _wrap_DListIntC_Contains, METH_VARARGS, NULL},
	 { (char *)"DListIntC_Nth", _wrap_DListIntC_Nth, METH_VARARGS, NULL},
	 { (char *)"delete_DListIntC", _wrap_delete_DListIntC, METH_VARARGS, NULL},
	 { (char *)"DListIntC_swigregister", DListIntC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DListIntIterC", _wrap_new_DListIntIterC, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_IsValid", _wrap_DListIntIterC_IsValid, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_First", _wrap_DListIntIterC_First, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_Last", _wrap_DListIntIterC_Last, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_IsElm", _wrap_DListIntIterC_IsElm, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_IsFirst", _wrap_DListIntIterC_IsFirst, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_IsLast", _wrap_DListIntIterC_IsLast, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_Next", _wrap_DListIntIterC_Next, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_Prev", _wrap_DListIntIterC_Prev, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_NextCrc", _wrap_DListIntIterC_NextCrc, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_PrevCrc", _wrap_DListIntIterC_PrevCrc, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_Nth", _wrap_DListIntIterC_Nth, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_NextData", _wrap_DListIntIterC_NextData, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_PrevData", _wrap_DListIntIterC_PrevData, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_NextCrcData", _wrap_DListIntIterC_NextCrcData, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_PrevCrcData", _wrap_DListIntIterC_PrevCrcData, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_Tail", _wrap_DListIntIterC_Tail, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_Head", _wrap_DListIntIterC_Head, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_InclusiveTail", _wrap_DListIntIterC_InclusiveTail, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_InclusiveHead", _wrap_DListIntIterC_InclusiveHead, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_Data", _wrap_DListIntIterC_Data, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC___deref__", _wrap_DListIntIterC___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_DListIntIterC", _wrap_delete_DListIntIterC, METH_VARARGS, NULL},
	 { (char *)"DListIntIterC_swigregister", DListIntIterC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DListUIntC", _wrap_new_DListUIntC, METH_VARARGS, NULL},
	 { (char *)"DListUIntC_Empty", _wrap_DListUIntC_Empty, METH_VARARGS, NULL},
	 { (char *)"DListUIntC_InsFirst", _wrap_DListUIntC_InsFirst, METH_VARARGS, NULL},
	 { (char *)"DListUIntC_InsLast", _wrap_DListUIntC_InsLast, METH_VARARGS, NULL},
	 { (char *)"DListUIntC_PopFirst", _wrap_DListUIntC_PopFirst, METH_VARARGS, NULL},
	 { (char *)"DListUIntC_PopLast", _wrap_DListUIntC_PopLast, METH_VARARGS, NULL},
	 { (char *)"DListUIntC_MoveFirst", _wrap_DListUIntC_MoveFirst, METH_VARARGS, NULL},
	 { (char *)"DListUIntC_MoveLast", _wrap_DListUIntC_MoveLast, METH_VARARGS, NULL},
	 { (char *)"DListUIntC_First", _wrap_DListUIntC_First, METH_VARARGS, NULL},
	 { (char *)"DListUIntC_Last", _wrap_DListUIntC_Last, METH_VARARGS, NULL},
	 { (char *)"DListUIntC_Del", _wrap_DListUIntC_Del, METH_VARARGS, NULL},
	 { (char *)"DListUIntC_Contains", _wrap_DListUIntC_Contains, METH_VARARGS, NULL},
	 { (char *)"DListUIntC_Nth", _wrap_DListUIntC_Nth, METH_VARARGS, NULL},
	 { (char *)"delete_DListUIntC", _wrap_delete_DListUIntC, METH_VARARGS, NULL},
	 { (char *)"DListUIntC_swigregister", DListUIntC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DListUIntIterC", _wrap_new_DListUIntIterC, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_IsValid", _wrap_DListUIntIterC_IsValid, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_First", _wrap_DListUIntIterC_First, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_Last", _wrap_DListUIntIterC_Last, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_IsElm", _wrap_DListUIntIterC_IsElm, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_IsFirst", _wrap_DListUIntIterC_IsFirst, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_IsLast", _wrap_DListUIntIterC_IsLast, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_Next", _wrap_DListUIntIterC_Next, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_Prev", _wrap_DListUIntIterC_Prev, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_NextCrc", _wrap_DListUIntIterC_NextCrc, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_PrevCrc", _wrap_DListUIntIterC_PrevCrc, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_Nth", _wrap_DListUIntIterC_Nth, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_NextData", _wrap_DListUIntIterC_NextData, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_PrevData", _wrap_DListUIntIterC_PrevData, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_NextCrcData", _wrap_DListUIntIterC_NextCrcData, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_PrevCrcData", _wrap_DListUIntIterC_PrevCrcData, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_Tail", _wrap_DListUIntIterC_Tail, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_Head", _wrap_DListUIntIterC_Head, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_InclusiveTail", _wrap_DListUIntIterC_InclusiveTail, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_InclusiveHead", _wrap_DListUIntIterC_InclusiveHead, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_Data", _wrap_DListUIntIterC_Data, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC___deref__", _wrap_DListUIntIterC___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_DListUIntIterC", _wrap_delete_DListUIntIterC, METH_VARARGS, NULL},
	 { (char *)"DListUIntIterC_swigregister", DListUIntIterC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DListInt64C", _wrap_new_DListInt64C, METH_VARARGS, NULL},
	 { (char *)"DListInt64C_Empty", _wrap_DListInt64C_Empty, METH_VARARGS, NULL},
	 { (char *)"DListInt64C_InsFirst", _wrap_DListInt64C_InsFirst, METH_VARARGS, NULL},
	 { (char *)"DListInt64C_InsLast", _wrap_DListInt64C_InsLast, METH_VARARGS, NULL},
	 { (char *)"DListInt64C_PopFirst", _wrap_DListInt64C_PopFirst, METH_VARARGS, NULL},
	 { (char *)"DListInt64C_PopLast", _wrap_DListInt64C_PopLast, METH_VARARGS, NULL},
	 { (char *)"DListInt64C_MoveFirst", _wrap_DListInt64C_MoveFirst, METH_VARARGS, NULL},
	 { (char *)"DListInt64C_MoveLast", _wrap_DListInt64C_MoveLast, METH_VARARGS, NULL},
	 { (char *)"DListInt64C_First", _wrap_DListInt64C_First, METH_VARARGS, NULL},
	 { (char *)"DListInt64C_Last", _wrap_DListInt64C_Last, METH_VARARGS, NULL},
	 { (char *)"DListInt64C_Del", _wrap_DListInt64C_Del, METH_VARARGS, NULL},
	 { (char *)"DListInt64C_Contains", _wrap_DListInt64C_Contains, METH_VARARGS, NULL},
	 { (char *)"DListInt64C_Nth", _wrap_DListInt64C_Nth, METH_VARARGS, NULL},
	 { (char *)"delete_DListInt64C", _wrap_delete_DListInt64C, METH_VARARGS, NULL},
	 { (char *)"DListInt64C_swigregister", DListInt64C_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DListInt64IterC", _wrap_new_DListInt64IterC, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_IsValid", _wrap_DListInt64IterC_IsValid, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_First", _wrap_DListInt64IterC_First, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_Last", _wrap_DListInt64IterC_Last, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_IsElm", _wrap_DListInt64IterC_IsElm, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_IsFirst", _wrap_DListInt64IterC_IsFirst, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_IsLast", _wrap_DListInt64IterC_IsLast, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_Next", _wrap_DListInt64IterC_Next, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_Prev", _wrap_DListInt64IterC_Prev, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_NextCrc", _wrap_DListInt64IterC_NextCrc, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_PrevCrc", _wrap_DListInt64IterC_PrevCrc, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_Nth", _wrap_DListInt64IterC_Nth, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_NextData", _wrap_DListInt64IterC_NextData, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_PrevData", _wrap_DListInt64IterC_PrevData, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_NextCrcData", _wrap_DListInt64IterC_NextCrcData, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_PrevCrcData", _wrap_DListInt64IterC_PrevCrcData, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_Tail", _wrap_DListInt64IterC_Tail, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_Head", _wrap_DListInt64IterC_Head, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_InclusiveTail", _wrap_DListInt64IterC_InclusiveTail, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_InclusiveHead", _wrap_DListInt64IterC_InclusiveHead, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_Data", _wrap_DListInt64IterC_Data, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC___deref__", _wrap_DListInt64IterC___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_DListInt64IterC", _wrap_delete_DListInt64IterC, METH_VARARGS, NULL},
	 { (char *)"DListInt64IterC_swigregister", DListInt64IterC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DListInt16C", _wrap_new_DListInt16C, METH_VARARGS, NULL},
	 { (char *)"DListInt16C_Empty", _wrap_DListInt16C_Empty, METH_VARARGS, NULL},
	 { (char *)"DListInt16C_InsFirst", _wrap_DListInt16C_InsFirst, METH_VARARGS, NULL},
	 { (char *)"DListInt16C_InsLast", _wrap_DListInt16C_InsLast, METH_VARARGS, NULL},
	 { (char *)"DListInt16C_PopFirst", _wrap_DListInt16C_PopFirst, METH_VARARGS, NULL},
	 { (char *)"DListInt16C_PopLast", _wrap_DListInt16C_PopLast, METH_VARARGS, NULL},
	 { (char *)"DListInt16C_MoveFirst", _wrap_DListInt16C_MoveFirst, METH_VARARGS, NULL},
	 { (char *)"DListInt16C_MoveLast", _wrap_DListInt16C_MoveLast, METH_VARARGS, NULL},
	 { (char *)"DListInt16C_First", _wrap_DListInt16C_First, METH_VARARGS, NULL},
	 { (char *)"DListInt16C_Last", _wrap_DListInt16C_Last, METH_VARARGS, NULL},
	 { (char *)"DListInt16C_Del", _wrap_DListInt16C_Del, METH_VARARGS, NULL},
	 { (char *)"DListInt16C_Contains", _wrap_DListInt16C_Contains, METH_VARARGS, NULL},
	 { (char *)"DListInt16C_Nth", _wrap_DListInt16C_Nth, METH_VARARGS, NULL},
	 { (char *)"delete_DListInt16C", _wrap_delete_DListInt16C, METH_VARARGS, NULL},
	 { (char *)"DListInt16C_swigregister", DListInt16C_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DListInt16IterC", _wrap_new_DListInt16IterC, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_IsValid", _wrap_DListInt16IterC_IsValid, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_First", _wrap_DListInt16IterC_First, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_Last", _wrap_DListInt16IterC_Last, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_IsElm", _wrap_DListInt16IterC_IsElm, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_IsFirst", _wrap_DListInt16IterC_IsFirst, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_IsLast", _wrap_DListInt16IterC_IsLast, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_Next", _wrap_DListInt16IterC_Next, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_Prev", _wrap_DListInt16IterC_Prev, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_NextCrc", _wrap_DListInt16IterC_NextCrc, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_PrevCrc", _wrap_DListInt16IterC_PrevCrc, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_Nth", _wrap_DListInt16IterC_Nth, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_NextData", _wrap_DListInt16IterC_NextData, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_PrevData", _wrap_DListInt16IterC_PrevData, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_NextCrcData", _wrap_DListInt16IterC_NextCrcData, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_PrevCrcData", _wrap_DListInt16IterC_PrevCrcData, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_Tail", _wrap_DListInt16IterC_Tail, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_Head", _wrap_DListInt16IterC_Head, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_InclusiveTail", _wrap_DListInt16IterC_InclusiveTail, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_InclusiveHead", _wrap_DListInt16IterC_InclusiveHead, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_Data", _wrap_DListInt16IterC_Data, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC___deref__", _wrap_DListInt16IterC___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_DListInt16IterC", _wrap_delete_DListInt16IterC, METH_VARARGS, NULL},
	 { (char *)"DListInt16IterC_swigregister", DListInt16IterC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DListByteC", _wrap_new_DListByteC, METH_VARARGS, NULL},
	 { (char *)"DListByteC_Empty", _wrap_DListByteC_Empty, METH_VARARGS, NULL},
	 { (char *)"DListByteC_InsFirst", _wrap_DListByteC_InsFirst, METH_VARARGS, NULL},
	 { (char *)"DListByteC_InsLast", _wrap_DListByteC_InsLast, METH_VARARGS, NULL},
	 { (char *)"DListByteC_PopFirst", _wrap_DListByteC_PopFirst, METH_VARARGS, NULL},
	 { (char *)"DListByteC_PopLast", _wrap_DListByteC_PopLast, METH_VARARGS, NULL},
	 { (char *)"DListByteC_MoveFirst", _wrap_DListByteC_MoveFirst, METH_VARARGS, NULL},
	 { (char *)"DListByteC_MoveLast", _wrap_DListByteC_MoveLast, METH_VARARGS, NULL},
	 { (char *)"DListByteC_First", _wrap_DListByteC_First, METH_VARARGS, NULL},
	 { (char *)"DListByteC_Last", _wrap_DListByteC_Last, METH_VARARGS, NULL},
	 { (char *)"DListByteC_Del", _wrap_DListByteC_Del, METH_VARARGS, NULL},
	 { (char *)"DListByteC_Contains", _wrap_DListByteC_Contains, METH_VARARGS, NULL},
	 { (char *)"DListByteC_Nth", _wrap_DListByteC_Nth, METH_VARARGS, NULL},
	 { (char *)"delete_DListByteC", _wrap_delete_DListByteC, METH_VARARGS, NULL},
	 { (char *)"DListByteC_swigregister", DListByteC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DListByteIterC", _wrap_new_DListByteIterC, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_IsValid", _wrap_DListByteIterC_IsValid, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_First", _wrap_DListByteIterC_First, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_Last", _wrap_DListByteIterC_Last, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_IsElm", _wrap_DListByteIterC_IsElm, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_IsFirst", _wrap_DListByteIterC_IsFirst, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_IsLast", _wrap_DListByteIterC_IsLast, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_Next", _wrap_DListByteIterC_Next, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_Prev", _wrap_DListByteIterC_Prev, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_NextCrc", _wrap_DListByteIterC_NextCrc, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_PrevCrc", _wrap_DListByteIterC_PrevCrc, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_Nth", _wrap_DListByteIterC_Nth, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_NextData", _wrap_DListByteIterC_NextData, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_PrevData", _wrap_DListByteIterC_PrevData, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_NextCrcData", _wrap_DListByteIterC_NextCrcData, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_PrevCrcData", _wrap_DListByteIterC_PrevCrcData, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_Tail", _wrap_DListByteIterC_Tail, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_Head", _wrap_DListByteIterC_Head, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_InclusiveTail", _wrap_DListByteIterC_InclusiveTail, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_InclusiveHead", _wrap_DListByteIterC_InclusiveHead, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_Data", _wrap_DListByteIterC_Data, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC___deref__", _wrap_DListByteIterC___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_DListByteIterC", _wrap_delete_DListByteIterC, METH_VARARGS, NULL},
	 { (char *)"DListByteIterC_swigregister", DListByteIterC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Point2dC", _wrap_new_Point2dC, METH_VARARGS, NULL},
	 { (char *)"Point2dC_Row", _wrap_Point2dC_Row, METH_VARARGS, NULL},
	 { (char *)"Point2dC_Col", _wrap_Point2dC_Col, METH_VARARGS, NULL},
	 { (char *)"delete_Point2dC", _wrap_delete_Point2dC, METH_VARARGS, NULL},
	 { (char *)"Point2dC_swigregister", Point2dC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DListPoint2dC", _wrap_new_DListPoint2dC, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dC_Empty", _wrap_DListPoint2dC_Empty, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dC_InsFirst", _wrap_DListPoint2dC_InsFirst, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dC_InsLast", _wrap_DListPoint2dC_InsLast, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dC_PopFirst", _wrap_DListPoint2dC_PopFirst, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dC_PopLast", _wrap_DListPoint2dC_PopLast, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dC_MoveFirst", _wrap_DListPoint2dC_MoveFirst, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dC_MoveLast", _wrap_DListPoint2dC_MoveLast, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dC_First", _wrap_DListPoint2dC_First, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dC_Last", _wrap_DListPoint2dC_Last, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dC_Del", _wrap_DListPoint2dC_Del, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dC_Contains", _wrap_DListPoint2dC_Contains, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dC_Nth", _wrap_DListPoint2dC_Nth, METH_VARARGS, NULL},
	 { (char *)"delete_DListPoint2dC", _wrap_delete_DListPoint2dC, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dC_swigregister", DListPoint2dC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DListPoint2dIterC", _wrap_new_DListPoint2dIterC, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_IsValid", _wrap_DListPoint2dIterC_IsValid, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_First", _wrap_DListPoint2dIterC_First, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_Last", _wrap_DListPoint2dIterC_Last, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_IsElm", _wrap_DListPoint2dIterC_IsElm, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_IsFirst", _wrap_DListPoint2dIterC_IsFirst, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_IsLast", _wrap_DListPoint2dIterC_IsLast, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_Next", _wrap_DListPoint2dIterC_Next, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_Prev", _wrap_DListPoint2dIterC_Prev, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_NextCrc", _wrap_DListPoint2dIterC_NextCrc, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_PrevCrc", _wrap_DListPoint2dIterC_PrevCrc, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_Nth", _wrap_DListPoint2dIterC_Nth, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_NextData", _wrap_DListPoint2dIterC_NextData, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_PrevData", _wrap_DListPoint2dIterC_PrevData, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_NextCrcData", _wrap_DListPoint2dIterC_NextCrcData, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_PrevCrcData", _wrap_DListPoint2dIterC_PrevCrcData, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_Tail", _wrap_DListPoint2dIterC_Tail, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_Head", _wrap_DListPoint2dIterC_Head, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_InclusiveTail", _wrap_DListPoint2dIterC_InclusiveTail, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_InclusiveHead", _wrap_DListPoint2dIterC_InclusiveHead, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_Data", _wrap_DListPoint2dIterC_Data, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC___deref__", _wrap_DListPoint2dIterC___deref__, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_Row", _wrap_DListPoint2dIterC_Row, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_Col", _wrap_DListPoint2dIterC_Col, METH_VARARGS, NULL},
	 { (char *)"delete_DListPoint2dIterC", _wrap_delete_DListPoint2dIterC, METH_VARARGS, NULL},
	 { (char *)"DListPoint2dIterC_swigregister", DListPoint2dIterC_swigregister, METH_VARARGS, NULL},
	 { (char *)"ToList", _wrap_ToList, METH_VARARGS, NULL},
	 { (char *)"new_IndexC", _wrap_new_IndexC, METH_VARARGS, NULL},
	 { (char *)"IndexC_V", _wrap_IndexC_V, METH_VARARGS, NULL},
	 { (char *)"delete_IndexC", _wrap_delete_IndexC, METH_VARARGS, NULL},
	 { (char *)"IndexC_swigregister", IndexC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Index2dC", _wrap_new_Index2dC, METH_VARARGS, NULL},
	 { (char *)"Index2dC_Row", _wrap_Index2dC_Row, METH_VARARGS, NULL},
	 { (char *)"Index2dC_Col", _wrap_Index2dC_Col, METH_VARARGS, NULL},
	 { (char *)"delete_Index2dC", _wrap_delete_Index2dC, METH_VARARGS, NULL},
	 { (char *)"Index2dC_swigregister", Index2dC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IndexRange2dC", _wrap_new_IndexRange2dC, METH_VARARGS, NULL},
	 { (char *)"IndexRange2dC_Rows", _wrap_IndexRange2dC_Rows, METH_VARARGS, NULL},
	 { (char *)"IndexRange2dC_Cols", _wrap_IndexRange2dC_Cols, METH_VARARGS, NULL},
	 { (char *)"IndexRange2dC_Area", _wrap_IndexRange2dC_Area, METH_VARARGS, NULL},
	 { (char *)"IndexRange2dC_Contains", _wrap_IndexRange2dC_Contains, METH_VARARGS, NULL},
	 { (char *)"IndexRange2dC_Expand", _wrap_IndexRange2dC_Expand, METH_VARARGS, NULL},
	 { (char *)"IndexRange2dC_ClipBy", _wrap_IndexRange2dC_ClipBy, METH_VARARGS, NULL},
	 { (char *)"delete_IndexRange2dC", _wrap_delete_IndexRange2dC, METH_VARARGS, NULL},
	 { (char *)"IndexRange2dC_swigregister", IndexRange2dC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Array2dByteC", _wrap_new_Array2dByteC, METH_VARARGS, NULL},
	 { (char *)"Array2dByteC_Frame", _wrap_Array2dByteC_Frame, METH_VARARGS, NULL},
	 { (char *)"Array2dByteC_Fill", _wrap_Array2dByteC_Fill, METH_VARARGS, NULL},
	 { (char *)"Array2dByteC_Stride", _wrap_Array2dByteC_Stride, METH_VARARGS, NULL},
	 { (char *)"Array2dByteC_Access", _wrap_Array2dByteC_Access, METH_VARARGS, NULL},
	 { (char *)"delete_Array2dByteC", _wrap_delete_Array2dByteC, METH_VARARGS, NULL},
	 { (char *)"Array2dByteC_swigregister", Array2dByteC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Array2dRealC", _wrap_new_Array2dRealC, METH_VARARGS, NULL},
	 { (char *)"Array2dRealC_Frame", _wrap_Array2dRealC_Frame, METH_VARARGS, NULL},
	 { (char *)"Array2dRealC_Fill", _wrap_Array2dRealC_Fill, METH_VARARGS, NULL},
	 { (char *)"Array2dRealC_Stride", _wrap_Array2dRealC_Stride, METH_VARARGS, NULL},
	 { (char *)"Array2dRealC_Access", _wrap_Array2dRealC_Access, METH_VARARGS, NULL},
	 { (char *)"delete_Array2dRealC", _wrap_delete_Array2dRealC, METH_VARARGS, NULL},
	 { (char *)"Array2dRealC_swigregister", Array2dRealC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_StringC", _wrap_new_StringC, METH_VARARGS, NULL},
	 { (char *)"StringC_IsEmpty", _wrap_StringC_IsEmpty, METH_VARARGS, NULL},
	 { (char *)"StringC_chars", _wrap_StringC_chars, METH_VARARGS, NULL},
	 { (char *)"StringC_Size", _wrap_StringC_Size, METH_VARARGS, NULL},
	 { (char *)"StringC___str__", _wrap_StringC___str__, METH_VARARGS, NULL},
	 { (char *)"delete_StringC", _wrap_delete_StringC, METH_VARARGS, NULL},
	 { (char *)"StringC_swigregister", StringC_swigregister, METH_VARARGS, NULL},
	 { (char *)"PrintIOFormats", _wrap_PrintIOFormats, METH_VARARGS, NULL},
	 { (char *)"PrintIOConversions", _wrap_PrintIOConversions, METH_VARARGS, NULL},
	 { (char *)"PrintIOClassTypes", _wrap_PrintIOClassTypes, METH_VARARGS, NULL},
	 { (char *)"new_RealRangeC", _wrap_new_RealRangeC, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_Size", _wrap_RealRangeC_Size, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_Range", _wrap_RealRangeC_Range, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_Min", _wrap_RealRangeC_Min, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_Max", _wrap_RealRangeC_Max, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_Center", _wrap_RealRangeC_Center, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_CenterD", _wrap_RealRangeC_CenterD, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_Percentage", _wrap_RealRangeC_Percentage, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_IsEmpty", _wrap_RealRangeC_IsEmpty, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_IsValid", _wrap_RealRangeC_IsValid, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_Contains", _wrap_RealRangeC_Contains, METH_VARARGS, NULL},
	 { (char *)"RealRangeC___eq__", _wrap_RealRangeC___eq__, METH_VARARGS, NULL},
	 { (char *)"RealRangeC___ne__", _wrap_RealRangeC___ne__, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_In", _wrap_RealRangeC_In, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_IsOverlapping", _wrap_RealRangeC_IsOverlapping, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_SetOrigin", _wrap_RealRangeC_SetOrigin, METH_VARARGS, NULL},
	 { (char *)"RealRangeC___iadd__", _wrap_RealRangeC___iadd__, METH_VARARGS, NULL},
	 { (char *)"RealRangeC___isub__", _wrap_RealRangeC___isub__, METH_VARARGS, NULL},
	 { (char *)"RealRangeC___add__", _wrap_RealRangeC___add__, METH_VARARGS, NULL},
	 { (char *)"RealRangeC___sub__", _wrap_RealRangeC___sub__, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_ClipBy", _wrap_RealRangeC_ClipBy, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_Clip", _wrap_RealRangeC_Clip, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_FirstHalf", _wrap_RealRangeC_FirstHalf, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_FirstHalfD", _wrap_RealRangeC_FirstHalfD, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_Enlarge", _wrap_RealRangeC_Enlarge, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_Expand", _wrap_RealRangeC_Expand, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_Shrink", _wrap_RealRangeC_Shrink, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_ShrinkHigh", _wrap_RealRangeC_ShrinkHigh, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_Swap", _wrap_RealRangeC_Swap, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_Involve", _wrap_RealRangeC_Involve, METH_VARARGS, NULL},
	 { (char *)"delete_RealRangeC", _wrap_delete_RealRangeC, METH_VARARGS, NULL},
	 { (char *)"RealRangeC_swigregister", RealRangeC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RealRange2dC", _wrap_new_RealRange2dC, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_TRow", _wrap_RealRange2dC_TRow, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_LCol", _wrap_RealRange2dC_LCol, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_BRow", _wrap_RealRange2dC_BRow, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_RCol", _wrap_RealRange2dC_RCol, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_Rows", _wrap_RealRange2dC_Rows, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_Cols", _wrap_RealRange2dC_Cols, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_Area", _wrap_RealRange2dC_Area, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_Dilate", _wrap_RealRange2dC_Dilate, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_Erode", _wrap_RealRange2dC_Erode, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_Expand", _wrap_RealRange2dC_Expand, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_Shrink", _wrap_RealRange2dC_Shrink, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_ClipBy", _wrap_RealRange2dC_ClipBy, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_Contains", _wrap_RealRange2dC_Contains, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_RowRange", _wrap_RealRange2dC_RowRange, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_ColRange", _wrap_RealRange2dC_ColRange, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_Range1", _wrap_RealRange2dC_Range1, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_Range2", _wrap_RealRange2dC_Range2, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_Involve", _wrap_RealRange2dC_Involve, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_IsValid", _wrap_RealRange2dC_IsValid, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC___eq__", _wrap_RealRange2dC___eq__, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC___ne__", _wrap_RealRange2dC___ne__, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_IsOverlapping", _wrap_RealRange2dC_IsOverlapping, METH_VARARGS, NULL},
	 { (char *)"delete_RealRange2dC", _wrap_delete_RealRange2dC, METH_VARARGS, NULL},
	 { (char *)"RealRange2dC_swigregister", RealRange2dC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PointSet2dC", _wrap_new_PointSet2dC, METH_VARARGS, NULL},
	 { (char *)"PointSet2dC_Centroid", _wrap_PointSet2dC_Centroid, METH_VARARGS, NULL},
	 { (char *)"PointSet2dC_BoundingRectangle", _wrap_PointSet2dC_BoundingRectangle, METH_VARARGS, NULL},
	 { (char *)"delete_PointSet2dC", _wrap_delete_PointSet2dC, METH_VARARGS, NULL},
	 { (char *)"PointSet2dC_swigregister", PointSet2dC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Polygon2dC", _wrap_new_Polygon2dC, METH_VARARGS, NULL},
	 { (char *)"Polygon2dC_InsLast", _wrap_Polygon2dC_InsLast, METH_VARARGS, NULL},
	 { (char *)"Polygon2dC_Size", _wrap_Polygon2dC_Size, METH_VARARGS, NULL},
	 { (char *)"delete_Polygon2dC", _wrap_delete_Polygon2dC, METH_VARARGS, NULL},
	 { (char *)"Polygon2dC_swigregister", Polygon2dC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ByteRGBArray2dC", _wrap_new_ByteRGBArray2dC, METH_VARARGS, NULL},
	 { (char *)"ByteRGBArray2dC_Frame", _wrap_ByteRGBArray2dC_Frame, METH_VARARGS, NULL},
	 { (char *)"ByteRGBArray2dC_Fill", _wrap_ByteRGBArray2dC_Fill, METH_VARARGS, NULL},
	 { (char *)"ByteRGBArray2dC_Stride", _wrap_ByteRGBArray2dC_Stride, METH_VARARGS, NULL},
	 { (char *)"ByteRGBArray2dC_Access", _wrap_ByteRGBArray2dC_Access, METH_VARARGS, NULL},
	 { (char *)"delete_ByteRGBArray2dC", _wrap_delete_ByteRGBArray2dC, METH_VARARGS, NULL},
	 { (char *)"ByteRGBArray2dC_swigregister", ByteRGBArray2dC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RealRGBArray2dC", _wrap_new_RealRGBArray2dC, METH_VARARGS, NULL},
	 { (char *)"RealRGBArray2dC_Frame", _wrap_RealRGBArray2dC_Frame, METH_VARARGS, NULL},
	 { (char *)"RealRGBArray2dC_Fill", _wrap_RealRGBArray2dC_Fill, METH_VARARGS, NULL},
	 { (char *)"RealRGBArray2dC_Stride", _wrap_RealRGBArray2dC_Stride, METH_VARARGS, NULL},
	 { (char *)"RealRGBArray2dC_Access", _wrap_RealRGBArray2dC_Access, METH_VARARGS, NULL},
	 { (char *)"delete_RealRGBArray2dC", _wrap_delete_RealRGBArray2dC, METH_VARARGS, NULL},
	 { (char *)"RealRGBArray2dC_swigregister", RealRGBArray2dC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RealRGBValueC", _wrap_new_RealRGBValueC, METH_VARARGS, NULL},
	 { (char *)"RealRGBValueC_Red", _wrap_RealRGBValueC_Red, METH_VARARGS, NULL},
	 { (char *)"RealRGBValueC_Green", _wrap_RealRGBValueC_Green, METH_VARARGS, NULL},
	 { (char *)"RealRGBValueC_Blue", _wrap_RealRGBValueC_Blue, METH_VARARGS, NULL},
	 { (char *)"delete_RealRGBValueC", _wrap_delete_RealRGBValueC, METH_VARARGS, NULL},
	 { (char *)"RealRGBValueC_swigregister", RealRGBValueC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ByteRGBValueC", _wrap_new_ByteRGBValueC, METH_VARARGS, NULL},
	 { (char *)"ByteRGBValueC_Red", _wrap_ByteRGBValueC_Red, METH_VARARGS, NULL},
	 { (char *)"ByteRGBValueC_Green", _wrap_ByteRGBValueC_Green, METH_VARARGS, NULL},
	 { (char *)"ByteRGBValueC_Blue", _wrap_ByteRGBValueC_Blue, METH_VARARGS, NULL},
	 { (char *)"delete_ByteRGBValueC", _wrap_delete_ByteRGBValueC, METH_VARARGS, NULL},
	 { (char *)"ByteRGBValueC_swigregister", ByteRGBValueC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ImageByteRGBValueC", _wrap_new_ImageByteRGBValueC, METH_VARARGS, NULL},
	 { (char *)"ImageByteRGBValueC_Rows", _wrap_ImageByteRGBValueC_Rows, METH_VARARGS, NULL},
	 { (char *)"ImageByteRGBValueC_Cols", _wrap_ImageByteRGBValueC_Cols, METH_VARARGS, NULL},
	 { (char *)"delete_ImageByteRGBValueC", _wrap_delete_ImageByteRGBValueC, METH_VARARGS, NULL},
	 { (char *)"ImageByteRGBValueC_swigregister", ImageByteRGBValueC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ByteRGBImageC", _wrap_new_ByteRGBImageC, METH_VARARGS, NULL},
	 { (char *)"ByteRGBImageC_Rows", _wrap_ByteRGBImageC_Rows, METH_VARARGS, NULL},
	 { (char *)"ByteRGBImageC_Cols", _wrap_ByteRGBImageC_Cols, METH_VARARGS, NULL},
	 { (char *)"delete_ByteRGBImageC", _wrap_delete_ByteRGBImageC, METH_VARARGS, NULL},
	 { (char *)"ByteRGBImageC_swigregister", ByteRGBImageC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ImageByteC", _wrap_new_ImageByteC, METH_VARARGS, NULL},
	 { (char *)"ImageByteC_Rows", _wrap_ImageByteC_Rows, METH_VARARGS, NULL},
	 { (char *)"ImageByteC_Cols", _wrap_ImageByteC_Cols, METH_VARARGS, NULL},
	 { (char *)"delete_ImageByteC", _wrap_delete_ImageByteC, METH_VARARGS, NULL},
	 { (char *)"ImageByteC_swigregister", ImageByteC_swigregister, METH_VARARGS, NULL},
	 { (char *)"Save", _wrap_Save, METH_VARARGS, NULL},
	 { (char *)"Load", _wrap_Load, METH_VARARGS, NULL},
	 { (char *)"DrawPolygon", _wrap_DrawPolygon, METH_VARARGS, NULL},
	 { (char *)"new_FontC", _wrap_new_FontC, METH_VARARGS, NULL},
	 { (char *)"FontC_IsValid", _wrap_FontC_IsValid, METH_VARARGS, NULL},
	 { (char *)"FontC_Center", _wrap_FontC_Center, METH_VARARGS, NULL},
	 { (char *)"FontC_Size", _wrap_FontC_Size, METH_VARARGS, NULL},
	 { (char *)"FontC_Count", _wrap_FontC_Count, METH_VARARGS, NULL},
	 { (char *)"delete_FontC", _wrap_delete_FontC, METH_VARARGS, NULL},
	 { (char *)"FontC_swigregister", FontC_swigregister, METH_VARARGS, NULL},
	 { (char *)"DefaultFont", _wrap_DefaultFont, METH_VARARGS, NULL},
	 { (char *)"DrawText", _wrap_DrawText, METH_VARARGS, NULL},
	 { (char *)"DrawTextCenter", _wrap_DrawTextCenter, METH_VARARGS, NULL},
	 { (char *)"new_Affine2dC", _wrap_new_Affine2dC, METH_VARARGS, NULL},
	 { (char *)"delete_Affine2dC", _wrap_delete_Affine2dC, METH_VARARGS, NULL},
	 { (char *)"Affine2dC_swigregister", Affine2dC_swigregister, METH_VARARGS, NULL},
	 { (char *)"DateC_NowUTC", _wrap_DateC_NowUTC, METH_VARARGS, NULL},
	 { (char *)"DateC_NowLocal", _wrap_DateC_NowLocal, METH_VARARGS, NULL},
	 { (char *)"DateC_NowVirtual", _wrap_DateC_NowVirtual, METH_VARARGS, NULL},
	 { (char *)"DateC_TimeZoneOffset", _wrap_DateC_TimeZoneOffset, METH_VARARGS, NULL},
	 { (char *)"new_DateC", _wrap_new_DateC, METH_VARARGS, NULL},
	 { (char *)"DateC_IsLeapYear", _wrap_DateC_IsLeapYear, METH_VARARGS, NULL},
	 { (char *)"DateC_YearToDaysSince1970", _wrap_DateC_YearToDaysSince1970, METH_VARARGS, NULL},
	 { (char *)"DateC_IsValid", _wrap_DateC_IsValid, METH_VARARGS, NULL},
	 { (char *)"DateC_IsZero", _wrap_DateC_IsZero, METH_VARARGS, NULL},
	 { (char *)"DateC_SetInvalid", _wrap_DateC_SetInvalid, METH_VARARGS, NULL},
	 { (char *)"DateC_SetToNow", _wrap_DateC_SetToNow, METH_VARARGS, NULL},
	 { (char *)"DateC_MaxUSeconds", _wrap_DateC_MaxUSeconds, METH_VARARGS, NULL},
	 { (char *)"DateC_Resolution", _wrap_DateC_Resolution, METH_VARARGS, NULL},
	 { (char *)"DateC_NormalisePos", _wrap_DateC_NormalisePos, METH_VARARGS, NULL},
	 { (char *)"DateC_NormaliseNeg", _wrap_DateC_NormaliseNeg, METH_VARARGS, NULL},
	 { (char *)"DateC___eq__", _wrap_DateC___eq__, METH_VARARGS, NULL},
	 { (char *)"DateC___ne__", _wrap_DateC___ne__, METH_VARARGS, NULL},
	 { (char *)"DateC___gt__", _wrap_DateC___gt__, METH_VARARGS, NULL},
	 { (char *)"DateC___lt__", _wrap_DateC___lt__, METH_VARARGS, NULL},
	 { (char *)"DateC___ge__", _wrap_DateC___ge__, METH_VARARGS, NULL},
	 { (char *)"DateC___le__", _wrap_DateC___le__, METH_VARARGS, NULL},
	 { (char *)"DateC___add__", _wrap_DateC___add__, METH_VARARGS, NULL},
	 { (char *)"DateC___sub__", _wrap_DateC___sub__, METH_VARARGS, NULL},
	 { (char *)"DateC___isub__", _wrap_DateC___isub__, METH_VARARGS, NULL},
	 { (char *)"DateC___iadd__", _wrap_DateC___iadd__, METH_VARARGS, NULL},
	 { (char *)"DateC_Text", _wrap_DateC_Text, METH_VARARGS, NULL},
	 { (char *)"DateC_ODBC", _wrap_DateC_ODBC, METH_VARARGS, NULL},
	 { (char *)"DateC_SetODBC", _wrap_DateC_SetODBC, METH_VARARGS, NULL},
	 { (char *)"DateC_CTime", _wrap_DateC_CTime, METH_VARARGS, NULL},
	 { (char *)"DateC_CTimeShort", _wrap_DateC_CTimeShort, METH_VARARGS, NULL},
	 { (char *)"DateC_USeconds", _wrap_DateC_USeconds, METH_VARARGS, NULL},
	 { (char *)"DateC_TotalSeconds", _wrap_DateC_TotalSeconds, METH_VARARGS, NULL},
	 { (char *)"DateC_Double", _wrap_DateC_Double, METH_VARARGS, NULL},
	 { (char *)"DateC_Seconds", _wrap_DateC_Seconds, METH_VARARGS, NULL},
	 { (char *)"DateC_Minute", _wrap_DateC_Minute, METH_VARARGS, NULL},
	 { (char *)"DateC_Hour", _wrap_DateC_Hour, METH_VARARGS, NULL},
	 { (char *)"DateC_Month", _wrap_DateC_Month, METH_VARARGS, NULL},
	 { (char *)"DateC_Year", _wrap_DateC_Year, METH_VARARGS, NULL},
	 { (char *)"DateC_DayInMonth", _wrap_DateC_DayInMonth, METH_VARARGS, NULL},
	 { (char *)"DateC_DayInYear", _wrap_DateC_DayInYear, METH_VARARGS, NULL},
	 { (char *)"DateC_DayInWeek", _wrap_DateC_DayInWeek, METH_VARARGS, NULL},
	 { (char *)"DateC_TextDayInWeek", _wrap_DateC_TextDayInWeek, METH_VARARGS, NULL},
	 { (char *)"DateC_DaylightSaving", _wrap_DateC_DaylightSaving, METH_VARARGS, NULL},
	 { (char *)"DateC_Wait", _wrap_DateC_Wait, METH_VARARGS, NULL},
	 { (char *)"delete_DateC", _wrap_delete_DateC, METH_VARARGS, NULL},
	 { (char *)"DateC_swigregister", DateC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HashInt64Int64C", _wrap_new_HashInt64Int64C, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64C_Lookup", _wrap_HashInt64Int64C_Lookup, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64C_Update", _wrap_HashInt64Int64C_Update, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64C_Insert", _wrap_HashInt64Int64C_Insert, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64C_Access", _wrap_HashInt64Int64C_Access, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64C_AccessCopy", _wrap_HashInt64Int64C_AccessCopy, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64C_Del", _wrap_HashInt64Int64C_Del, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64C_Get", _wrap_HashInt64Int64C_Get, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64C_IsElm", _wrap_HashInt64Int64C_IsElm, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64C_Empty", _wrap_HashInt64Int64C_Empty, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64C_Bins", _wrap_HashInt64Int64C_Bins, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64C_Resize", _wrap_HashInt64Int64C_Resize, METH_VARARGS, NULL},
	 { (char *)"delete_HashInt64Int64C", _wrap_delete_HashInt64Int64C, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64C_swigregister", HashInt64Int64C_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HashInt64Int64IterC", _wrap_new_HashInt64Int64IterC, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64IterC_First", _wrap_HashInt64Int64IterC_First, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64IterC_Next", _wrap_HashInt64Int64IterC_Next, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64IterC_IsElm", _wrap_HashInt64Int64IterC_IsElm, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64IterC_Key", _wrap_HashInt64Int64IterC_Key, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64IterC_Data", _wrap_HashInt64Int64IterC_Data, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64IterC_Del", _wrap_HashInt64Int64IterC_Del, METH_VARARGS, NULL},
	 { (char *)"delete_HashInt64Int64IterC", _wrap_delete_HashInt64Int64IterC, METH_VARARGS, NULL},
	 { (char *)"HashInt64Int64IterC_swigregister", HashInt64Int64IterC_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_tTo_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t(void *x) {
    return (void *)((RavlN::Array2dC<RavlImageN::ByteRGBValueC > *)  ((RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *) x));
}
static void *_p_RavlN__Polygon2dCTo_p_RavlN__PointSet2dC(void *x) {
    return (void *)((RavlN::PointSet2dC *)  ((RavlN::Polygon2dC *) x));
}
static void *_p_RavlN__Polygon2dCTo_p_RavlN__DListCTRavlN__Point2dC_t(void *x) {
    return (void *)((RavlN::DListC<RavlN::Point2dC > *) (RavlN::PointSet2dC *) ((RavlN::Polygon2dC *) x));
}
static void *_p_RavlN__PointSet2dCTo_p_RavlN__DListCTRavlN__Point2dC_t(void *x) {
    return (void *)((RavlN::DListC<RavlN::Point2dC > *)  ((RavlN::PointSet2dC *) x));
}
static void *_p_RavlImageN__ImageCTunsigned_char_tTo_p_RavlN__Array2dCTunsigned_char_t(void *x) {
    return (void *)((RavlN::Array2dC<unsigned char > *)  ((RavlImageN::ImageC<unsigned char > *) x));
}
static swig_type_info _swigt__p_RavlImageN__ByteRGBValueC = {"_p_RavlImageN__ByteRGBValueC", "RavlImageN::ByteRGBValueC *", 0, 0, 0};
static swig_type_info _swigt__p_RavlImageN__FontC = {"_p_RavlImageN__FontC", "RavlImageN::FontC *", 0, 0, 0};
static swig_type_info _swigt__p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t = {"_p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t", "RavlImageN::ImageC<RavlImageN::ByteRGBValueC > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlImageN__ImageCTdouble_t = {"_p_RavlImageN__ImageCTdouble_t", "RavlImageN::ImageC<double > *|RavlImageN::ImageC<RavlN::RealT > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlImageN__ImageCTunsigned_char_t = {"_p_RavlImageN__ImageCTunsigned_char_t", "RavlImageN::ImageC<unsigned char > *|RavlImageN::ImageC<RavlN::ByteT > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlImageN__RealRGBValueC = {"_p_RavlImageN__RealRGBValueC", "RavlImageN::RealRGBValueC *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__Affine2dC = {"_p_RavlN__Affine2dC", "RavlN::Affine2dC *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t = {"_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t", "RavlN::Array2dC<RavlImageN::ByteRGBValueC > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t = {"_p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t", "RavlN::Array2dC<RavlImageN::RealRGBValueC > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__Array2dCTdouble_t = {"_p_RavlN__Array2dCTdouble_t", "RavlN::Array2dC<double > *|RavlN::Array2dC<RavlN::RealT > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__Array2dCTunsigned_char_t = {"_p_RavlN__Array2dCTunsigned_char_t", "RavlN::Array2dC<unsigned char > *|RavlN::Array2dC<RavlN::ByteT > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__DLIterCTRavlN__Point2dC_t = {"_p_RavlN__DLIterCTRavlN__Point2dC_t", "RavlN::DLIterC<RavlN::Point2dC > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__DLIterCTdouble_t = {"_p_RavlN__DLIterCTdouble_t", "RavlN::DLIterC<double > *|RavlN::DLIterC<RavlN::RealT > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__DLIterCTint_t = {"_p_RavlN__DLIterCTint_t", "RavlN::DLIterC<int > *|RavlN::DLIterC<RavlN::IntT > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__DLIterCTlong_long_t = {"_p_RavlN__DLIterCTlong_long_t", "RavlN::DLIterC<long long > *|RavlN::DLIterC<RavlN::Int64T > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__DLIterCTshort_t = {"_p_RavlN__DLIterCTshort_t", "RavlN::DLIterC<short > *|RavlN::DLIterC<RavlN::Int16T > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__DLIterCTunsigned_char_t = {"_p_RavlN__DLIterCTunsigned_char_t", "RavlN::DLIterC<unsigned char > *|RavlN::DLIterC<RavlN::ByteT > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__DLIterCTunsigned_int_t = {"_p_RavlN__DLIterCTunsigned_int_t", "RavlN::DLIterC<unsigned int > *|RavlN::DLIterC<RavlN::UIntT > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__DListCTRavlN__Point2dC_t = {"_p_RavlN__DListCTRavlN__Point2dC_t", "RavlN::DListC<RavlN::Point2dC > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__DListCTdouble_t = {"_p_RavlN__DListCTdouble_t", "RavlN::DListC<double > *|RavlN::DListC<RavlN::RealT > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__DListCTint_t = {"_p_RavlN__DListCTint_t", "RavlN::DListC<int > *|RavlN::DListC<RavlN::IntT > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__DListCTlong_long_t = {"_p_RavlN__DListCTlong_long_t", "RavlN::DListC<long long > *|RavlN::DListC<RavlN::Int64T > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__DListCTshort_t = {"_p_RavlN__DListCTshort_t", "RavlN::DListC<short > *|RavlN::DListC<RavlN::Int16T > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__DListCTunsigned_char_t = {"_p_RavlN__DListCTunsigned_char_t", "RavlN::DListC<unsigned char > *|RavlN::DListC<RavlN::ByteT > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__DListCTunsigned_int_t = {"_p_RavlN__DListCTunsigned_int_t", "RavlN::DListC<unsigned int > *|RavlN::DListC<RavlN::UIntT > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__DateC = {"_p_RavlN__DateC", "RavlN::DateC *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__HashCTlong_long_long_long_t = {"_p_RavlN__HashCTlong_long_long_long_t", "RavlN::HashC<long long,long long > *|RavlN::HashC<RavlN::Int64T,RavlN::Int64T > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__HashIterCTlong_long_long_long_t = {"_p_RavlN__HashIterCTlong_long_long_long_t", "RavlN::HashIterC<long long,long long > *|RavlN::HashIterC<RavlN::Int64T,RavlN::Int64T > *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__Index2dC = {"_p_RavlN__Index2dC", "RavlN::Index2dC *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__IndexC = {"_p_RavlN__IndexC", "RavlN::IndexC *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__IndexRange2dC = {"_p_RavlN__IndexRange2dC", "RavlN::IndexRange2dC *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__Point2dC = {"_p_RavlN__Point2dC", "RavlN::Point2dC *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__PointSet2dC = {"_p_RavlN__PointSet2dC", "RavlN::PointSet2dC *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__Polygon2dC = {"_p_RavlN__Polygon2dC", "RavlN::Polygon2dC *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__RealRange2dC = {"_p_RavlN__RealRange2dC", "RavlN::RealRange2dC *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__RealRangeC = {"_p_RavlN__RealRangeC", "RavlN::RealRangeC *", 0, 0, 0};
static swig_type_info _swigt__p_RavlN__StringC = {"_p_RavlN__StringC", "RavlN::StringC *", 0, 0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *|RavlN::RealT *", 0, 0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|RavlN::FloatT *", 0, 0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|RavlN::IntT *", 0, 0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *|RavlN::Int64T *", 0, 0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|RavlN::Int16T *", 0, 0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|RavlN::ByteT *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|RavlN::UIntT *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *|RavlN::UInt64T *", 0, 0, 0};
static swig_type_info _swigt__ptrdiff_t = {"_ptrdiff_t", "ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__size_t = {"_size_t", "size_t", 0, 0, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__std__size_t = {"_std__size_t", "std::size_t", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_RavlImageN__ByteRGBValueC,
  &_swigt__p_RavlImageN__FontC,
  &_swigt__p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t,
  &_swigt__p_RavlImageN__ImageCTdouble_t,
  &_swigt__p_RavlImageN__ImageCTunsigned_char_t,
  &_swigt__p_RavlImageN__RealRGBValueC,
  &_swigt__p_RavlN__Affine2dC,
  &_swigt__p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t,
  &_swigt__p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t,
  &_swigt__p_RavlN__Array2dCTdouble_t,
  &_swigt__p_RavlN__Array2dCTunsigned_char_t,
  &_swigt__p_RavlN__DLIterCTRavlN__Point2dC_t,
  &_swigt__p_RavlN__DLIterCTdouble_t,
  &_swigt__p_RavlN__DLIterCTint_t,
  &_swigt__p_RavlN__DLIterCTlong_long_t,
  &_swigt__p_RavlN__DLIterCTshort_t,
  &_swigt__p_RavlN__DLIterCTunsigned_char_t,
  &_swigt__p_RavlN__DLIterCTunsigned_int_t,
  &_swigt__p_RavlN__DListCTRavlN__Point2dC_t,
  &_swigt__p_RavlN__DListCTdouble_t,
  &_swigt__p_RavlN__DListCTint_t,
  &_swigt__p_RavlN__DListCTlong_long_t,
  &_swigt__p_RavlN__DListCTshort_t,
  &_swigt__p_RavlN__DListCTunsigned_char_t,
  &_swigt__p_RavlN__DListCTunsigned_int_t,
  &_swigt__p_RavlN__DateC,
  &_swigt__p_RavlN__HashCTlong_long_long_long_t,
  &_swigt__p_RavlN__HashIterCTlong_long_long_long_t,
  &_swigt__p_RavlN__Index2dC,
  &_swigt__p_RavlN__IndexC,
  &_swigt__p_RavlN__IndexRange2dC,
  &_swigt__p_RavlN__Point2dC,
  &_swigt__p_RavlN__PointSet2dC,
  &_swigt__p_RavlN__Polygon2dC,
  &_swigt__p_RavlN__RealRange2dC,
  &_swigt__p_RavlN__RealRangeC,
  &_swigt__p_RavlN__StringC,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_std__ostream,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__ptrdiff_t,
  &_swigt__size_t,
  &_swigt__std__ptrdiff_t,
  &_swigt__std__size_t,
};

static swig_cast_info _swigc__p_RavlImageN__ByteRGBValueC[] = {  {&_swigt__p_RavlImageN__ByteRGBValueC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlImageN__FontC[] = {  {&_swigt__p_RavlImageN__FontC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t[] = {  {&_swigt__p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlImageN__ImageCTdouble_t[] = {  {&_swigt__p_RavlImageN__ImageCTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlImageN__ImageCTunsigned_char_t[] = {  {&_swigt__p_RavlImageN__ImageCTunsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlImageN__RealRGBValueC[] = {  {&_swigt__p_RavlImageN__RealRGBValueC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__Affine2dC[] = {  {&_swigt__p_RavlN__Affine2dC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t[] = {  {&_swigt__p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, 0, 0, 0},  {&_swigt__p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t, _p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_tTo_p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t[] = {  {&_swigt__p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__Array2dCTdouble_t[] = {  {&_swigt__p_RavlN__Array2dCTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__Array2dCTunsigned_char_t[] = {  {&_swigt__p_RavlN__Array2dCTunsigned_char_t, 0, 0, 0},  {&_swigt__p_RavlImageN__ImageCTunsigned_char_t, _p_RavlImageN__ImageCTunsigned_char_tTo_p_RavlN__Array2dCTunsigned_char_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__DLIterCTRavlN__Point2dC_t[] = {  {&_swigt__p_RavlN__DLIterCTRavlN__Point2dC_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__DLIterCTdouble_t[] = {  {&_swigt__p_RavlN__DLIterCTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__DLIterCTint_t[] = {  {&_swigt__p_RavlN__DLIterCTint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__DLIterCTlong_long_t[] = {  {&_swigt__p_RavlN__DLIterCTlong_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__DLIterCTshort_t[] = {  {&_swigt__p_RavlN__DLIterCTshort_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__DLIterCTunsigned_char_t[] = {  {&_swigt__p_RavlN__DLIterCTunsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__DLIterCTunsigned_int_t[] = {  {&_swigt__p_RavlN__DLIterCTunsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__DListCTRavlN__Point2dC_t[] = {  {&_swigt__p_RavlN__Polygon2dC, _p_RavlN__Polygon2dCTo_p_RavlN__DListCTRavlN__Point2dC_t, 0, 0},  {&_swigt__p_RavlN__DListCTRavlN__Point2dC_t, 0, 0, 0},  {&_swigt__p_RavlN__PointSet2dC, _p_RavlN__PointSet2dCTo_p_RavlN__DListCTRavlN__Point2dC_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__DListCTdouble_t[] = {  {&_swigt__p_RavlN__DListCTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__DListCTint_t[] = {  {&_swigt__p_RavlN__DListCTint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__DListCTlong_long_t[] = {  {&_swigt__p_RavlN__DListCTlong_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__DListCTshort_t[] = {  {&_swigt__p_RavlN__DListCTshort_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__DListCTunsigned_char_t[] = {  {&_swigt__p_RavlN__DListCTunsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__DListCTunsigned_int_t[] = {  {&_swigt__p_RavlN__DListCTunsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__DateC[] = {  {&_swigt__p_RavlN__DateC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__HashCTlong_long_long_long_t[] = {  {&_swigt__p_RavlN__HashCTlong_long_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__HashIterCTlong_long_long_long_t[] = {  {&_swigt__p_RavlN__HashIterCTlong_long_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__Index2dC[] = {  {&_swigt__p_RavlN__Index2dC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__IndexC[] = {  {&_swigt__p_RavlN__IndexC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__IndexRange2dC[] = {  {&_swigt__p_RavlN__IndexRange2dC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__Point2dC[] = {  {&_swigt__p_RavlN__Point2dC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__PointSet2dC[] = {  {&_swigt__p_RavlN__Polygon2dC, _p_RavlN__Polygon2dCTo_p_RavlN__PointSet2dC, 0, 0},  {&_swigt__p_RavlN__PointSet2dC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__Polygon2dC[] = {  {&_swigt__p_RavlN__Polygon2dC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__RealRange2dC[] = {  {&_swigt__p_RavlN__RealRange2dC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__RealRangeC[] = {  {&_swigt__p_RavlN__RealRangeC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RavlN__StringC[] = {  {&_swigt__p_RavlN__StringC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__ptrdiff_t[] = {  {&_swigt__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__size_t[] = {  {&_swigt__size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__size_t[] = {  {&_swigt__std__size_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_RavlImageN__ByteRGBValueC,
  _swigc__p_RavlImageN__FontC,
  _swigc__p_RavlImageN__ImageCTRavlImageN__ByteRGBValueC_t,
  _swigc__p_RavlImageN__ImageCTdouble_t,
  _swigc__p_RavlImageN__ImageCTunsigned_char_t,
  _swigc__p_RavlImageN__RealRGBValueC,
  _swigc__p_RavlN__Affine2dC,
  _swigc__p_RavlN__Array2dCTRavlImageN__ByteRGBValueC_t,
  _swigc__p_RavlN__Array2dCTRavlImageN__RealRGBValueC_t,
  _swigc__p_RavlN__Array2dCTdouble_t,
  _swigc__p_RavlN__Array2dCTunsigned_char_t,
  _swigc__p_RavlN__DLIterCTRavlN__Point2dC_t,
  _swigc__p_RavlN__DLIterCTdouble_t,
  _swigc__p_RavlN__DLIterCTint_t,
  _swigc__p_RavlN__DLIterCTlong_long_t,
  _swigc__p_RavlN__DLIterCTshort_t,
  _swigc__p_RavlN__DLIterCTunsigned_char_t,
  _swigc__p_RavlN__DLIterCTunsigned_int_t,
  _swigc__p_RavlN__DListCTRavlN__Point2dC_t,
  _swigc__p_RavlN__DListCTdouble_t,
  _swigc__p_RavlN__DListCTint_t,
  _swigc__p_RavlN__DListCTlong_long_t,
  _swigc__p_RavlN__DListCTshort_t,
  _swigc__p_RavlN__DListCTunsigned_char_t,
  _swigc__p_RavlN__DListCTunsigned_int_t,
  _swigc__p_RavlN__DateC,
  _swigc__p_RavlN__HashCTlong_long_long_long_t,
  _swigc__p_RavlN__HashIterCTlong_long_long_long_t,
  _swigc__p_RavlN__Index2dC,
  _swigc__p_RavlN__IndexC,
  _swigc__p_RavlN__IndexRange2dC,
  _swigc__p_RavlN__Point2dC,
  _swigc__p_RavlN__PointSet2dC,
  _swigc__p_RavlN__Polygon2dC,
  _swigc__p_RavlN__RealRange2dC,
  _swigc__p_RavlN__RealRangeC,
  _swigc__p_RavlN__StringC,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_std__ostream,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__ptrdiff_t,
  _swigc__size_t,
  _swigc__std__ptrdiff_t,
  _swigc__std__size_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif
    
    SWIGRUNTIME void
    SWIG_InitializeModule(void *clientdata) {
        swig_type_info *type, *ret;
        swig_cast_info *cast;
        size_t i;
        swig_module_info *module_head;
        static int init_run = 0;
        
        clientdata = clientdata;
        
        if (init_run) return;
        init_run = 1;
        
        /* Initialize the swig_module */
        swig_module.type_initial = swig_type_initial;
        swig_module.cast_initial = swig_cast_initial;
        
        /* Try and load any already created modules */
        module_head = SWIG_GetModule(clientdata);
        if (module_head) {
            swig_module.next = module_head->next;
            module_head->next = &swig_module;
        } else {
            /* This is the first module loaded */
            swig_module.next = &swig_module;
            SWIG_SetModule(clientdata, &swig_module);
        }
        
        /* Now work on filling in swig_module.types */
        for (i = 0; i < swig_module.size; ++i) {
            type = 0;
            
            /* if there is another module already loaded */
            if (swig_module.next != &swig_module) {
                type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
            }
            if (type) {
                /* Overwrite clientdata field */
                if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
            } else {
                type = swig_module.type_initial[i];
            }
            
            /* Insert casting types */
            cast = swig_module.cast_initial[i];
            while (cast->type) {
                /* Don't need to add information already in the list */
                ret = 0;
                if (swig_module.next != &swig_module) {
                    ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
                }
                if (ret && type == swig_module.type_initial[i]) {
                    cast->type = ret;
                    ret = 0;
                }
                
                if (!ret) {
                    if (type->cast) {
                        type->cast->prev = cast;
                        cast->next = type->cast;
                    }
                    type->cast = cast;
                }
                
                cast++;
            }
            
            /* Set entry in modules->types array equal to the type */
            swig_module.types[i] = type;
        }
        swig_module.types[i] = 0;
    }
    
    /* This function will propagate the clientdata field of type to
    * any new swig_type_info structures that have been added into the list
    * of equivalent types.  It is like calling
    * SWIG_TypeClientData(type, clientdata) a second time.
    */
    SWIGRUNTIME void
    SWIG_PropagateClientData(void) {
        size_t i;
        swig_cast_info *equiv;
        static int init_run = 0;
        
        if (init_run) return;
        init_run = 1;
        
        for (i = 0; i < swig_module.size; i++) {
            if (swig_module.types[i]->clientdata) {
                equiv = swig_module.types[i]->cast;
                while (equiv) {
                    if (!equiv->converter) {
                        if (equiv->type && !equiv->type->clientdata)
                        SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                    }
                    equiv = equiv->next;
                }
            }
        }
    }
    
#ifdef __cplusplus
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)(void);       /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    SWIGINTERN PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    SWIGINTERN int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    SWIGINTERN PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    SWIGINTERN int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    SWIGINTERN PyTypeObject*
    swig_varlink_type(void) {
        static char varlink__doc__[] = "Swig var link object";
        static PyTypeObject varlink_type
#if !defined(__cplusplus)
        ;
        static int type_init = 0;  
        if (!type_init) {
            PyTypeObject tmp
#endif
            = {
                PyObject_HEAD_INIT(&PyType_Type)
                0,                                  /* Number of items in variable part (ob_size) */
                (char *)"swigvarlink",              /* Type name (tp_name) */
                sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
                0,                                  /* Itemsize (tp_itemsize) */
                0,                                  /* Deallocator (tp_dealloc) */ 
                (printfunc) swig_varlink_print,     /* Print (tp_print) */
                (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
                (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
                0,                                  /* tp_compare */
                (reprfunc) swig_varlink_repr,       /* tp_repr */
                0,                                  /* tp_as_number */
                0,                                  /* tp_as_sequence */
                0,                                  /* tp_as_mapping */
                0,                                  /* tp_hash */
                0,                                  /* tp_call */
                0,                                  /* tp_str */
                0,                                  /* tp_getattro */
                0,                                  /* tp_setattro */
                0,                                  /* tp_as_buffer */
                0,                                  /* tp_flags */
                varlink__doc__,                     /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
                0,                                  /* tp_traverse */
                0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
                0,                                  /* tp_richcompare */
                0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
                0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
                0,0,0,0                             /* tp_alloc -> tp_next */
#endif
            };
#if !defined(__cplusplus)
            varlink_type = tmp;
            type_init = 1;
        }
#endif
        return &varlink_type;
    }
    
    /* Create a variable linking object for use later */
    SWIGINTERN PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
        if (result) {
            result->vars = 0;
        }
        return ((PyObject*) result);
    }
    
    SWIGINTERN void 
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v = (swig_varlinkobject *) p;
        swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        if (gv) {
            size_t size = strlen(name)+1;
            gv->name = (char *)malloc(size);
            if (gv->name) {
                strncpy(gv->name,name,size);
                gv->get_attr = get_attr;
                gv->set_attr = set_attr;
                gv->next = v->vars;
            }
        }
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    SWIGINTERN void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; ++i) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    SWIGINTERN void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; ++j) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    if (ndoc) {
                        char *buff = ndoc;
                        void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
                        if (ptr) {
                            strncpy(buff, methods[i].ml_doc, ldoc);
                            buff += ldoc;
                            strncpy(buff, "swig_ptr: ", 10);
                            buff += 10;
                            SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                            methods[i].ml_doc = ndoc;
                        }
                    }
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    PyObject *m, *d;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    SWIG_InitializeModule(0);
    SWIG_InstallConstants(d,swig_const_table);
    
}

