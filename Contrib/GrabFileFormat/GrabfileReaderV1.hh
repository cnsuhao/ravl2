// This file is part of RAVL, Recognition And Vision Library
// Copyright (C) 2001, University of Surrey
// This code may be redistributed under the terms of the GNU Lesser
// General Public License (LGPL). See the lgpl.licence file for details or
// see http://www.gnu.org/copyleft/lesser.html
// file-header-ends-here
#if !defined(RAVL_GRABFILEREADERV1_HEADER)
#define RAVL_GRABFILEREADERV1_HEADER
//! lib=DVS
//! author="Simon Tredwell"
//! docentry="Ravl.API.Images.Video.Video IO.DVS"

#include <fstream>
#include "Ravl/Image/Utilities.hh"
#include "Ravl/Image/GrabfileReader.hh"
#include "Ravl/DArray1d.hh"
#include "Ravl/Buffer.hh"

namespace RavlImageN {

//class DVSBufferC;

//! userlevel=Normal
//: Read the grabfiles generated by the DVS system.
// This class will read Version 1 grabfiles.
class GrabfileReaderV1C : public GrabfileReaderC {
public:
  GrabfileReaderV1C()
    :
    GrabfileReaderC(),
    m_infile(),
    m_video_buffer_size(0),
    m_audio_buffer_size(0)
    //m_mode()
  {
    // Do nothing
  }
  //: Default constuctor

  virtual ~GrabfileReaderV1C();
  //: Destructor

  //==========================================================================//

  // Virtual functions

  virtual bool Open(const char* const filename);  //, CardModeC& mode);
  //: Open file and read file header.

  virtual void Close();
  //: Close file.

  virtual bool Ok() const;
  //: Are there any problems with the IO?

  virtual bool HaveMoreFrames();

  //virtual bool GetNextFrametest(DVSBufferC &buffer);
  virtual bool GetNextFrametest(BufferC<char> &bu,UIntT &vsize,UIntT &asize);
  //: Read the next frame to a buffer.

  //virtual BufferC<char> BufferWithAVSize();

  virtual BufferC<char> GetNextFrame();
  //: Read the next frame to a buffer.

  virtual int Version() const {return m_version_number;}
  //: The version of the reader.

  virtual IntT VideoMode() {return videomode;}

  virtual IntT ColourMode() {return colourmode;}

  virtual ByteFormatT getByteFormat() { 
  return IdToByteFormat((UIntT)byteformat);}

  virtual ColourModeT getColourMode() { 
  return IdToColourMode((UIntT)colourmode);}

  virtual RealT getFrameRate() {return m_frame_rate;}

  virtual IntT getFrameNumber() {return m_frames_loaded;}


protected:
  std::ifstream m_infile;
  //: Stream we are reading from.

  int m_video_buffer_size;
  //: The video buffer size in bytes.

  int m_audio_buffer_size;
  //: The audio buffer size in bytes.

  RealT m_frame_rate;
  //: The frame rate.

  IntT m_number_of_frames;
  //: The number of frames.

  IntT m_frames_loaded;

  //CardModeC m_mode;
  IntT videomode,byteformat,colourmode;
  //: The card mode.

private:
  static const int m_version_number = 1;
};

}

#endif // RAVL_GRABFILEREADERV1_HEADER
