// This file is part of RAVL, Recognition And Vision Library
// Copyright (C) 2001, University of Surrey
// This code may be redistributed under the terms of the GNU Lesser
// General Public License (LGPL). See the lgpl.licence file for details or
// see http://www.gnu.org/copyleft/lesser.html
// file-header-ends-here
#if !defined(RAVL_GRABFILEREADER_HEADER)
#define RAVL_GRABFILEREADER_HEADER
//! lib=DVS
//! author="Simon Tredwell"
//! docentry="Ravl.API.Images.Video.Video IO.DVS"

#include "Ravl/Image/GrabfileCommon.hh"

//#include "Ravl/Image/Types.hh"
//#include "Ravl/Image/CardMode.hh"
#include "Ravl/Image/Utilities.hh"
#include "Ravl/Image/Image.hh"
#include "Ravl/Image/ByteRGBValue.hh"
#include "Ravl/DArray1d.hh"
#include "Ravl/Buffer.hh"

namespace RavlImageN {
using namespace RavlImageN;
//class DVSBufferC;

//! userlevel=Normal
//: Read the grabfiles generated by the DVS system.
// This is the base class for Grabfile readers. It should not contain
// any pure virtual functions except for Version().
class GrabfileReader {
public:
  GrabfileReader()
    :
    m_frame_number(-1),
    m_frames_loaded(0)
  {
    // Do nothing
  }
  //: Default constuctor

  virtual ~GrabfileReader() {}
  //: Destructor

  //==========================================================================//

  typedef GrabfileCommon::frame_number_t frame_number_t;
  //: Type to store the frame number.

  // Virtual functions

  virtual bool Open(const char* const filename) {return false;}  //, CardModeC& mode) {return false;}
  //: Open file and read file header.

  virtual void Close() {}
  //: Close file.

  virtual bool Ok() const {return false;}
  //: Are there any problems with the IO?

  virtual bool HaveMoreFrames() {return false;}
  //: Are there more frames to read?

  //virtual bool GetNextFrametest(DVSBufferC &buffer) {return false;}
  virtual bool GetNextFrametest(BufferC<char> &bu,UIntT &vsize,UIntT &asize) {return false;}
  //: Read the next frame to a buffer.

  virtual BufferC<char> GetNextFrame() {return false;}
  //: Read the next frame to a buffer.

  //virtual BufferC<char> BufferWithAVSize() {return false;}
 
  virtual bool CanGetByFrameNumber() {return false;}
  //: Is the reader able to read a specific frame?
 /*
  virtual bool GetFrameNumber(DVSBufferC &buffer, const int n) {return false;}
  //: Read frame number <tt>n</tt> to the buffer.
*/
  virtual frame_number_t NumberOfFrames() {return 0;}
  //: Returns the number of frames in the sequence.
  // The method will return 0 if the number of frames is unknown.

  virtual int Version() const = 0;
  //: The version of the reader.

  virtual IntT VideoMode() {return -1;}

  virtual IntT ColourMode() {return -1;}

  virtual ByteFormatT getByteFormat() {return ByteFormatT();}

  virtual ColourModeT getColourMode() {return ColourModeT();}

  // Non-virtual functions

  inline frame_number_t FramesLoaded() const { return m_frames_loaded; }
  //: Return the number of frames loaded.

  frame_number_t FrameNumber() const {return m_frame_number;}
  //: The frame number of the most recently loaded frame.

  // Static functions

  static const bool IsGrabfile(const char* const filename);
  //: Check to see whether the file in question is a grabfile.

  static const int FileVersion(const char* const filename);
  //: Get the file version number of a DVS grabfile.
  // This will return the version of the grabfile, or 0 if the file is
  // not a versioned grabfile.

protected:
  static const bool IsGrabfile(std::ifstream& infile);
  //: Checks to see whether the stream points to a grabfile.

  static const int FileVersion(std::ifstream& infile);
  //: Used to retrieve the version number of grabfile stream.
  // This will return the version of the grabfile, or 0 if the file is
  // not a versioned grabfile.

  frame_number_t m_frame_number;
  //: The frame number of the most recently loaded frame.

  frame_number_t m_frames_loaded;
  //: The number of frames loaded.
};

}

#endif // RAVL_GRABFILEREADER_HEADER
