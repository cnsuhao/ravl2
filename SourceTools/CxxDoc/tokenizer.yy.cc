#line 2 "tokenizer.yy.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yytext_ptr -= yy_more_len; \
	yyleng = (int) (yy_cp - yytext_ptr); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 110
#define YY_END_OF_BUFFER 111
static yyconst short int yy_acclist[476] =
    {   0,
      111,  109,  110,    1,  109,  110,  108,  110,   48,  109,
      110,  109,  110,  109,  110,   45,  109,  110,   40,  109,
      110,  109,  110,   70,  109,  110,   71,  109,  110,   43,
      109,  110,   41,  109,  110,   69,  109,  110,   42,  109,
      110,  109,  110,   44,  109,  110,   87,  109,  110,   34,
      109,  110,   68,  109,  110,   38,  109,  110,   37,  109,
      110,   39,  109,  110,   86,  109,  110,   86,  109,  110,
       86,  109,  110,   86,  109,  110,   86,  109,  110,   74,
      109,  110,   75,  109,  110,   47,  109,  110,   86,  109,
      110,   86,  109,  110,   86,  109,  110,   86,  109,  110,

       86,  109,  110,   86,  109,  110,   86,  109,  110,   86,
      109,  110,   86,  109,  110,   86,  109,  110,   86,  109,
      110,   86,  109,  110,   86,  109,  110,   86,  109,  110,
       86,  109,  110,   86,  109,  110,   86,  109,  110,   72,
      109,  110,   46,  109,  110,   73,  109,  110,   36,  109,
      110,  107,  110,  106,  110,  106,  107,  110,  107,  110,
      102,  110,    1,  102,  110,  103,  110,  102,  110,  102,
      110,  107,  110,    1,   67,   92,   98,   63,   64,   56,
       55,   53,   54,   51,  104,   58,   88,   87,   35,   49,
       59,   66,   60,   50,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   57,   65,
      105,   99,  101,  100,   91,   52,   93,   97,   97,   88,
       62,   61,   86,   86,   86,   86,   86,   86,   21,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       80,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   96,   97,   96,   97,   95,   97,   95,   97,
       90,   86,   86,   86,   86,   86,   86,   84,   86,   83,

       86,   86,   86,   86,   11,   86,   86,   86,   86,   86,
       78,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   85,
       86,   86,   94,   95,   97,   94,   95,   97,   89,   86,
       86,   86,   86,   86,   86,    2,   86,    8,   86,   86,
       86,   81,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   79,   86,   86,   86,   86,   86,   16,   86,   86,
       86,    4,   86,   86,   19,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   82,   86,   20,   86,   13,   86,
       29,   86,   86,   86,   86,   86,   86,    5,   86,   77,

       86,    9,   86,    3,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   33,   86,   30,   86,
       86,   86,    7,   86,   86,   86,   12,   86,   86,   86,
       10,   86,   86,   31,   86,   25,   86,   86,   86,   86,
       86,   14,   86,   86,   15,   86,   18,   86,   76,   86,
       32,   86,   26,   86,   86,   86,   86,   17,   86,    6,
       86,   22,   86,   86,   86,   23,   86,   24,   86,   86,
       28,   86,   86,   27,   86
    } ;

static yyconst short int yy_accept[355] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   12,   14,   16,   19,   22,   24,   27,
       30,   33,   36,   39,   42,   44,   47,   50,   53,   56,
       59,   62,   65,   68,   71,   74,   77,   80,   83,   86,
       89,   92,   95,   98,  101,  104,  107,  110,  113,  116,
      119,  122,  125,  128,  131,  134,  137,  140,  143,  146,
      149,  152,  154,  156,  159,  161,  163,  166,  168,  170,
      172,  174,  175,  176,  176,  177,  177,  178,  179,  180,
      181,  181,  181,  182,  183,  184,  185,  185,  186,  186,
      187,  188,  189,  190,  191,  192,  193,  194,  195,  196,

      197,  197,  197,  198,  199,  200,  201,  202,  203,  204,
      205,  206,  207,  208,  209,  210,  211,  212,  213,  214,
      215,  216,  217,  218,  219,  220,  221,  222,  223,  224,
      225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
      235,  235,  235,  236,  236,  236,  237,  238,  238,  239,
      239,  239,  240,  241,  241,  242,  243,  244,  245,  246,
      247,  248,  249,  251,  252,  253,  254,  255,  256,  257,
      258,  259,  260,  261,  263,  264,  265,  266,  267,  268,
      269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
      279,  280,  281,  282,  283,  283,  283,  283,  283,  283,

      285,  287,  287,  289,  289,  291,  291,  292,  293,  294,
      295,  296,  297,  298,  300,  302,  303,  304,  305,  307,
      308,  309,  310,  311,  313,  314,  315,  316,  317,  318,
      319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
      329,  330,  332,  333,  333,  333,  333,  333,  333,  336,
      339,  340,  341,  342,  343,  344,  345,  346,  348,  350,
      351,  352,  354,  355,  356,  357,  358,  359,  360,  361,
      362,  364,  365,  366,  367,  368,  370,  371,  372,  374,
      375,  377,  378,  379,  380,  381,  382,  383,  384,  385,
      387,  389,  391,  393,  394,  395,  396,  397,  398,  400,

      402,  404,  406,  407,  408,  409,  410,  411,  412,  413,
      414,  415,  416,  417,  419,  421,  422,  423,  425,  426,
      427,  429,  430,  431,  433,  434,  436,  438,  439,  440,
      441,  442,  444,  445,  447,  449,  451,  453,  455,  456,
      457,  458,  460,  462,  464,  465,  466,  468,  470,  471,
      473,  474,  476,  476
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   21,
       22,   20,   20,   20,   20,   23,   23,   24,   25,   26,
       27,   28,   29,    1,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   39,   49,   50,   51,   39,   39,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   39,   39,   66,   67,   68,
       69,   70,   39,   71,   72,   73,   74,   75,   76,   77,
       78,   39,   79,   80,   81,   82,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[83] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        4,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    6,    1,    1,    1,    1,    1,    3,    6,
        6,    6,    6,    6,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    3,    1,    1,    7,    5,    5,    6,    6,
        6,    5,    7,    7,    7,    7,    7,    8,    7,    7,
        8,    7,    8,    7,    8,    7,    8,    7,    1,    1,
        1,    1
    } ;

static yyconst short int yy_base[368] =
    {   0,
        0,    0,   80,   82,   85,   95,   88,  102,  295, 1848,
      105, 1848,  251,   86,   90,  246,   91,  208, 1848, 1848,
      233,  232, 1848,   84,  232,   94,  102,  220, 1848,  100,
      216,  101,  110,  147,  114,  120,  151, 1848, 1848, 1848,
      157,  162,  166,  173,  177,  181,  185,  189,  194,  198,
      205,  209,  232,  244,  254,  248,  260, 1848,   76, 1848,
     1848, 1848, 1848, 1848,  217, 1848,  236, 1848,  209,  219,
      156,  243, 1848,  108, 1848,  264, 1848, 1848, 1848, 1848,
      106,  267, 1848, 1848, 1848,  149,  135, 1848,  321, 1848,
      270,  276, 1848,  125, 1848, 1848, 1848,  119,    0,  290,

      112,   92,  313,  337,  317,  347,  352,  363,  367,  371,
      375,  379,  383,  387,  391,  396,  401,  417,  421,  428,
      432,  447,  451,  455,  459,  464,  472,  482,  489,  501,
      510,  514,  518,  525, 1848, 1848, 1848, 1848, 1848, 1848,
      438,    0, 1848,  531,    0, 1848, 1848,  552, 1848,  566,
      571,  582,  541,  598, 1848, 1848,  536,  545,  606,  610,
      614,  618,  627,  631,  637,  641,  645,  649,  655,  659,
      664,  668,  672,  678,  682,  689,  703,  710,  718,  727,
      731,  735,  739,  745,  749,  754,  762,  766,  781,  788,
      792,  799,  813,  817,  822,  869,  602,  921,  823, 1848,

      843,  853, 1848,  880,  890,  841,  889,  925,  914,  939,
      948,  943,  965,  976,  980,  984,  988,  992,  996, 1000,
     1004, 1008, 1013, 1017, 1021, 1025, 1029, 1042, 1046, 1052,
     1062, 1067, 1071, 1080, 1088, 1092, 1098, 1102, 1109, 1120,
     1124, 1128, 1139,  137,    0,  180,    0, 1150, 1848, 1153,
     1169, 1179, 1183, 1187, 1193, 1197, 1201, 1207, 1216, 1220,
     1225, 1229, 1234, 1238, 1242, 1246, 1254, 1262, 1266, 1275,
     1280, 1284, 1289, 1297, 1301, 1308, 1316, 1329, 1320, 1333,
     1339, 1343, 1351, 1358, 1362, 1367, 1371, 1376, 1397, 1401,
     1407, 1411, 1415, 1419, 1424, 1428, 1432, 1436, 1441, 1445,

     1449, 1453, 1462, 1466, 1478, 1482, 1490, 1494, 1498, 1502,
     1509, 1516, 1531, 1526, 1541, 1546, 1553, 1557, 1561, 1565,
     1569, 1573, 1577, 1581, 1586, 1590, 1594, 1598, 1607, 1622,
     1628, 1635, 1639, 1643, 1647, 1651, 1655, 1659, 1663, 1670,
     1674, 1680, 1685, 1689, 1695, 1699,    0,    0, 1703, 1708,
     1712, 1716, 1848, 1759, 1767, 1775, 1783, 1787, 1793, 1799,
     1807, 1811, 1815, 1817, 1823, 1831, 1839
    } ;

static yyconst short int yy_def[368] =
    {   0,
      353,    1,  354,  354,  355,  355,  354,  354,  353,  353,
      353,  353,  353,  356,  353,  353,  353,  357,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  358,  358,  358,  358,  358,  353,  353,  353,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  356,  353,  359,  353,  353,  353,  353,
      357,  360,  353,  353,  353,  353,  353,  353,  361,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  362,  358,

      356,  357,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  353,  353,  353,  353,  353,  353,
      356,  363,  353,  357,  364,  353,  353,  361,  353,  365,
      366,  361,  353,  353,  353,  353,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  356,  356,  357,  357,  365,  353,

      365,  366,  353,  367,  366,  353,  353,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  356,  196,  357,  198,  367,  353,  367,
      353,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,

      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  362,  362,  358,  358,
      358,  358,    0,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353
    } ;

static yyconst short int yy_nxt[1931] =
    {   0,
       10,   11,   12,   11,   11,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       27,   27,   27,   28,   29,   30,   31,   32,   10,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   34,
       35,   33,   33,   33,   36,   37,   33,   33,   33,   33,
       33,   38,   10,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   33,   33,   48,   49,   50,   51,   52,   53,
       33,   54,   55,   56,   57,   33,   33,   33,   58,   59,
       60,   61,   63,   64,   63,   64,   67,   68,   67,   67,
       63,   64,   75,   65,   77,   65,   67,   68,   67,   67,

       79,   71,  135,   69,   63,   64,   72,   88,   72,   72,
       85,   86,   89,   69,   75,   71,  143,   80,   75,   91,
       90,   92,   92,   92,   92,   94,   95,   97,   98,   99,
       99,   99,   99,   99,   99,   99,   99,   70,   76,   99,
       99,   99,   99,   75,   82,  156,   77,   70,   77,   77,
       77,  155,  147,  101,   77,  136,   77,  102,   82,   77,
       76,   77,  146,   77,   76,   77,   99,   99,   99,   99,
       99,   99,   99,   99,  140,  104,   99,   99,   99,   99,
      105,   99,   99,   99,   99,   99,   99,   99,   99,   76,
      143,  103,   99,   99,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,  106,   99,   99,   99,   99,   99,   99,   99,
       99,  139,  138,  107,   99,   99,   99,   99,   99,   99,
       99,   99,   82,  108,  109,  137,  110,   72,  111,   72,
       72,  112,   96,   93,   72,  113,   72,   72,  114,   87,
      116,   99,   99,   99,   99,  117,  118,  115,   84,   83,
       82,  121,  119,   99,   99,   99,   99,   99,   99,   99,
       99,  120,   78,   99,   99,   99,   99,   73,  122,   99,
       99,   99,   99,  141,  141,  141,  144,  144,  144,  153,
      153,  153,  153,   91,  353,   92,   92,   92,   92,  353,

      353,  353,  123,  353,  353,  124,  353,  125,  126,   99,
       99,   99,   99,  353,  128,  131,  127,  129,  353,  132,
      353,  353,  353,  149,  133,  353,  150,  353,  134,  353,
      154,  130,   99,   99,   99,   99,   99,   99,   99,   99,
      142,  353,  353,  145,  151,  353,  152,  353,  152,  353,
      157,  353,  353,  353,  152,  152,   99,   99,   99,   99,
      353,  353,  353,  152,  353,  159,   99,   99,   99,   99,
      158,   99,   99,   99,   99,  353,  353,  160,  353,  353,
      161,  353,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,  353,   99,   99,   99,   99,  353,
       99,   99,   99,   99,  353,  353,  353,  165,  162,  163,
      353,  166,  353,  353,  353,  164,   99,   99,   99,   99,
       99,   99,   99,   99,   75,  353,  167,   99,   99,   99,
       99,   99,   99,   99,   99,  353,  168,  195,  195,  195,
      169,  353,  353,  170,  171,  172,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,  173,   99,   99,   99,   99,  353,  175,  174,
       76,   99,   99,   99,   99,  353,  353,  353,  177,  353,

      176,   99,   99,   99,   99,  353,  353,  178,   99,   99,
       99,   99,  181,  353,  353,  179,  353,  353,  353,  180,
       99,   99,   99,   99,  353,  353,  183,  182,  184,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,  143,  185,  353,   99,   99,   99,   99,  186,  353,
      197,  197,  197,  353,  149,   99,   99,   99,   99,  187,
      153,  153,  153,  153,   99,   99,   99,   99,  200,  353,
      188,  353,  353,  203,  189,  353,  353,  152,  191,  152,
      353,  190,  353,   82,  149,  152,  152,  204,  192,  193,
      194,  201,  353,  201,  152,  209,  205,  353,  205,  201,

      201,  154,  353,  208,  205,  205,  353,  152,  201,  152,
      353,  353,  143,  205,  206,  152,  152,  207,  207,  207,
      207,  246,  246,  246,  152,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,  353,  353,  211,  353,  210,   99,   99,   99,   99,
       99,   99,   99,   99,   82,  212,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,  353,  213,   99,   99,   99,   99,   99,   99,
       99,   99,  353,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,  353,  214,   99,   99,   99,

       99,   99,   99,   99,   99,  353,  218,  215,   99,   99,
       99,   99,  216,  353,  353,  353,  217,  353,  353,  220,
      221,  219,   99,   99,   99,   99,  353,  353,  222,   99,
       99,   99,   99,  353,  353,  353,  223,   99,   99,   99,
       99,  353,  353,  353,  224,  225,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,  353,  226,   99,   99,   99,   99,   99,   99,
       99,   99,  353,   99,   99,   99,   99,  353,  353,  353,
      227,   99,   99,   99,   99,   99,   99,   99,   99,  353,
      353,  353,  228,  353,  353,  353,  230,  353,  353,  229,

       99,   99,   99,   99,  353,  231,  232,   99,   99,   99,
       99,   99,   99,   99,   99,  353,  353,  233,   99,   99,
       99,   99,  234,  235,  353,  200,  237,  353,   75,  353,
      236,  353,   99,   99,   99,   99,   99,   99,   99,   99,
      353,  244,  244,  244,  353,  200,  353,  353,  201,  238,
      201,  353,  239,  353,  353,  203,  201,  201,  353,  240,
      251,  251,  251,  251,  353,  201,  353,  353,  201,  353,
      201,  241,  242,  243,   76,   75,  201,  201,  205,  353,
      205,  353,  249,  353,  353,  201,  205,  205,  245,  245,
      245,  245,  203,  353,  353,  205,  353,  353,  245,  245,

      245,  245,  245,  245,  353,  250,  353,  250,  207,  207,
      207,  207,  353,  250,  250,  205,  353,  205,  353,  353,
      353,   76,  250,  205,  205,  245,  245,  245,  245,  245,
      245,  143,  205,   99,   99,   99,   99,  353,  353,  353,
      247,  247,  247,  247,   99,   99,   99,   99,  353,  353,
      247,  247,  247,  247,  247,  247,  353,  253,   99,   99,
       99,   99,   99,   99,   99,   99,  353,   99,   99,   99,
       99,  353,  353,   82,  353,  256,  353,  247,  247,  247,
      247,  247,  247,  255,   99,   99,   99,   99,  353,  353,
      252,  353,  353,  353,  254,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,  257,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,  353,  353,  353,  258,  353,  260,  353,  353,
      259,   99,   99,   99,   99,   99,   99,   99,   99,  353,
      261,   99,   99,   99,   99,  263,  262,  353,  265,  353,
      264,   99,   99,   99,   99,  267,   99,   99,   99,   99,
       99,   99,   99,   99,  353,  353,  266,  353,  268,   99,

       99,   99,   99,  353,  353,  353,  269,   99,   99,   99,
       99,   99,   99,   99,   99,  353,  270,   99,   99,   99,
       99,   99,   99,   99,   99,  353,  353,  272,   99,   99,
       99,   99,  353,  353,  271,  273,  353,  353,  274,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,  353,  249,  275,  353,  249,  353,  277,   99,   99,
       99,   99,  353,  353,  353,  278,  353,  276,  353,  279,
      353,  280,  353,  353,  353,  250,  353,  250,  250,  353,
      250,  353,  281,  250,  250,  353,  250,  250,  251,  251,
      251,  251,  250,  353,  353,  250,  353,  282,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
      353,  283,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,  353,  285,   99,   99,   99,   99,
      287,  353,  353,  353,  286,   99,   99,   99,   99,   99,
       99,   99,   99,  284,   99,   99,   99,   99,   99,   99,
       99,   99,  288,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,  353,
      353,  353,  289,   99,   99,   99,   99,  353,  353,  353,
      290,   99,   99,   99,   99,   99,   99,   99,   99,  353,
      353,  353,  291,  292,   99,   99,   99,   99,  293,   99,

       99,   99,   99,   99,   99,   99,   99,  294,   99,   99,
       99,   99,  353,  353,  353,  295,   99,   99,   99,   99,
       99,   99,   99,   99,  298,  353,  296,   99,   99,   99,
       99,  353,  353,  299,  297,   99,   99,   99,   99,   99,
       99,   99,   99,  300,  353,  353,  353,  301,   99,   99,
       99,   99,   99,   99,   99,   99,  353,  303,   99,   99,
       99,   99,   99,   99,   99,   99,  353,  353,  353,  302,
       99,   99,   99,   99,  353,  353,  304,   99,   99,   99,
       99,   99,   99,   99,   99,  305,   99,   99,   99,   99,
       99,   99,   99,   99,  353,   99,   99,   99,   99,  307,

      306,  353,  353,  311,  353,  353,  353,  310,  313,  353,
      353,  353,  312,  353,  353,  308,   99,   99,   99,   99,
       99,   99,   99,   99,  353,  309,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,  353,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,  314,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,  353,  353,  353,  315,
      316,   99,   99,   99,   99,   99,   99,   99,   99,  353,
      353,  353,  318,  353,  353,  353,  317,   99,   99,   99,

       99,   99,   99,   99,   99,  353,  353,  353,  319,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,  353,  353,  321,   99,   99,
       99,   99,  353,  353,  320,   99,   99,   99,   99,  353,
      353,  353,  323,  353,  322,   99,   99,   99,   99,  327,
       99,   99,   99,   99,  328,  324,  353,  353,  326,  325,
       99,   99,   99,   99,  330,   99,   99,   99,   99,  353,
      353,  329,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   99,  331,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,  333,  353,  332,  353,  334,   99,   99,   99,   99,
      338,  353,  353,  335,  353,  353,  336,  353,  353,  340,
      339,   99,   99,   99,   99,  353,  337,   99,   99,   99,
       99,  353,  353,  341,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,  353,  353,  342,   99,
       99,   99,   99,   99,   99,   99,   99,  353,  343,   99,

       99,   99,   99,  345,   99,   99,   99,   99,   99,  347,
      348,   99,  344,  346,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,  349,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,  353,
      353,  353,  351,  353,  353,  350,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  352,   62,
       62,   62,   62,   62,   62,   62,   62,   66,   66,   66,
       66,   66,   66,   66,   66,   74,  353,   74,   74,   74,
       74,   74,   74,   81,  353,   81,  353,   81,   81,   81,
       81,  100,  100,  100,  100,   74,   74,   74,  353,  353,

       74,   81,   81,   81,  353,  353,   81,  148,  148,  148,
      148,  148,  148,  148,  148,   99,   99,   99,   99,  196,
      196,  198,  198,  199,  199,  199,  199,  199,  199,  199,
      199,  202,  202,  202,  202,  202,  202,  202,  202,  248,
      248,  248,  248,  248,  248,  248,  248,    9,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,

      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353
    } ;

static yyconst short int yy_chk[1931] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    4,    4,    5,    5,    5,    5,
        7,    7,   14,    3,   15,    4,    6,    6,    6,    6,

       17,    7,   59,    5,    8,    8,   11,   26,   11,   11,
       24,   24,   26,    6,   74,    8,   81,   17,  101,   27,
       26,   27,   27,   27,   27,   30,   30,   32,   32,   33,
       33,   33,   33,   35,   35,   35,   35,    5,   14,   36,
       36,   36,   36,  244,  102,   98,   15,    6,   15,   15,
       15,   94,   87,   34,   15,   59,   15,   34,   81,   15,
       74,   15,   86,   15,  101,   15,   34,   34,   34,   34,
       37,   37,   37,   37,   71,   36,   41,   41,   41,   41,
       37,   42,   42,   42,   42,   43,   43,   43,   43,  244,
      246,   35,   44,   44,   44,   44,   45,   45,   45,   45,

       46,   46,   46,   46,   47,   47,   47,   47,   48,   48,
       48,   48,   41,   49,   49,   49,   49,   50,   50,   50,
       50,   70,   69,   42,   51,   51,   51,   51,   52,   52,
       52,   52,  246,   42,   43,   65,   44,   67,   44,   67,
       67,   44,   31,   28,   72,   45,   72,   72,   46,   25,
       47,   53,   53,   53,   53,   47,   48,   46,   22,   21,
       18,   51,   49,   54,   54,   54,   54,   56,   56,   56,
       56,   50,   16,   55,   55,   55,   55,   13,   52,   57,
       57,   57,   57,   76,   76,   76,   82,   82,   82,   91,
       91,   91,   91,   92,    9,   92,   92,   92,   92,    0,

        0,    0,   53,    0,    0,   53,    0,   54,   54,  100,
      100,  100,  100,    0,   55,   56,   54,   55,    0,   56,
        0,    0,    0,   89,   57,    0,   89,    0,   57,    0,
       91,   55,  103,  103,  103,  103,  105,  105,  105,  105,
       76,    0,    0,   82,   89,    0,   89,    0,   89,    0,
      103,    0,    0,    0,   89,   89,  104,  104,  104,  104,
        0,    0,    0,   89,    0,  105,  106,  106,  106,  106,
      104,  107,  107,  107,  107,    0,    0,  106,    0,    0,
      106,    0,  108,  108,  108,  108,  109,  109,  109,  109,
      110,  110,  110,  110,  111,  111,  111,  111,  112,  112,

      112,  112,  113,  113,  113,  113,  114,  114,  114,  114,
      115,  115,  115,  115,    0,  116,  116,  116,  116,    0,
      117,  117,  117,  117,    0,    0,    0,  110,  107,  108,
        0,  111,    0,    0,    0,  109,  118,  118,  118,  118,
      119,  119,  119,  119,  141,    0,  112,  120,  120,  120,
      120,  121,  121,  121,  121,    0,  113,  141,  141,  141,
      114,    0,    0,  115,  116,  117,  122,  122,  122,  122,
      123,  123,  123,  123,  124,  124,  124,  124,  125,  125,
      125,  125,  118,  126,  126,  126,  126,    0,  119,  118,
      141,  127,  127,  127,  127,    0,    0,    0,  121,    0,

      120,  128,  128,  128,  128,    0,    0,  122,  129,  129,
      129,  129,  124,    0,    0,  123,    0,    0,    0,  123,
      130,  130,  130,  130,    0,    0,  126,  125,  127,  131,
      131,  131,  131,  132,  132,  132,  132,  133,  133,  133,
      133,  144,  127,    0,  134,  134,  134,  134,  128,    0,
      144,  144,  144,    0,  148,  157,  157,  157,  157,  129,
      153,  153,  153,  153,  158,  158,  158,  158,  150,    0,
      130,    0,    0,  151,  131,    0,    0,  148,  132,  148,
        0,  131,    0,  144,  152,  148,  148,  151,  133,  134,
      134,  150,    0,  150,  148,  158,  151,    0,  151,  150,

      150,  153,    0,  157,  151,  151,    0,  152,  150,  152,
        0,    0,  197,  151,  154,  152,  152,  154,  154,  154,
      154,  197,  197,  197,  152,  159,  159,  159,  159,  160,
      160,  160,  160,  161,  161,  161,  161,  162,  162,  162,
      162,    0,    0,  160,    0,  159,  163,  163,  163,  163,
      164,  164,  164,  164,  197,  161,  165,  165,  165,  165,
      166,  166,  166,  166,  167,  167,  167,  167,  168,  168,
      168,  168,    0,  162,  169,  169,  169,  169,  170,  170,
      170,  170,    0,  171,  171,  171,  171,  172,  172,  172,
      172,  173,  173,  173,  173,    0,  164,  174,  174,  174,

      174,  175,  175,  175,  175,    0,  168,  165,  176,  176,
      176,  176,  166,    0,    0,    0,  167,    0,    0,  170,
      171,  169,  177,  177,  177,  177,    0,    0,  172,  178,
      178,  178,  178,    0,    0,    0,  173,  179,  179,  179,
      179,    0,    0,    0,  175,  176,  180,  180,  180,  180,
      181,  181,  181,  181,  182,  182,  182,  182,  183,  183,
      183,  183,    0,  177,  184,  184,  184,  184,  185,  185,
      185,  185,    0,  186,  186,  186,  186,    0,    0,    0,
      178,  187,  187,  187,  187,  188,  188,  188,  188,    0,
        0,    0,  179,    0,    0,    0,  181,    0,    0,  180,

      189,  189,  189,  189,    0,  182,  183,  190,  190,  190,
      190,  191,  191,  191,  191,    0,    0,  184,  192,  192,
      192,  192,  185,  186,    0,  199,  188,    0,  195,    0,
      187,    0,  193,  193,  193,  193,  194,  194,  194,  194,
        0,  195,  195,  195,    0,  201,    0,    0,  199,  189,
      199,    0,  190,    0,    0,  202,  199,  199,    0,  191,
      206,  206,  206,  206,    0,  199,    0,    0,  201,    0,
      201,  192,  193,  194,  195,  196,  201,  201,  202,    0,
      202,    0,  204,    0,    0,  201,  202,  202,  196,  196,
      196,  196,  205,    0,    0,  202,    0,    0,  196,  196,

      196,  196,  196,  196,    0,  204,    0,  204,  207,  207,
      207,  207,    0,  204,  204,  205,    0,  205,    0,    0,
        0,  196,  204,  205,  205,  196,  196,  196,  196,  196,
      196,  198,  205,  209,  209,  209,  209,    0,    0,    0,
      198,  198,  198,  198,  208,  208,  208,  208,    0,    0,
      198,  198,  198,  198,  198,  198,    0,  209,  210,  210,
      210,  210,  212,  212,  212,  212,    0,  211,  211,  211,
      211,    0,    0,  198,    0,  212,    0,  198,  198,  198,
      198,  198,  198,  211,  213,  213,  213,  213,    0,    0,
      208,    0,    0,    0,  210,  214,  214,  214,  214,  215,

      215,  215,  215,  216,  216,  216,  216,  217,  217,  217,
      217,  218,  218,  218,  218,  219,  219,  219,  219,  220,
      220,  220,  220,  221,  221,  221,  221,  222,  222,  222,
      222,  213,  223,  223,  223,  223,  224,  224,  224,  224,
      225,  225,  225,  225,  226,  226,  226,  226,  227,  227,
      227,  227,    0,    0,    0,  216,    0,  218,    0,    0,
      217,  228,  228,  228,  228,  229,  229,  229,  229,    0,
      220,  230,  230,  230,  230,  222,  221,    0,  225,    0,
      223,  231,  231,  231,  231,  227,  232,  232,  232,  232,
      233,  233,  233,  233,    0,    0,  226,    0,  228,  234,

      234,  234,  234,    0,    0,    0,  229,  235,  235,  235,
      235,  236,  236,  236,  236,    0,  230,  237,  237,  237,
      237,  238,  238,  238,  238,    0,    0,  232,  239,  239,
      239,  239,    0,    0,  231,  233,    0,    0,  234,  240,
      240,  240,  240,  241,  241,  241,  241,  242,  242,  242,
      242,    0,  248,  235,    0,  250,    0,  237,  243,  243,
      243,  243,    0,    0,    0,  237,    0,  236,    0,  238,
        0,  239,    0,    0,    0,  248,    0,  248,  250,    0,
      250,    0,  240,  248,  248,    0,  250,  250,  251,  251,
      251,  251,  248,    0,    0,  250,    0,  241,  252,  252,

      252,  252,  253,  253,  253,  253,  254,  254,  254,  254,
        0,  243,  255,  255,  255,  255,  256,  256,  256,  256,
      257,  257,  257,  257,    0,  253,  258,  258,  258,  258,
      255,    0,    0,    0,  254,  259,  259,  259,  259,  260,
      260,  260,  260,  252,  261,  261,  261,  261,  262,  262,
      262,  262,  256,  263,  263,  263,  263,  264,  264,  264,
      264,  265,  265,  265,  265,  266,  266,  266,  266,    0,
        0,    0,  257,  267,  267,  267,  267,    0,    0,    0,
      260,  268,  268,  268,  268,  269,  269,  269,  269,    0,
        0,    0,  261,  263,  270,  270,  270,  270,  264,  271,

      271,  271,  271,  272,  272,  272,  272,  265,  273,  273,
      273,  273,    0,    0,    0,  266,  274,  274,  274,  274,
      275,  275,  275,  275,  269,    0,  267,  276,  276,  276,
      276,    0,    0,  270,  268,  277,  277,  277,  277,  279,
      279,  279,  279,  272,    0,    0,    0,  273,  278,  278,
      278,  278,  280,  280,  280,  280,    0,  275,  281,  281,
      281,  281,  282,  282,  282,  282,    0,    0,    0,  274,
      283,  283,  283,  283,    0,    0,  277,  284,  284,  284,
      284,  285,  285,  285,  285,  278,  286,  286,  286,  286,
      287,  287,  287,  287,    0,  288,  288,  288,  288,  282,

      280,    0,    0,  286,    0,    0,    0,  285,  288,    0,
        0,    0,  287,    0,    0,  283,  289,  289,  289,  289,
      290,  290,  290,  290,    0,  284,  291,  291,  291,  291,
      292,  292,  292,  292,  293,  293,  293,  293,  294,  294,
      294,  294,    0,  295,  295,  295,  295,  296,  296,  296,
      296,  297,  297,  297,  297,  298,  298,  298,  298,  289,
      299,  299,  299,  299,  300,  300,  300,  300,  301,  301,
      301,  301,  302,  302,  302,  302,    0,    0,    0,  294,
      295,  303,  303,  303,  303,  304,  304,  304,  304,    0,
        0,    0,  297,    0,    0,    0,  296,  305,  305,  305,

      305,  306,  306,  306,  306,    0,    0,    0,  298,  307,
      307,  307,  307,  308,  308,  308,  308,  309,  309,  309,
      309,  310,  310,  310,  310,    0,    0,  304,  311,  311,
      311,  311,    0,    0,  303,  312,  312,  312,  312,    0,
        0,    0,  306,    0,  305,  314,  314,  314,  314,  310,
      313,  313,  313,  313,  311,  307,    0,    0,  309,  308,
      315,  315,  315,  315,  313,  316,  316,  316,  316,    0,
        0,  312,  317,  317,  317,  317,  318,  318,  318,  318,
      319,  319,  319,  319,  320,  320,  320,  320,  321,  321,
      321,  321,  322,  322,  322,  322,  323,  323,  323,  323,

      324,  324,  324,  324,  316,  325,  325,  325,  325,  326,
      326,  326,  326,  327,  327,  327,  327,  328,  328,  328,
      328,  319,    0,  317,    0,  320,  329,  329,  329,  329,
      327,    0,    0,  322,    0,    0,  323,    0,    0,  329,
      328,  330,  330,  330,  330,    0,  325,  331,  331,  331,
      331,    0,    0,  330,  332,  332,  332,  332,  333,  333,
      333,  333,  334,  334,  334,  334,  335,  335,  335,  335,
      336,  336,  336,  336,  337,  337,  337,  337,  338,  338,
      338,  338,  339,  339,  339,  339,    0,    0,  331,  340,
      340,  340,  340,  341,  341,  341,  341,    0,  333,  342,

      342,  342,  342,  340,  343,  343,  343,  343,  344,  344,
      344,  344,  339,  341,  345,  345,  345,  345,  346,  346,
      346,  346,  349,  349,  349,  349,  345,  350,  350,  350,
      350,  351,  351,  351,  351,  352,  352,  352,  352,    0,
        0,    0,  349,    0,    0,  346,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  351,  354,
      354,  354,  354,  354,  354,  354,  354,  355,  355,  355,
      355,  355,  355,  355,  355,  356,    0,  356,  356,  356,
      356,  356,  356,  357,    0,  357,    0,  357,  357,  357,
      357,  358,  358,  358,  358,  359,  359,  359,    0,    0,

      359,  360,  360,  360,    0,    0,  360,  361,  361,  361,
      361,  361,  361,  361,  361,  362,  362,  362,  362,  363,
      363,  364,  364,  365,  365,  365,  365,  365,  365,  365,
      365,  366,  366,  366,  366,  366,  366,  366,  366,  367,
      367,  367,  367,  367,  367,  367,  367,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,

      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() (yy_more_flag = 1)
#define YY_MORE_ADJ yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "tokenizer.l"
#define INITIAL 0
#define COMMENT 1
#define PREPARSER 2
#define PPCOMMENT 3

#line 5 "tokenizer.l"

  #include "Ravl/CxxDoc/Object.hh"
  #include "Ravl/CxxDoc/Strings.hh"
   
  #define YYSTYPE RavlCxxDocN::ObjectC

  #include <stdlib.h>
  #include <iostream.h>
  #include "cxx.tab.h"
  #include "FlexLexer.h"

#if RAVL_VISUALCPP_NAMESPACE_BUG  
  using RavlN::StringC;
#endif

  using namespace RavlN;

  class MyLexer : public yyFlexLexer
  {
    public:
    char *gettext() {return yytext;};
  };

  namespace RavlCxxDocN {
    ObjectC hookCommentObj;
  };
  

  extern RavlCxxDocN::ObjectC yylval;
  
  RavlCxxDocN::CommentInfoC comment;
  RavlCxxDocN::CommentInfoC commentLast;
  
  inline void CommentUpdate(RavlCxxDocN::ObjectC &obj,bool setSymb = true,int alineno = 0) 
   {
     if(setSymb)
       obj = RavlCxxDocN::ObjectC(true);
     obj.StartLineno() = alineno;
     obj.EndLineno() = alineno;
     commentLast = comment;
     obj.SetComment(comment);
     comment.Reset();
  }

  inline void CommentUpdate(RavlCxxDocN::ObjectC &obj,const char *name,int alineno = 0) 
   {
     obj = RavlCxxDocN::ObjectC(name);
     obj.StartLineno() = alineno;
     obj.EndLineno() = alineno;
     commentLast = comment;
     obj.SetComment(comment);
     comment.Reset();
  }

  inline void CommentUpdate(RavlCxxDocN::ObjectC &obj,const StringC &name,int alineno = 0) 
   {
     obj = RavlCxxDocN::ObjectC(name);
     obj.StartLineno() = alineno;
     obj.EndLineno() = alineno;
     commentLast = comment;
     obj.SetComment(comment);
     comment.Reset();
  }


#line 1001 "tokenizer.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 91 "tokenizer.l"

    /*==============> Strip whitespace <==============*/
#line 1131 "tokenizer.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_more_len = 0;
		if ( yy_more_flag )
			{
			yy_more_len = yy_c_buf_p - yytext_ptr;
			yy_more_flag = 0;
			}
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 354 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1848 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 93 "tokenizer.l"
{}
	YY_BREAK
/*==============> Special keyword <==============*/
case 2:
YY_RULE_SETUP
#line 97 "tokenizer.l"
{ CommentUpdate(yylval,STR(class) ,yylineno); return SCSPEC; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 98 "tokenizer.l"
{ CommentUpdate(yylval,STR(struct),yylineno); return SCSPEC; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "tokenizer.l"
{ CommentUpdate(yylval,STR(union) ,yylineno); return SCSPEC; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 101 "tokenizer.l"
{ CommentUpdate(yylval,STR(public)   ,yylineno); return PUBLIC;     }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 102 "tokenizer.l"
{ CommentUpdate(yylval,STR(protected),yylineno); return PROTECTED;  }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 103 "tokenizer.l"
{ CommentUpdate(yylval,STR(private)  ,yylineno); return PRIVATE;    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 104 "tokenizer.l"
{ CommentUpdate(yylval,STR(const)    ,yylineno); return CV_QUALIFIER;  }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 105 "tokenizer.l"
{ CommentUpdate(yylval,STR(static)   ,yylineno); return STATIC;     }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 106 "tokenizer.l"
{ CommentUpdate(yylval,STR(virtual)  ,yylineno); return CPVIRTUAL;  }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 108 "tokenizer.l"
{ CommentUpdate(yylval,STR(enum)     ,yylineno); return ENUM;     }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 109 "tokenizer.l"
{ CommentUpdate(yylval,STR(typedef)  ,yylineno); return CPTYPEDEF;  }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 110 "tokenizer.l"
{ CommentUpdate(yylval,STR(friend)   ,yylineno); return CPFRIEND;   }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 111 "tokenizer.l"
{ CommentUpdate(yylval,STR(operator) ,yylineno); return CPOPERATOR; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 112 "tokenizer.l"
{ CommentUpdate(yylval,STR(template) ,yylineno); return TEMPLATE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 113 "tokenizer.l"
{ CommentUpdate(yylval,STR(throw)    ,yylineno); return CPTHROW;    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 114 "tokenizer.l"
{ CommentUpdate(yylval,STR(namespace),yylineno); return NAMESPACE;  }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 115 "tokenizer.l"
{ CommentUpdate(yylval,STR(typename) ,yylineno); return TYPENAME_KEYWORD; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 116 "tokenizer.l"
{ CommentUpdate(yylval,STR(using)    ,yylineno); return USING;    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 117 "tokenizer.l"
{ CommentUpdate(yylval,STR(extern)   ,yylineno); return EXTERN;   }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 118 "tokenizer.l"
{ CommentUpdate(yylval,STR(asm)      ,yylineno); return ASM_KEYWORD;   }
	YY_BREAK
/* ==== Cheat and pick up some compatility macro's ==== */
case 22:
YY_RULE_SETUP
#line 122 "tokenizer.l"
{ CommentUpdate(yylval,yytext,yylineno); return CPTHROW;    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 123 "tokenizer.l"
{ CommentUpdate(yylval,yytext,yylineno); return CPTHROW;    }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 124 "tokenizer.l"
{ CommentUpdate(yylval,yytext,yylineno); return CPTHROW;    }
	YY_BREAK
/*==============> Ignored stuff <==============*/
case 25:
YY_RULE_SETUP
#line 128 "tokenizer.l"
{}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 129 "tokenizer.l"
{}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 130 "tokenizer.l"
{}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 131 "tokenizer.l"
{}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 132 "tokenizer.l"
{}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 133 "tokenizer.l"
{}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 134 "tokenizer.l"
{} /* Temp fix until eliminated. */
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 135 "tokenizer.l"
{}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 136 "tokenizer.l"
{}
	YY_BREAK
/*==============> Normal operators <==============*/
case 34:
YY_RULE_SETUP
#line 140 "tokenizer.l"
{ CommentUpdate(yylval,RavlCxxDocN::strp_Colon     ,yylineno); return ':';}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 141 "tokenizer.l"
{ CommentUpdate(yylval,RavlCxxDocN::strp_ColonColon,yylineno); return CLCL;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 142 "tokenizer.l"
{ CommentUpdate(yylval,RavlCxxDocN::strp_Tilda     ,yylineno); return '~'; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 143 "tokenizer.l"
{ return '='; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 144 "tokenizer.l"
{ return '<'; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 145 "tokenizer.l"
{ return '>'; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 146 "tokenizer.l"
{ return '&'; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 147 "tokenizer.l"
{ return '+'; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 148 "tokenizer.l"
{ return '-'; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 149 "tokenizer.l"
{ return '*'; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 150 "tokenizer.l"
{ return '/'; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 151 "tokenizer.l"
{ return '%'; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 152 "tokenizer.l"
{ return '|'; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 153 "tokenizer.l"
{ return '^'; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 154 "tokenizer.l"
{ return '!'; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 155 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 156 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 157 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 158 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 159 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 160 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 161 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 162 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 163 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 164 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 165 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 166 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 167 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 168 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 169 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 170 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 171 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 172 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 173 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
/*==============> End of Phrase <==============*/
case 68:
YY_RULE_SETUP
#line 176 "tokenizer.l"
{ CommentUpdate(yylval,true,yylineno);  return ';'; }
	YY_BREAK
/*==============> Comma <==============*/
case 69:
YY_RULE_SETUP
#line 179 "tokenizer.l"
{ return ','; }
	YY_BREAK
/*==============> Paranthesis <==============*/
case 70:
YY_RULE_SETUP
#line 182 "tokenizer.l"
{ return '('; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 183 "tokenizer.l"
{ return ')'; }
	YY_BREAK
/*==============> Brackets <==============*/
case 72:
YY_RULE_SETUP
#line 186 "tokenizer.l"
{ CommentUpdate(yylval,true,yylineno); return '{'; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 187 "tokenizer.l"
{ CommentUpdate(yylval,true,yylineno); return '}'; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 188 "tokenizer.l"
{ return '['; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 189 "tokenizer.l"
{ return ']'; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 191 "tokenizer.l"
{ CommentUpdate(yylval,STR(unsigned),yylineno); return TYPEQUAL; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 192 "tokenizer.l"
{ CommentUpdate(yylval,STR(signed)  ,yylineno); return TYPEQUAL; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 193 "tokenizer.l"
{ CommentUpdate(yylval,STR(long)    ,yylineno); return TYPEQUAL; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 194 "tokenizer.l"
{ CommentUpdate(yylval,STR(short)   ,yylineno); return TYPEQUAL; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 195 "tokenizer.l"
{ CommentUpdate(yylval,STR(int)     ,yylineno); return BUILTIN; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 196 "tokenizer.l"
{ CommentUpdate(yylval,STR(float)   ,yylineno); return BUILTIN; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 197 "tokenizer.l"
{ CommentUpdate(yylval,STR(double)  ,yylineno); return BUILTIN; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 198 "tokenizer.l"
{ CommentUpdate(yylval,STR(char)    ,yylineno); return BUILTIN; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 199 "tokenizer.l"
{ CommentUpdate(yylval,STR(bool)    ,yylineno); return BUILTIN; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 200 "tokenizer.l"
{ CommentUpdate(yylval,STR(void)    ,yylineno); return BUILTIN; }
	YY_BREAK
/*==============> Identifiers <==============*/
case 86:
YY_RULE_SETUP
#line 203 "tokenizer.l"
{ CommentUpdate(yylval,yytext,yylineno);
                        return IDENTIFIER; 
                      }
	YY_BREAK
/*==============> Numbers <==============*/
case 87:
YY_RULE_SETUP
#line 209 "tokenizer.l"
{ yylval = StringC(yytext); return CONSTANT; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 210 "tokenizer.l"
{ yylval = StringC(yytext); return CONSTANT; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 211 "tokenizer.l"
{ yylval = StringC(yytext); return CONSTANT; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 212 "tokenizer.l"
{ yylval = StringC(yytext); return CONSTANT; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 214 "tokenizer.l"
{ yylval = StringC(yytext); return CONSTANT; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 215 "tokenizer.l"
{ yylval = StringC(yytext); return STRING;   }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 216 "tokenizer.l"
{ return ELLIPSIS; }
	YY_BREAK
/*==============> Strip // comments <==============*/
case 94:
YY_RULE_SETUP
#line 220 "tokenizer.l"
{ 
                                 CommentUpdate(yylval,&yytext[4],yylineno); 
                                 return DOCSECTION; 
                               }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 224 "tokenizer.l"
{ StringC txt(&(yytext[3]));
                                txt.gsub("\n"," ");
                                if(!comment.Text().IsEmpty()) {
                                  comment.Text() = StringC();
                                  comment.Header() = StringC();
                                }
                                comment.Header() += txt;
                              }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 232 "tokenizer.l"
{ StringC txt(&(yytext[3]));
                                if(txt.length() > 0) {
                                  switch(txt.firstchar()) {
                                  case ' ': {
                                    int at = txt.index('=');
                                    if(at < 0)
                                      break;
                                    StringC varNm = txt.before(at).TopAndTail();
                                    StringC value = txt.after(at).TopAndTail();
                                    value.gsub("\"","");// Now get rid of quotes.
                                    comment.SetVar(varNm,value);
                                    //cout << "Setting var '" << varNm << "' to '" << value << "'\n"; 
                                    break;
                                    }
                                  default: {
                                    int atc = txt.index(':');
                                    if(atc < 0) {
                                      // Error message ?
                                      break;
                                    }
                                    StringC lvarname = txt.before(atc).TopAndTail();
                                    comment.Locals()[lvarname] += txt.after(atc);
                                    //cout << "Setting local var '" << lvarname << "' to '" << comment.Locals()[lvarname] << "'\n"; 
                                    break ;
                                    }
                                  }
                                }
                              }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 260 "tokenizer.l"
{ comment.Text() += &yytext[2]; }
	YY_BREAK
/*==============> Skip preprocessor directives <==============*/
case 98:
YY_RULE_SETUP
#line 263 "tokenizer.l"
{ BEGIN (PREPARSER); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 264 "tokenizer.l"
{ BEGIN (PPCOMMENT); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 265 "tokenizer.l"
{ BEGIN (PREPARSER); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 266 "tokenizer.l"
{}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 267 "tokenizer.l"
{}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 268 "tokenizer.l"
{ BEGIN (INITIAL); }
	YY_BREAK
/*==============> Strip comments <==============*/
case 104:
YY_RULE_SETUP
#line 272 "tokenizer.l"
{ BEGIN (COMMENT);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 273 "tokenizer.l"
{ BEGIN (INITIAL); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 275 "tokenizer.l"
{}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 276 "tokenizer.l"
{}
	YY_BREAK
/*==============> All other characters are ignored <==============*/
case 108:
YY_RULE_SETUP
#line 279 "tokenizer.l"
{}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 280 "tokenizer.l"
{}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 282 "tokenizer.l"
ECHO;
	YY_BREAK
#line 1831 "tokenizer.yy.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(PREPARSER):
			case YY_STATE_EOF(PPCOMMENT):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 354 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 354 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 353);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 282 "tokenizer.l"

