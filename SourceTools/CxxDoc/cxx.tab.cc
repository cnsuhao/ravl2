
/*  A Bison parser, made from cxx.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IDENTIFIER	257
#define	CLCL	258
#define	PUBLIC	259
#define	PROTECTED	260
#define	PRIVATE	261
#define	NAMESPACE	262
#define	STRING	263
#define	CONSTANT	264
#define	CPVIRTUAL	265
#define	ENUM	266
#define	CPTYPEDEF	267
#define	CPFRIEND	268
#define	CPOPERATOR	269
#define	TEMPLATE	270
#define	CPTHROW	271
#define	CPTRY	272
#define	CPCATCH	273
#define	SCSPEC	274
#define	TYPENAME_KEYWORD	275
#define	USING	276
#define	EXTERN	277
#define	ELLIPSIS	278
#define	ASM_KEYWORD	279
#define	CV_QUALIFIER	280
#define	TYPEQUAL	281
#define	BINOP	282
#define	BUILTIN	283
#define	DOCSECTION	284

#line 2 "cxx.y"

#include <stdlib.h>
#include <iostream.h>

#include "Ravl/CxxDoc/CxxElements.hh"
#include "Ravl/CxxDoc/DocNode.hh"
#include "Ravl/CxxDoc/Strings.hh"

#ifndef NDEBUG
#define YYDEBUG 1
#endif

#define YYSTYPE ObjectC 
  
  namespace RavlCxxDocN {
    extern ObjectC hookCommentObj;
    extern ObjectListC results;

  }
  
  using namespace RavlN;
  using namespace RavlCxxDocN;
  
  extern int yyerror(const char *str);
  extern int yylex();

  static int anonCount = 1;

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		544
#define	YYFLAG		-32768
#define	YYNTBASE	53

#define YYTRANSLATE(x) ((unsigned)(x) <= 284 ? yytranslate[x] : 120)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    52,     2,     2,     2,    49,    46,     2,    37,
    39,    48,    44,    32,    45,     2,    47,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    34,    33,    42,
    35,    43,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    38,     2,    41,    51,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    31,    50,    40,    36,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    10,    12,    14,    16,    22,
    28,    30,    33,    35,    38,    43,    45,    47,    51,    56,
    64,    68,    78,    81,    90,    98,   102,   106,   110,   119,
   129,   134,   140,   143,   144,   146,   148,   152,   154,   158,
   160,   163,   165,   169,   173,   175,   176,   178,   180,   183,
   186,   188,   191,   196,   198,   201,   205,   211,   216,   219,
   223,   227,   236,   241,   244,   248,   249,   251,   253,   255,
   259,   263,   268,   272,   274,   278,   281,   284,   287,   296,
   300,   302,   306,   308,   312,   314,   318,   319,   322,   326,
   328,   330,   332,   334,   337,   341,   345,   347,   348,   351,
   354,   357,   360,   362,   365,   366,   368,   370,   373,   377,
   381,   385,   387,   389,   391,   393,   395,   397,   399,   401,
   403,   405,   407,   409,   411,   413,   415,   417,   419,   421,
   423,   425,   427,   429,   431,   433,   435,   437,   439,   441,
   443,   445,   447,   450,   454,   459,   462,   466,   470,   473,
   476,   480,   484,   489,   494,   498,   499,   501,   503,   507,
   511,   516,   518,   522,   525,   532,   535,   536,   539,   542,
   545,   547,   551,   556,   564,   565,   567,   569,   572,   576,
   578,   580,   582,   584,   586,   588,   590,   592,   594,   596,
   598,   600,   602,   604,   606,   608,   610,   612,   614,   616,
   618,   620,   622,   624,   626,   628,   630,   632,   634,   636,
   638,   640,   642,   644,   646,   648,   650,   652,   654,   656,
   659,   662,   667,   671,   674,   676,   678,   680,   682,   684,
   686,   688,   690,   692,   694,   696,   698,   700,   703,   706,
   709,   712,   714,   716,   717,   721,   725,   730,   738,   742,
   749,   758,   763,   770,   775,   776,   778,   780,   784,   785,
   787,   789,   793,   796,   798,   801,   803,   813,   825,   826,
   828,   831,   833,   837,   839,   843,   844,   847,   851,   853,
   855,   857,   859,   861,   863,   865,   867,   869,   871,   873,
   875,   877,   879,   881,   883,   885,   887,   889,   891,   893,
   895,   897,   899,   901,   903,   905,   907,   909,   911,   913,
   915,   917,   919,   921,   923,   925,   927,   929,   931,   933,
   935,   937,   939,   941,   943
};

static const short yyrhs[] = {    55,
     0,    56,     0,    54,    56,     0,     0,    54,     0,   101,
     0,    57,     0,    71,     0,    25,    37,    61,    39,    33,
     0,     8,    64,    31,    55,    40,     0,    68,     0,    70,
    33,     0,    69,     0,     1,    33,     0,     1,    31,   118,
    40,     0,    33,     0,    30,     0,    89,    92,    33,     0,
    13,    89,     3,    33,     0,    13,    89,     3,    38,    88,
    41,    33,     0,    13,   114,    33,     0,    13,    20,    64,
    80,    31,    55,    40,     3,    33,     0,   114,    33,     0,
    13,    12,    64,    31,    58,    40,     3,    33,     0,    12,
    64,    31,    58,    40,    91,    33,     0,    20,     3,    33,
     0,    12,     3,    33,     0,    14,    89,    33,     0,    20,
     3,    80,    31,    84,    40,    91,    33,     0,    26,    20,
    64,    80,    31,    84,    40,    91,    33,     0,    23,    89,
    92,    33,     0,    23,     9,    31,    55,    40,     0,    67,
    33,     0,     0,    59,     0,    60,     0,    59,    32,    60,
     0,     3,     0,     3,    35,    87,     0,     9,     0,    61,
     9,     0,     3,     0,     3,     4,    62,     0,     3,     4,
    63,     0,     3,     0,     0,    62,     0,    63,     0,     4,
    63,     0,     4,    62,     0,     3,     0,    36,     3,     0,
     3,    42,    72,    43,     0,    66,     0,     4,    66,     0,
    67,     4,    66,     0,     8,     3,    35,    65,    33,     0,
    22,     8,    65,    33,     0,    22,    63,     0,    22,     4,
    63,     0,    22,     4,    62,     0,    74,    20,     3,    80,
    31,    84,    40,    33,     0,    74,    20,     3,    33,     0,
    74,   101,     0,    74,    74,   101,     0,     0,    73,     0,
    89,     0,    10,     0,    73,    32,    89,     0,    73,    32,
    10,     0,    16,    42,    75,    43,     0,    16,    42,    43,
     0,    79,     0,    75,    32,    79,     0,    89,    64,     0,
    20,    64,     0,    21,    65,     0,    89,    37,    64,    39,
    37,   111,    39,   115,     0,    74,    20,    64,     0,    77,
     0,    77,    35,    89,     0,    76,     0,    76,    35,    88,
     0,    78,     0,    78,    35,    89,     0,     0,    34,    81,
     0,    81,    32,    83,     0,    83,     0,     5,     0,     7,
     0,     6,     0,    82,    67,     0,    11,    82,    67,     0,
    82,    11,    67,     0,    67,     0,     0,    84,    85,     0,
     6,    34,     0,     7,    34,     0,     5,    34,     0,    56,
     0,    11,   101,     0,     0,    87,     0,    88,     0,    87,
    88,     0,    37,    98,    39,     0,    38,    87,    41,     0,
    31,    87,    40,     0,     3,     0,    10,     0,    26,     0,
    29,     0,     9,     0,    28,     0,    42,     0,    43,     0,
    35,     0,    44,     0,    45,     0,    36,     0,    46,     0,
    47,     0,    48,     0,    49,     0,    50,     0,    51,     0,
    52,     0,    34,     0,     4,     0,    11,     0,    12,     0,
    13,     0,    14,     0,    15,     0,    16,     0,    17,     0,
    21,     0,    22,     0,    90,     0,    26,    90,     0,    26,
    26,    90,     0,    26,    26,    26,    90,     0,    67,    95,
     0,    20,    67,    95,     0,    12,    67,    95,     0,    29,
    95,     0,    27,    95,     0,    27,    29,    95,     0,    27,
    27,    95,     0,    27,    27,    29,    95,     0,    27,    27,
    27,    95,     0,    21,    65,    95,     0,     0,    92,     0,
    94,     0,    92,    32,    94,     0,    38,    86,    41,     0,
    93,    38,    86,    41,     0,     3,     0,     3,    35,    87,
     0,     3,    93,     0,     3,    93,    35,    31,   118,    40,
     0,    35,    87,     0,     0,    95,    48,     0,    95,    46,
     0,    95,    26,     0,    97,     0,    96,    32,    97,     0,
     3,    37,    98,    39,     0,     3,    42,    72,    43,    37,
    98,    39,     0,     0,    99,     0,   100,     0,    99,   100,
     0,    37,    98,    39,     0,     3,     0,    10,     0,    28,
     0,     4,     0,     5,     0,     6,     0,     7,     0,     8,
     0,    26,     0,     9,     0,    11,     0,    12,     0,    13,
     0,    29,     0,    14,     0,    15,     0,    16,     0,    17,
     0,    21,     0,    22,     0,    34,     0,    42,     0,    43,
     0,    35,     0,    44,     0,    45,     0,    36,     0,    46,
     0,    47,     0,    48,     0,    49,     0,    50,     0,    51,
     0,    52,     0,    38,     0,    41,     0,    33,     0,    32,
     0,   103,     0,   102,     0,    14,   102,     0,   107,    33,
     0,   107,    35,    10,    33,     0,    23,   107,    33,     0,
   107,   117,     0,    44,     0,    45,     0,    36,     0,    46,
     0,    47,     0,    48,     0,    49,     0,    50,     0,    51,
     0,    52,     0,    35,     0,    42,     0,    43,     0,    45,
    45,     0,    44,    44,     0,    38,    41,     0,    37,    39,
     0,    28,     0,     3,     0,     0,    42,    72,    43,     0,
    37,   111,    39,     0,    89,    66,   106,   115,     0,    89,
    66,     4,    62,   105,   106,   115,     0,    89,   106,   115,
     0,    89,    15,   104,   105,   106,   115,     0,    89,    66,
     4,    15,   104,   105,   106,   115,     0,    15,    89,   106,
   115,     0,    67,     4,    15,    89,   106,   115,     0,    17,
    37,   109,    39,     0,     0,   110,     0,    67,     0,   110,
    32,    67,     0,     0,   112,     0,   113,     0,   112,    32,
   113,     0,   112,    24,     0,    89,     0,    89,    94,     0,
   114,     0,    89,    37,    48,    64,    39,    37,   111,    39,
   115,     0,    89,    37,    67,     4,    48,     3,    39,    37,
   111,    39,   115,     0,     0,   108,     0,    26,   108,     0,
    26,     0,    31,   118,    40,     0,   116,     0,    34,    96,
   116,     0,     0,   118,   119,     0,    31,   118,    40,     0,
     3,     0,    10,     0,    20,     0,    35,     0,    44,     0,
    45,     0,    36,     0,    46,     0,    47,     0,    48,     0,
    49,     0,    50,     0,    51,     0,    52,     0,    34,     0,
    37,     0,    39,     0,    38,     0,    41,     0,    33,     0,
    32,     0,    42,     0,    43,     0,    28,     0,     4,     0,
     5,     0,     6,     0,     7,     0,     8,     0,    26,     0,
     9,     0,    11,     0,    12,     0,    13,     0,    27,     0,
    29,     0,    14,     0,    15,     0,    16,     0,    17,     0,
    18,     0,    19,     0,    21,     0,    22,     0,    23,     0,
    25,     0,    24,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    79,    84,    85,    88,    89,    92,    93,    94,    95,    96,
   101,   102,   103,   104,   105,   106,   107,   113,   124,   129,
   134,   139,   159,   160,   179,   186,   191,   196,   199,   208,
   221,   222,   223,   227,   228,   230,   231,   233,   234,   239,
   241,   246,   249,   250,   253,   254,   257,   259,   260,   261,
   266,   267,   268,   272,   273,   279,   288,   292,   300,   302,
   303,   311,   318,   323,   327,   337,   338,   341,   342,   343,
   344,   347,   349,   352,   353,   356,   364,   366,   367,   370,
   374,   383,   384,   385,   386,   387,   400,   401,   403,   405,
   407,   408,   409,   411,   415,   420,   425,   431,   432,   434,
   435,   436,   437,   438,   442,   443,   445,   446,   448,   449,
   450,   451,   451,   451,   451,   451,   451,   452,   453,   454,
   455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
   465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
   475,   479,   480,   481,   482,   485,   488,   492,   496,   499,
   502,   505,   508,   511,   514,   519,   520,   522,   523,   525,
   526,   528,   529,   530,   531,   533,   535,   536,   537,   538,
   542,   543,   545,   546,   548,   549,   551,   552,   554,   555,
   555,   555,   556,   556,   556,   556,   556,   556,   557,   557,
   557,   557,   557,   558,   558,   558,   558,   558,   558,   559,
   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
   570,   571,   572,   573,   574,   575,   576,   581,   582,   583,
   589,   593,   597,   602,   608,   609,   610,   611,   612,   613,
   614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
   624,   625,   626,   628,   629,   631,   634,   638,   643,   661,
   664,   669,   672,   678,   680,   681,   683,   684,   686,   687,
   689,   690,   691,   693,   694,   695,   698,   712,   723,   724,
   725,   726,   729,   731,   732,   734,   735,   737,   738,   738,
   738,   739,   739,   739,   739,   739,   739,   739,   739,   739,
   739,   739,   739,   740,   740,   740,   740,   740,   740,   740,
   740,   740,   741,   741,   741,   741,   741,   741,   742,   742,
   742,   742,   742,   742,   743,   743,   743,   743,   743,   743,
   743,   743,   744,   744,   744
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","IDENTIFIER",
"CLCL","PUBLIC","PROTECTED","PRIVATE","NAMESPACE","STRING","CONSTANT","CPVIRTUAL",
"ENUM","CPTYPEDEF","CPFRIEND","CPOPERATOR","TEMPLATE","CPTHROW","CPTRY","CPCATCH",
"SCSPEC","TYPENAME_KEYWORD","USING","EXTERN","ELLIPSIS","ASM_KEYWORD","CV_QUALIFIER",
"TYPEQUAL","BINOP","BUILTIN","DOCSECTION","'{'","','","';'","':'","'='","'~'",
"'('","'['","')'","'}'","']'","'<'","'>'","'+'","'-'","'&'","'/'","'*'","'%'",
"'|'","'^'","'!'","program","extdefs","extdefs_opt","extdef","datadef","enum_name_list_opt",
"enum_name_list","enum_name_elem","string","unqualified_id","qualified_id","maybe_identifier",
"any_id","scope_id","scope_resolved_id","namespace_alias","using_directive",
"using_decl","template_def","template_inst_args_opt","template_inst_args","template_header",
"template_parm_list","parm","template_type_parm","template_template_parm","template_parm",
"class_inherit_list_all","class_inherit_list","class_inherit_mode","class_inherit_def",
"class_lst","class_def","expr_no_commas_list_opt","expr_no_commas_list","expr_no_commas",
"type_id","type_id_bod","var_name_list_opt","var_name_list","var_name_array",
"var_name_elem","type_id_qual","base_class_constructors_list","constructor_expr",
"arg_expr_list_all","arg_expr_list","arg_expr_list_item","fndef","func_decl",
"func_def","operator_types","func_arg_templ_qual","func_arg_prototype","func_prototype",
"func_throw_spec","list_scoped_ids_opt","list_scoped_ids","func_arg_list_all",
"func_arg_list","func_arg_def","function_ptr_def","func_qualifier","func_body",
"func_body_opt_constr","func_body_contents_list","func_body_contents", NULL
};
#endif

static const short yyr1[] = {     0,
    53,    54,    54,    55,    55,    56,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    57,    57,    57,
    57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
    57,    57,    57,    58,    58,    59,    59,    60,    60,    61,
    61,    62,    63,    63,    64,    64,    65,    65,    65,    65,
    66,    66,    66,    67,    67,    67,    68,    69,    70,    70,
    70,    71,    71,    71,    71,    72,    72,    73,    73,    73,
    73,    74,    74,    75,    75,    76,    77,    77,    77,    78,
    79,    79,    79,    79,    79,    79,    80,    80,    81,    81,
    82,    82,    82,    83,    83,    83,    83,    84,    84,    85,
    85,    85,    85,    85,    86,    86,    87,    87,    88,    88,
    88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
    88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
    88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
    88,    89,    89,    89,    89,    90,    90,    90,    90,    90,
    90,    90,    90,    90,    90,    91,    91,    92,    92,    93,
    93,    94,    94,    94,    94,    94,    95,    95,    95,    95,
    96,    96,    97,    97,    98,    98,    99,    99,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   101,   101,   101,
   102,   102,   102,   103,   104,   104,   104,   104,   104,   104,
   104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
   104,   104,   104,   105,   105,   106,   107,   107,   107,   107,
   107,   107,   107,   108,   109,   109,   110,   110,   111,   111,
   112,   112,   112,   113,   113,   113,   114,   114,   115,   115,
   115,   115,   116,   117,   117,   118,   118,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     1,     1,     1,     1,     5,     5,
     1,     2,     1,     2,     4,     1,     1,     3,     4,     7,
     3,     9,     2,     8,     7,     3,     3,     3,     8,     9,
     4,     5,     2,     0,     1,     1,     3,     1,     3,     1,
     2,     1,     3,     3,     1,     0,     1,     1,     2,     2,
     1,     2,     4,     1,     2,     3,     5,     4,     2,     3,
     3,     8,     4,     2,     3,     0,     1,     1,     1,     3,
     3,     4,     3,     1,     3,     2,     2,     2,     8,     3,
     1,     3,     1,     3,     1,     3,     0,     2,     3,     1,
     1,     1,     1,     2,     3,     3,     1,     0,     2,     2,
     2,     2,     1,     2,     0,     1,     1,     2,     3,     3,
     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     2,     3,     4,     2,     3,     3,     2,     2,
     3,     3,     4,     4,     3,     0,     1,     1,     3,     3,
     4,     1,     3,     2,     6,     2,     0,     2,     2,     2,
     1,     3,     4,     7,     0,     1,     1,     2,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
     2,     4,     3,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     2,     2,
     2,     1,     1,     0,     3,     3,     4,     7,     3,     6,
     8,     4,     6,     4,     0,     1,     1,     3,     0,     1,
     1,     3,     2,     1,     2,     1,     9,    11,     0,     1,
     2,     1,     3,     1,     3,     0,     2,     3,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1
};

static const short yydefact[] = {     0,
     0,    51,     0,    46,    46,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   167,   167,    17,    16,     0,
     0,     1,     2,     7,    54,   167,    11,    13,     0,     8,
     0,     0,   142,     6,   219,   218,     0,     0,   276,    14,
    66,    55,    45,     0,    51,     0,   167,    46,    46,     0,
   167,     0,     0,     0,     0,     0,   167,     0,   220,     0,
     0,     0,    51,   167,    42,     0,    47,    48,   167,     0,
     0,     0,    59,     0,     0,     0,     0,    46,     0,   143,
   167,   167,   150,   149,    52,     3,     0,    33,   146,    12,
     0,     0,     0,     0,    64,    51,     0,     0,   259,     0,
     0,   158,   269,   276,   221,     0,     0,   274,   224,    23,
     0,    69,     0,    67,    68,     0,     0,    27,    34,     0,
   148,    51,     0,    87,     0,     0,    21,    28,   259,   269,
    46,     0,    73,     0,     0,    83,    81,    85,    74,    46,
    26,     0,     0,   147,     0,    50,    49,   155,    61,    60,
     0,     0,     0,   223,    40,     0,    87,     0,   144,   167,
   167,   152,   151,   170,   169,   168,     0,    56,    51,    65,
     0,   105,   164,   243,   242,   235,   227,     0,     0,   236,
   237,   225,   226,   228,   229,   230,   231,   232,   233,   234,
   244,   112,   132,   116,   113,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   114,   117,   115,     0,   131,   120,
   123,   175,     0,   118,   119,   121,   122,   124,   125,   126,
   127,   128,   129,   130,   166,   107,    46,   167,   264,     0,
   260,   261,   266,     0,   269,     0,    18,     0,   272,   270,
   249,     0,     0,     0,   171,     0,   279,   303,   304,   305,
   306,   307,   309,   280,   310,   311,   312,   315,   316,   317,
   318,   319,   320,   281,   321,   322,   323,   325,   324,   308,
   313,   302,   314,   276,   299,   298,   293,   282,   285,   294,
   296,   295,    15,   297,   300,   301,   283,   284,   286,   287,
   288,   289,   290,   291,   292,   277,    53,     0,     0,     0,
    38,     0,    35,    36,    34,     0,    19,     0,     0,   252,
    77,   167,    46,     0,    72,     0,     0,     0,    45,    46,
    76,    91,    93,    92,     0,    97,    88,     0,    90,    98,
    43,    44,    58,     0,    31,    41,     0,     0,   145,   154,
   153,     0,    63,     0,   163,     0,   106,     0,   105,   241,
   240,   239,   238,    66,     0,     0,   180,   183,   184,   185,
   186,   187,   189,   181,   190,   191,   192,   194,   195,   196,
   197,   198,   199,   188,   182,   193,   217,   216,   200,   203,
   206,   175,   214,   215,   201,   202,   204,   205,   207,   208,
   209,   210,   211,   212,   213,     0,   176,   177,     0,   108,
     0,     0,   162,   265,   246,   263,     0,    42,     0,   244,
   247,   159,   255,   271,   273,   175,    66,     0,   275,   222,
     0,    71,    70,    57,    10,     0,   156,     0,     0,     0,
     0,    80,    75,    84,    82,    86,     0,     0,     0,     0,
    94,     0,    32,     9,    98,   269,    98,   160,   276,     0,
     0,   269,   111,     0,   109,   178,   110,     0,     0,   262,
   244,     0,   257,     0,   256,     0,     0,   172,   278,    39,
     0,   157,    37,     0,     0,     0,     0,    95,    89,    96,
     0,     0,     0,     0,   156,   103,    99,     0,   253,     0,
     0,   161,   245,   250,   179,   259,     0,     0,   269,   254,
     0,   173,     0,    25,     0,     0,    20,   259,   102,   100,
   101,   104,     0,   156,     0,   165,     0,     0,   269,   248,
   258,   175,    24,     0,     0,    29,     0,    62,   269,   259,
   251,     0,    22,   269,    30,   267,     0,   174,    79,   269,
   268,     0,     0,     0
};

static const short yydefgoto[] = {   542,
    21,    22,    23,    24,   302,   303,   304,   156,    67,    68,
    44,    69,    25,    51,    27,    28,    29,    30,   113,   114,
    31,   135,   136,   137,   138,   139,   143,   327,   328,   329,
   442,   487,   346,   347,   226,    32,    33,   471,   472,   173,
   102,    89,   244,   245,   396,   397,   398,    34,    35,    36,
   191,   355,   103,    37,   240,   464,   465,   230,   231,   232,
    38,   241,   108,   109,   111,   296
};

static const short yypact[] = {  1015,
   316,    18,    89,    33,    36,  1143,  1070,  1162,    63,   163,
   182,   152,  1074,    87,  1173,   344,-32768,-32768,-32768,   127,
   354,-32768,-32768,-32768,-32768,    75,-32768,-32768,   126,-32768,
   460,   128,-32768,-32768,-32768,-32768,   403,   137,-32768,-32768,
   406,-32768,   165,   173,   303,   212,   277,   202,   202,  1192,
   277,    31,   252,   204,   204,  1101,   285,   135,-32768,   367,
   279,   441,   330,   277,   319,   304,-32768,-32768,-32768,   319,
   304,   182,-32768,   302,   139,   323,   350,   202,  1203,-32768,
   376,-32768,   240,   240,-32768,-32768,    27,-32768,   240,-32768,
  1070,   208,  1043,   195,-32768,   282,   145,   825,   270,   232,
   220,-32768,   103,-32768,-32768,   357,   372,-32768,-32768,-32768,
   525,-32768,   342,   363,-32768,   182,   984,-32768,   393,    89,
   240,   308,   368,   381,    24,    71,-32768,-32768,  1162,   103,
   202,   182,-32768,   397,    72,   371,   385,   387,-32768,    34,
-32768,   273,   398,   240,   304,-32768,-32768,   240,-32768,-32768,
   391,   984,   235,-32768,-32768,   112,   381,   301,-32768,-32768,
-32768,   240,   240,-32768,-32768,-32768,  1162,-32768,   355,-32768,
   825,   825,   263,-32768,-32768,-32768,-32768,   389,   390,-32768,
-32768,   395,   396,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   388,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   825,-32768,-32768,
-32768,   213,   825,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   825,-32768,   443,   447,   142,   408,
    20,-32768,-32768,   268,   103,    45,-32768,   417,   438,-32768,
-32768,   575,   233,   262,-32768,   423,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1105,   426,   420,
   430,   429,   434,-32768,   393,   448,-32768,   825,   447,-32768,
-32768,   309,   443,  1132,-32768,   825,  1162,  1162,-32768,   443,
-32768,-32768,-32768,-32768,   386,   277,   450,   299,-32768,-32768,
-32768,-32768,-32768,   445,-32768,-32768,   455,   461,-32768,   240,
   240,   279,-32768,   464,   825,   456,   825,   468,   825,-32768,
-32768,-32768,-32768,   406,   279,   725,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   213,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   452,   213,-32768,   775,-32768,
   462,    50,   294,-32768,-32768,-32768,  1162,-32768,   145,   388,
-32768,-32768,   204,-32768,-32768,   213,   406,   357,-32768,-32768,
   625,-32768,-32768,-32768,-32768,   825,    45,   393,   463,   984,
   465,-32768,-32768,-32768,-32768,-32768,   469,   204,   273,   204,
   277,   877,-32768,-32768,-32768,   103,-32768,-32768,-32768,   466,
   467,   103,-32768,   470,-32768,-32768,-32768,   475,   501,-32768,
   388,   279,   277,   474,   482,   476,   473,-32768,-32768,   825,
   484,   486,-32768,   516,   480,   488,   485,   277,-32768,   277,
   489,   491,   492,  1043,    45,-32768,-32768,   915,-32768,   953,
   675,-32768,-32768,-32768,-32768,  1162,   566,   279,   103,-32768,
   204,-32768,   518,-32768,   622,   702,-32768,  1162,-32768,-32768,
-32768,-32768,   697,    45,   698,-32768,   693,   696,   103,-32768,
   277,   213,-32768,   710,   705,-32768,   712,-32768,   103,  1162,
-32768,   709,-32768,   103,-32768,-32768,   711,-32768,-32768,   103,
-32768,   749,   752,-32768
};

static const short yypgoto[] = {-32768,
-32768,  -103,   -17,-32768,   453,-32768,   327,-32768,   -50,    12,
     6,   -43,    19,    10,-32768,-32768,-32768,-32768,  -335,-32768,
   -19,-32768,-32768,-32768,-32768,   479,   -25,-32768,   432,   325,
   -33,-32768,   431,   -80,  -198,    -6,    11,  -374,     1,-32768,
   -27,    53,-32768,   348,  -369,-32768,   384,   -26,    21,-32768,
   373,  -364,   -55,    25,   544,-32768,-32768,  -293,-32768,   392,
    -3,  -121,   550,-32768,   -96,-32768
};


#define	YYLAST		1239


static const short yytable[] = {    52,
    58,    61,    53,    86,    95,   130,    75,   242,   310,    26,
    46,    93,   454,   300,    47,   146,    57,   225,   451,    64,
   149,    42,    57,    73,    94,    80,   400,    59,   151,     2,
    26,    60,   101,   125,   115,    43,   319,    76,    45,     3,
    57,   167,   134,   406,   235,   462,   466,   403,   334,    94,
   100,   407,     2,   123,   124,   140,   307,    47,    64,    41,
    80,   308,    20,    47,    64,    57,   170,   126,    83,    84,
   320,    20,   299,     2,     3,   153,   100,   147,    87,    98,
    76,   467,   150,   157,    94,    20,    94,    64,   312,   159,
   345,     2,   229,   100,   331,   233,   498,   459,   306,   121,
    57,    64,    57,   314,    62,   168,    20,    88,   228,   431,
   513,    59,   100,   411,   315,    60,   144,   434,   227,   238,
   336,   148,   229,    77,    20,   233,    26,   356,   239,    85,
    96,   338,   399,   162,   163,   309,   311,     2,   168,   527,
    64,    96,    97,   344,   403,   321,   400,   174,   400,    97,
   337,   326,   532,    97,    70,    71,   332,   400,    90,    72,
   342,    26,    98,    20,    99,    63,     3,   128,   339,   110,
    20,   129,   175,    98,    20,   129,    98,   421,   126,   176,
   177,   178,   179,   410,    65,    66,   180,   181,   182,   183,
   184,   185,   186,   187,   188,   189,   190,     2,    20,   116,
   400,   404,   517,   117,   122,     3,     2,     3,   412,    97,
   169,     3,   340,   341,   525,   357,   358,   359,   360,   361,
   362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
    20,   129,   401,   372,   373,   234,   537,    20,   374,    20,
   375,   376,   119,    20,   377,   378,   379,   380,   381,   382,
   383,   236,   237,   384,   385,   386,   387,   388,   389,   390,
   391,   392,   393,   394,   395,   164,   236,   335,   129,   416,
   408,   400,     2,     3,   417,     2,     3,   322,   323,   324,
   120,    54,   409,   325,   127,   165,   446,   166,    87,    55,
    11,   423,   104,   418,   134,    50,    16,   348,    17,   452,
   349,     2,     3,     2,     3,    20,    65,   140,    20,   440,
   435,   436,    54,  -162,  -162,   129,   171,   227,   432,   172,
    55,    11,   145,    41,   489,   437,   475,    16,   171,    17,
   494,   172,   152,   -45,    20,   118,    20,   441,   -45,   -45,
   -78,   -45,   -45,   -78,    41,   470,    39,   115,    40,    41,
   -45,   -78,   491,    -5,     1,   154,     2,     3,   155,   243,
   -87,     4,   141,   142,   148,     5,     6,     7,     8,     9,
    81,    41,    82,    10,    11,    12,    13,   520,    14,    15,
    16,   246,    17,    18,   297,   -87,    19,   343,   142,    20,
   322,   323,   324,    -5,   298,   301,    41,   531,   305,   105,
   229,   107,   160,   233,   161,   316,   499,   536,     2,     3,
   115,   488,   539,   490,   142,   112,   313,    54,   541,   317,
   168,   318,   463,   333,   486,    55,    11,   350,   330,   354,
   351,    50,    16,   104,    17,   105,   106,   107,   352,    26,
   353,    20,   519,     2,     3,   319,   405,   478,   326,   480,
   402,    26,    54,   413,   238,   420,     9,   512,   424,   425,
   131,   132,     2,     3,   426,   428,    50,    16,   427,    17,
   486,    54,   486,    91,     8,     9,    20,    94,   430,    92,
    11,   439,    56,   133,   443,    50,    16,   444,    17,   229,
   455,   445,   233,    57,   447,    20,   448,    26,   449,    26,
   458,   229,   474,   497,   233,   476,   492,   477,   495,   493,
   521,   496,   500,   501,   502,   503,   504,   236,   505,   506,
   507,   508,   509,   229,   510,   511,   233,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   522,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   518,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   415,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   523,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   469,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   524,   274,   275,   276,   277,   278,
   279,   280,   281,   282,   516,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   192,   193,   526,
   528,   529,   530,   194,   195,   196,   197,   198,   199,   200,
   201,   202,   533,   534,   535,   203,   204,   538,   543,   540,
   205,   544,   206,   207,   473,   208,   438,   429,   209,   210,
   211,   212,   213,   479,   453,   468,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   192,   193,   450,
   456,   461,   414,   194,   195,   196,   197,   198,   199,   200,
   201,   202,   433,   419,     0,   203,   204,     0,   460,     0,
   205,     0,   206,   207,     0,   208,     0,     0,   209,   210,
   211,   212,   213,     0,     0,   457,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   192,   193,     0,
     0,     0,     0,   194,   195,   196,   197,   198,   199,   200,
   201,   202,     0,     0,     0,   203,   204,     0,     0,     0,
   205,     0,   206,   207,     0,   208,     0,     0,   209,   210,
   211,   212,   213,     0,     0,     0,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,     1,     0,     2,
     3,   481,   482,   483,     4,     0,     0,   484,     5,     6,
     7,     8,     9,     0,     0,     0,    10,    11,    12,    13,
     0,    14,    15,    16,     0,    17,    18,     0,     0,    19,
     0,     0,    20,     0,     0,     1,   485,     2,     3,   481,
   482,   483,     4,     0,     0,   484,     5,     6,     7,     8,
     9,     0,     0,     0,    10,    11,    12,    13,     0,    14,
    15,    16,     0,    17,    18,     0,     0,    19,     0,     0,
    20,     0,     0,     1,   514,     2,     3,   481,   482,   483,
     4,     0,     0,   484,     5,     6,     7,     8,     9,     0,
     0,     0,    10,    11,    12,    13,     0,    14,    15,    16,
     0,    17,    18,     0,     1,    19,     2,     3,    20,     0,
     0,     4,   515,     0,     0,     5,     6,     7,     8,     9,
     0,     0,     0,    10,    11,    12,    13,     0,    14,    15,
    16,     0,    17,    18,    -4,     1,    19,     2,     3,    20,
     0,     0,     4,    -4,     0,     0,     5,     6,     7,     8,
     9,     0,     0,     0,    10,    11,    12,    13,     0,    14,
    15,    16,     0,    17,    18,     2,     3,    19,     0,     0,
    20,     0,     0,     0,    54,     0,    91,     8,     0,     0,
     0,     0,    55,    11,     0,    56,     0,     0,    50,    16,
     0,    17,     2,     3,     0,     0,     2,     3,    20,     0,
     0,    54,    74,     0,     8,    54,     0,     0,     8,    55,
    11,     0,    56,    55,    11,    50,    16,     0,    17,    50,
    16,     0,    17,     2,     3,    20,     0,     2,     3,    20,
     0,     0,    54,     0,   422,     8,    54,     0,     0,     0,
    55,    11,     0,     0,    55,    11,    50,    16,     0,    17,
    50,    16,     0,    17,     2,     3,    20,     0,     0,     0,
    20,     0,     0,    54,     0,     2,     3,     9,     0,     0,
     0,   131,   132,     0,    48,     0,     0,    50,    16,     0,
    17,     0,    49,    11,     2,     3,     0,    20,    50,    16,
     0,    17,     0,    54,     0,     2,     3,     0,    20,     0,
     0,    55,    11,     0,    54,     0,     0,    50,    16,     0,
    17,     0,    78,    11,     2,     3,     0,    20,    79,    16,
     0,    17,     0,    54,     0,     2,     3,     0,    20,     0,
     0,    55,    11,     0,    54,     0,     0,    79,    16,     0,
    17,     0,    55,    11,     0,     0,     0,    20,   158,    16,
     0,    17,     0,     0,     0,     0,     0,     0,    20
};

static const short yycheck[] = {     6,
     7,     8,     6,    21,    31,    61,    13,   104,   130,     0,
     5,    31,   382,   117,     5,    66,     7,    98,   354,    10,
    71,     3,    13,    12,    31,    15,   225,     7,    72,     3,
    21,     7,    32,     3,    41,     3,     3,    13,     3,     4,
    31,    15,    62,    24,   100,   410,   416,     3,   152,    56,
    32,    32,     3,    48,    49,    62,    33,    48,    49,    42,
    50,    38,    36,    54,    55,    56,    93,    37,    16,    17,
    37,    36,   116,     3,     4,    75,    58,    66,     4,    35,
    56,   417,    71,    78,    91,    36,    93,    78,   132,    79,
   171,     3,    99,    75,   145,    99,   461,    48,   124,    47,
    91,    92,    93,    32,    42,    87,    36,    33,    99,   308,
   485,    91,    94,   235,    43,    91,    64,   316,    48,    17,
     9,    69,   129,    37,    36,   129,   117,   208,    26,     3,
     3,   157,   213,    81,    82,   126,   131,     3,   120,   514,
   131,     3,    15,   169,     3,   140,   345,     3,   347,    15,
    39,   142,   522,    15,     3,     4,   145,   356,    33,     8,
   167,   152,    35,    36,    37,     3,     4,    33,   158,    33,
    36,    37,    28,    35,    36,    37,    35,   274,    37,    35,
    36,    37,    38,   234,     3,     4,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,     3,    36,    35,
   399,   229,   496,    31,     3,     4,     3,     4,   236,    15,
     3,     4,   160,   161,   508,     3,     4,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    36,    37,   227,    21,    22,     4,   530,    36,    26,    36,
    28,    29,    31,    36,    32,    33,    34,    35,    36,    37,
    38,    32,    33,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    26,    32,    33,    37,    37,
     3,   470,     3,     4,    42,     3,     4,     5,     6,     7,
     4,    12,    15,    11,    33,    46,   342,    48,     4,    20,
    21,   298,    31,    32,   314,    26,    27,    35,    29,   355,
    38,     3,     4,     3,     4,    36,     3,   314,    36,    11,
   317,   318,    12,    32,    33,    37,    35,    48,   313,    38,
    20,    21,     4,    42,   446,   320,   430,    27,    35,    29,
   452,    38,    31,    31,    36,    33,    36,   328,    31,    32,
    32,    34,    35,    35,    42,   426,    31,   354,    33,    42,
    43,    43,   449,     0,     1,    33,     3,     4,     9,     3,
    31,     8,    33,    34,   312,    12,    13,    14,    15,    16,
    27,    42,    29,    20,    21,    22,    23,   499,    25,    26,
    27,    10,    29,    30,    43,    31,    33,    33,    34,    36,
     5,     6,     7,    40,    32,     3,    42,   519,    31,    33,
   407,    35,    27,   407,    29,    35,   462,   529,     3,     4,
   417,   445,   534,   447,    34,    10,    20,    12,   540,    35,
   402,    35,   413,    33,   442,    20,    21,    39,    31,    42,
    41,    26,    27,    31,    29,    33,    34,    35,    44,   430,
    45,    36,   498,     3,     4,     3,    39,   438,   439,   440,
     4,   442,    12,    37,    17,    33,    16,   484,    33,    40,
    20,    21,     3,     4,    35,    32,    26,    27,    40,    29,
   488,    12,   490,    14,    15,    16,    36,   484,    31,    20,
    21,    32,    23,    43,    40,    26,    27,    33,    29,   496,
    39,    31,   496,   484,    31,    36,    41,   488,    31,   490,
    39,   508,    40,     3,   508,    41,    41,    39,    39,    43,
   501,    37,    39,    32,    39,    43,    33,    32,     3,    40,
    33,    37,    34,   530,    34,    34,   530,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    37,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    39,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    33,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,     3,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,     3,     4,    33,
    33,    39,    37,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    33,    39,    33,    21,    22,    39,     0,    39,
    26,     0,    28,    29,   428,    31,   325,   305,    34,    35,
    36,    37,    38,   439,    40,   418,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,     3,     4,   349,
   397,   409,   239,     9,    10,    11,    12,    13,    14,    15,
    16,    17,   314,   244,    -1,    21,    22,    -1,   407,    -1,
    26,    -1,    28,    29,    -1,    31,    -1,    -1,    34,    35,
    36,    37,    38,    -1,    -1,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,     3,     4,    -1,
    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    -1,    -1,    -1,    21,    22,    -1,    -1,    -1,
    26,    -1,    28,    29,    -1,    31,    -1,    -1,    34,    35,
    36,    37,    38,    -1,    -1,    -1,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,     1,    -1,     3,
     4,     5,     6,     7,     8,    -1,    -1,    11,    12,    13,
    14,    15,    16,    -1,    -1,    -1,    20,    21,    22,    23,
    -1,    25,    26,    27,    -1,    29,    30,    -1,    -1,    33,
    -1,    -1,    36,    -1,    -1,     1,    40,     3,     4,     5,
     6,     7,     8,    -1,    -1,    11,    12,    13,    14,    15,
    16,    -1,    -1,    -1,    20,    21,    22,    23,    -1,    25,
    26,    27,    -1,    29,    30,    -1,    -1,    33,    -1,    -1,
    36,    -1,    -1,     1,    40,     3,     4,     5,     6,     7,
     8,    -1,    -1,    11,    12,    13,    14,    15,    16,    -1,
    -1,    -1,    20,    21,    22,    23,    -1,    25,    26,    27,
    -1,    29,    30,    -1,     1,    33,     3,     4,    36,    -1,
    -1,     8,    40,    -1,    -1,    12,    13,    14,    15,    16,
    -1,    -1,    -1,    20,    21,    22,    23,    -1,    25,    26,
    27,    -1,    29,    30,     0,     1,    33,     3,     4,    36,
    -1,    -1,     8,    40,    -1,    -1,    12,    13,    14,    15,
    16,    -1,    -1,    -1,    20,    21,    22,    23,    -1,    25,
    26,    27,    -1,    29,    30,     3,     4,    33,    -1,    -1,
    36,    -1,    -1,    -1,    12,    -1,    14,    15,    -1,    -1,
    -1,    -1,    20,    21,    -1,    23,    -1,    -1,    26,    27,
    -1,    29,     3,     4,    -1,    -1,     3,     4,    36,    -1,
    -1,    12,     9,    -1,    15,    12,    -1,    -1,    15,    20,
    21,    -1,    23,    20,    21,    26,    27,    -1,    29,    26,
    27,    -1,    29,     3,     4,    36,    -1,     3,     4,    36,
    -1,    -1,    12,    -1,    10,    15,    12,    -1,    -1,    -1,
    20,    21,    -1,    -1,    20,    21,    26,    27,    -1,    29,
    26,    27,    -1,    29,     3,     4,    36,    -1,    -1,    -1,
    36,    -1,    -1,    12,    -1,     3,     4,    16,    -1,    -1,
    -1,    20,    21,    -1,    12,    -1,    -1,    26,    27,    -1,
    29,    -1,    20,    21,     3,     4,    -1,    36,    26,    27,
    -1,    29,    -1,    12,    -1,     3,     4,    -1,    36,    -1,
    -1,    20,    21,    -1,    12,    -1,    -1,    26,    27,    -1,
    29,    -1,    20,    21,     3,     4,    -1,    36,    26,    27,
    -1,    29,    -1,    12,    -1,     3,     4,    -1,    36,    -1,
    -1,    20,    21,    -1,    12,    -1,    -1,    26,    27,    -1,
    29,    -1,    20,    21,    -1,    -1,    -1,    36,    26,    27,
    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    36
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 79 "cxx.y"
{ results = yyvsp[0]; ;
    break;}
case 2:
#line 84 "cxx.y"
{ ScopeC ol(STR(extdefs)); yyval=ol; ol.Append(yyvsp[0]);  ;
    break;}
case 3:
#line 85 "cxx.y"
{ ObjectListC ol(yyvsp[-1]); yyval=yyvsp[-1]; ol.Append(yyvsp[0]);  ;
    break;}
case 4:
#line 88 "cxx.y"
{ ScopeC ol(STR(extdefs)); yyval=ol; ;
    break;}
case 5:
#line 89 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 6:
#line 92 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 7:
#line 93 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 8:
#line 94 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 9:
#line 95 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 10:
#line 96 "cxx.y"
{ yyval=ScopeC(yyvsp[-3].Name(),yyvsp[-1]); 
							   yyval.UpdateComment(yyvsp[-4].Comment());
    	                                                   yyval.SetVar(STR(dectype),STR(definition));
                                                           yyval.SetVar(STR(storageType),STR(namespace));
	                                                 ;
    break;}
case 11:
#line 101 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 12:
#line 102 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 13:
#line 103 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 14:
#line 104 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 15:
#line 105 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 16:
#line 106 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 17:
#line 107 "cxx.y"
{ 
	                     yyval=DocNodeC(StringC("anon?") + StringC(anonCount++)); 
          		     hookCommentObj = yyval;
                           ;
    break;}
case 18:
#line 114 "cxx.y"
{ ObjectListC ol(yyvsp[-1]);
						   ObjectListC ret(STR(varList),true);
						   for(DLIterC<ObjectC> it(ol.List());it.IsElm();it.Next()) {
						     VariableC avar(yyvsp[-2],it.Data().Name());
						     ret.Append(avar);
						   }
          				           hookCommentObj = ret; 
                                                   yyval.SetupLineNos(yyvsp[-2],yyvsp[0]);
						   yyval=ret;
                                                 ;
    break;}
case 19:
#line 124 "cxx.y"
{ yyval=TypedefC(yyvsp[-1].Name(),yyvsp[-2]);
                                                   yyval.SetupLineNos(yyvsp[-3],yyvsp[0]);
          				           hookCommentObj = yyval; 
                                                 ;
    break;}
case 20:
#line 129 "cxx.y"
{ yyvsp[-5].SetVar(STR(array),STR(1)); 
                                                               yyval=TypedefC(yyvsp[-4].Name(),yyvsp[-5]); 
          				                       hookCommentObj = yyval; 
                                                               yyval.SetupLineNos(yyvsp[-6],yyvsp[0]);
                                                             ;
    break;}
case 21:
#line 134 "cxx.y"
{ DataTypeC dt(yyvsp[-1]);
                                                               yyval=TypedefC(dt.Alias(),dt);
                                                               yyval.SetupLineNos(yyvsp[-2],yyvsp[0]);
          				                       hookCommentObj = yyval; 
                                                             ;
    break;}
case 22:
#line 140 "cxx.y"
{ 
							       StringC className;
							       if(yyvsp[-6].IsValid())
								 className = yyvsp[-6].Name();
							       else 
								 className = StringC("anon?") + StringC(anonCount++);
							       ClassC aclass(className,yyvsp[-3],yyvsp[-5]);
                                                               aclass.SetVar(STR(dectype),STR(definition));
                                                               aclass.SetVar(STR(storageType),yyvsp[-7].Name());
							       TypedefC td(yyvsp[-2].Name(),DataTypeC(className));
							       td.SetDefinition(aclass);
							       ObjectListC ret(STR(x),true);
							       ret.Append(td);
							       if(yyvsp[-6].IsValid())
								 ret.Append(aclass);
                                                               yyval.SetupLineNos(yyvsp[-8],yyvsp[0]);
							       yyval = ret;
          				                       hookCommentObj = yyval;
							     ;
    break;}
case 23:
#line 159 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 24:
#line 160 "cxx.y"
{ 
							       StringC enumName;
							       if(yyvsp[-5].IsValid())
								 enumName = yyvsp[-5].Name();
							       else 
								 enumName = StringC("anon_enum?") + StringC(anonCount++);
                                                               EnumC anEnum(enumName,yyvsp[-3]);
                                                               anEnum.SetVar(STR(dectype),STR(definition));
                                                               anEnum.SetVar(STR(storageType),STR(enum));
							       TypedefC td(yyvsp[-1].Name(),DataTypeC(enumName));
							       td.SetDefinition(anEnum);
							       ObjectListC ret("x",true);
							       ret.Append(td);
							       if(yyvsp[-5].IsValid())
								 ret.Append(anEnum);
                                                               yyval.SetupLineNos(yyvsp[-7],yyvsp[0]);
							       yyval = ret;
          				                       hookCommentObj = yyval;
                                                             ;
    break;}
case 25:
#line 179 "cxx.y"
{
                                                  if(yyvsp[-5].IsValid())
						    yyval=EnumC(yyvsp[-5].Name(),yyvsp[-3]);
						  else
						    yyval=EnumC(StringC("anon_enum?") + StringC(anonCount++),yyvsp[-3]);
						  hookCommentObj = yyval;
                                                ;
    break;}
case 26:
#line 186 "cxx.y"
{ yyval=ClassC(yyvsp[-1].Name());
						  yyval.UpdateComment(yyvsp[-2].Comment()); 
						  yyval.SetVar(STR(storageType),yyvsp[-2].Name());
                                                  yyval.SetVar(STR(dectype),STR(forward));
                                                ;
    break;}
case 27:
#line 191 "cxx.y"
{ yyval=EnumC(yyvsp[-1].Name());
						  yyval.UpdateComment(yyvsp[-2].Comment()); 
						  yyval.SetVar(STR(storageType),STR(enum));
                                                  yyval.SetVar(STR(dectype),STR(forward));
                                                ;
    break;}
case 28:
#line 196 "cxx.y"
{ yyval=yyvsp[-1]; 
                                                  yyval.SetVar(STR(dectype),STR(friend));  
                                                ;
    break;}
case 29:
#line 200 "cxx.y"
{ 
						  ClassC newClass(yyvsp[-6].Name(),yyvsp[-3],yyvsp[-5]);
						  yyval = newClass;
						  yyval.UpdateComment(yyvsp[-7].Comment()); 
						  yyval.SetupLineNos(yyvsp[-7],yyvsp[0]);
						  newClass.SetVar(STR(dectype),STR(definition));
						  newClass.SetVar(STR(storageType),yyvsp[-7].Name());
						;
    break;}
case 30:
#line 208 "cxx.y"
{
                                                  StringC nname;
						  if(yyvsp[-6].IsValid())
						    nname = yyvsp[-6].Name();
						  else
						    nname = StringC("anon_struct?") + StringC(anonCount++);
						  ClassC newClass(nname,yyvsp[-3],yyvsp[-5]);
						  yyval = newClass;
						  yyval.UpdateComment(yyvsp[-8].Comment()); 
						  yyval.SetupLineNos(yyvsp[-8],yyvsp[-1]);
						  newClass.SetVar(STR(dectype),STR(definition));
						  newClass.SetVar(STR(storageType),yyvsp[-7].Name());
                                                ;
    break;}
case 31:
#line 221 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 32:
#line 222 "cxx.y"
{ yyval = yyvsp[-1]; ObjectListC ol(yyvsp[-1]); ol.SetWrapper(true); ;
    break;}
case 33:
#line 223 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 34:
#line 227 "cxx.y"
{ ObjectListC ol(STR(EnumNameList)); yyval=ol; ;
    break;}
case 35:
#line 228 "cxx.y"
{ yyval=yyvsp[0];
    break;}
case 36:
#line 230 "cxx.y"
{ ObjectListC ol(STR(VarNameList)); ol.Append(yyvsp[0]); yyval = ol;  ;
    break;}
case 37:
#line 231 "cxx.y"
{ ObjectListC ol(yyvsp[-2]); ol.Append(yyvsp[0]); yyval = ol; ;
    break;}
case 38:
#line 233 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 39:
#line 234 "cxx.y"
{ yyval = yyvsp[-2].Name() +  StringC(" = ") + yyvsp[0].Name(); ;
    break;}
case 42:
#line 246 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 43:
#line 249 "cxx.y"
{ yyval = yyvsp[-2].Name() + strp_ColonColon + yyvsp[0].Name(); ;
    break;}
case 44:
#line 250 "cxx.y"
{ yyval = yyvsp[-2].Name() + strp_ColonColon + yyvsp[0].Name(); ;
    break;}
case 45:
#line 253 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 46:
#line 254 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 47:
#line 258 "cxx.y"
{ yyval = yyvsp[0]; ;
    break;}
case 48:
#line 259 "cxx.y"
{ yyval = yyvsp[0]; ;
    break;}
case 49:
#line 260 "cxx.y"
{ yyval=ObjectC(strp_ColonColon + yyvsp[0].Name()); ;
    break;}
case 50:
#line 261 "cxx.y"
{ yyval=ObjectC(strp_ColonColon + yyvsp[0].Name()); ;
    break;}
case 51:
#line 266 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 52:
#line 267 "cxx.y"
{ yyval = ObjectC(StringC("~") + yyvsp[0].Name()); yyval.CopyLineNo(yyvsp[0]); ;
    break;}
case 53:
#line 268 "cxx.y"
{ yyval = ObjectTemplateC(yyvsp[-3].Name(),yyvsp[-1]); ;
    break;}
case 54:
#line 272 "cxx.y"
{ ObjectListC ol(yyvsp[0].Name()); ol.Append(yyvsp[0]); yyval=ol; yyval.CopyLineNo(yyvsp[0]); ;
    break;}
case 55:
#line 273 "cxx.y"
{ ObjectListC ol(yyvsp[0].Name()); 
                                       ObjectC newun(strp_ColonColon);
                                       ol.Append(newun);
				       ol.Append(yyvsp[0]);
				       yyval = ol;
                                     ;
    break;}
case 56:
#line 279 "cxx.y"
{ ObjectListC ol(yyvsp[-2]); 
				       ol.Append(yyvsp[0]);
				       ol.Name() = yyvsp[0].Name();  // Give name of last component to list.
				       yyval = ol;
                                     ;
    break;}
case 58:
#line 293 "cxx.y"
{
	    InheritC inh(SAPublic,true);
	    inh.SetScopeDef(yyvsp[-1]);  
	    yyval = inh;
	  ;
    break;}
case 62:
#line 313 "cxx.y"
{ yyval =  ClassTemplateC(yyvsp[-5].Name(),yyvsp[-2],yyvsp[-4],yyvsp[-7]);
						  yyval.SetVar(STR(dectype),STR(definition));
						  yyval.SetVar(STR(storageType),yyvsp[-6].Name());
						  yyval.UpdateComment(yyvsp[-7].Comment());
						;
    break;}
case 63:
#line 318 "cxx.y"
{ yyval = ClassTemplateC(yyvsp[-1].Name(),yyvsp[-3]); 
						    yyval.SetVar(STR(dectype),STR(forward));
						    yyval.SetVar(STR(storageType),yyvsp[-2].Name());
						    yyval.UpdateComment(yyvsp[-3].Comment());
                                                  ;
    break;}
case 64:
#line 323 "cxx.y"
{ yyval = yyvsp[0];
                                                    ObjectListC ol1(yyvsp[-1]);
						    yyval.UpdateComment(yyvsp[-1].Comment());
                                                  ;
    break;}
case 65:
#line 327 "cxx.y"
{ yyval = yyvsp[0];
                                                    ObjectListC ol1(yyvsp[-2]);
                                                    ObjectListC ol2(yyvsp[-1]);
						    yyval.UpdateComment(yyvsp[-2].Comment());
                                                  ;
    break;}
case 66:
#line 337 "cxx.y"
{ yyval=ObjectListC(STR(TemplateInstArgs)); ;
    break;}
case 67:
#line 338 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 68:
#line 341 "cxx.y"
{ ObjectListC ol(STR(TemplateInstArgs)); yyval=ol; ol.Append(yyvsp[0]); ;
    break;}
case 69:
#line 342 "cxx.y"
{ ObjectListC ol(STR(TemplateInstArgs)); yyval=ol; ol.Append(yyvsp[0]); ;
    break;}
case 70:
#line 343 "cxx.y"
{ ObjectListC ol(yyvsp[-2]); yyval=yyvsp[-2]; ol.Append(yyvsp[0]); ;
    break;}
case 71:
#line 344 "cxx.y"
{ ObjectListC ol(yyvsp[-2]); yyval=yyvsp[-2]; ol.Append(yyvsp[0]); ;
    break;}
case 72:
#line 348 "cxx.y"
{ yyval=yyvsp[-1]; yyval.UpdateComment(yyvsp[-3].Comment()); ;
    break;}
case 73:
#line 349 "cxx.y"
{ yyval=ObjectListC(STR(TemplateDefArgs)); yyval.UpdateComment(yyvsp[-2].Comment()); ;
    break;}
case 74:
#line 352 "cxx.y"
{ ObjectListC ol(STR(TemplateDefArgs)); yyval=ol; ol.Append(yyvsp[0]); ;
    break;}
case 75:
#line 353 "cxx.y"
{ yyval=yyvsp[-2]; ObjectListC ol(yyvsp[-2]); ol.Append(yyvsp[0]); ;
    break;}
case 76:
#line 356 "cxx.y"
{ yyval=yyvsp[-1]; 
                                      if(yyvsp[0].IsValid()) { 
                                        DataTypeC dt(yyvsp[-1]); 
					dt.SetAlias(yyvsp[0].Name()); 
                                      } 
                                    ;
    break;}
case 77:
#line 365 "cxx.y"
{ yyval= DataTypeC(STR(class),yyvsp[0]); ;
    break;}
case 78:
#line 366 "cxx.y"
{ yyval= DataTypeC(STR(typename),yyvsp[0]);  ;
    break;}
case 79:
#line 367 "cxx.y"
{ yyval= DataTypeC(yyvsp[-7].Name() + " (" + yyvsp[-5].Name() + ")(" + yyvsp[-2].Name() + ")" + yyvsp[-1].Name(),yyvsp[-5]); ;
    break;}
case 80:
#line 371 "cxx.y"
{ yyval=ObjectC("template<> class " + yyvsp[-2].Name()); ;
    break;}
case 81:
#line 382 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 82:
#line 383 "cxx.y"
{ yyval=yyvsp[-2]; ;
    break;}
case 83:
#line 384 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 84:
#line 385 "cxx.y"
{ yyval=yyvsp[-2]; ;
    break;}
case 85:
#line 386 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 86:
#line 387 "cxx.y"
{ yyval=yyvsp[-2]; ;
    break;}
case 87:
#line 400 "cxx.y"
{ yyval=ObjectListC(STR(classInherit)); ;
    break;}
case 88:
#line 401 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 89:
#line 404 "cxx.y"
{ yyval = yyvsp[-2]; ObjectListC ol(yyvsp[-2]); ol.Append(yyvsp[0]);  ;
    break;}
case 90:
#line 405 "cxx.y"
{ ObjectListC ol(STR(classInherit),true); ol.Append(yyvsp[0]); yyval = ol; ;
    break;}
case 91:
#line 407 "cxx.y"
{ yyval = InheritC(SAPublic);    yyval.CopyLineNo(yyvsp[0]); ;
    break;}
case 92:
#line 408 "cxx.y"
{ yyval = InheritC(SAPrivate);   yyval.CopyLineNo(yyvsp[0]); ;
    break;}
case 93:
#line 409 "cxx.y"
{ yyval = InheritC(SAProtected); yyval.CopyLineNo(yyvsp[0]); ;
    break;}
case 94:
#line 411 "cxx.y"
{ yyval = yyvsp[-1];
							  InheritC inh(yyval);
							  inh.SetScopeDef(yyvsp[0]);
							;
    break;}
case 95:
#line 415 "cxx.y"
{ yyval = yyvsp[-1];
                                                          InheritC inh(yyval);
							  inh.SetScopeDef(yyvsp[0]);
							  inh.SetVirtual(true);
							;
    break;}
case 96:
#line 420 "cxx.y"
{ yyval = yyvsp[-2];
                                                          InheritC inh(yyval);
							  inh.SetScopeDef(yyvsp[0]);
							  inh.SetVirtual(true);
							;
    break;}
case 97:
#line 425 "cxx.y"
{ yyval = InheritC(SAPrivate);
                                                          InheritC inh(yyval);
							  inh.SetScopeDef(yyvsp[0]);
							;
    break;}
case 98:
#line 431 "cxx.y"
{ yyval = ObjectListC(STR(ClassContents)); ;
    break;}
case 99:
#line 432 "cxx.y"
{ ObjectListC ol(yyvsp[-1]); ol.Append(yyvsp[0]); yyval = ol; ;
    break;}
case 100:
#line 434 "cxx.y"
{ yyval = MarkerC(STR(protected)); yyval.SetupLineNos(yyvsp[-1],yyvsp[0]); ;
    break;}
case 101:
#line 435 "cxx.y"
{ yyval = MarkerC(STR(private));   yyval.SetupLineNos(yyvsp[-1],yyvsp[0]); ;
    break;}
case 102:
#line 436 "cxx.y"
{ yyval = MarkerC(STR(public));    yyval.SetupLineNos(yyvsp[-1],yyvsp[0]); ;
    break;}
case 103:
#line 437 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 104:
#line 438 "cxx.y"
{ yyval=yyvsp[0]; yyval.SetVar(STR(virtual),STR(1)); ;
    break;}
case 105:
#line 442 "cxx.y"
{ yyval=ObjectC(""); ;
    break;}
case 106:
#line 443 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 107:
#line 445 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 108:
#line 446 "cxx.y"
{ yyval = yyvsp[-1].Name() + ' ' +  yyvsp[0].Name(); ;
    break;}
case 109:
#line 448 "cxx.y"
{ yyval=ObjectC(strp_OpenBracket + yyvsp[-1].Name() + strp_CloseBracket); ;
    break;}
case 110:
#line 449 "cxx.y"
{ yyval=ObjectC(StringC("[") + yyvsp[-1].Name() + "]"); ;
    break;}
case 111:
#line 450 "cxx.y"
{ yyval=ObjectC(StringC("{") + yyvsp[-1].Name() + "}"); ;
    break;}
case 118:
#line 452 "cxx.y"
{ yyval=ObjectC("<"); ;
    break;}
case 119:
#line 453 "cxx.y"
{ yyval=ObjectC(">"); ;
    break;}
case 120:
#line 454 "cxx.y"
{ yyval=ObjectC(strp_equals); ;
    break;}
case 121:
#line 455 "cxx.y"
{ yyval=ObjectC(strp_plus); ;
    break;}
case 122:
#line 456 "cxx.y"
{ yyval=ObjectC("-"); ;
    break;}
case 123:
#line 457 "cxx.y"
{ yyval=ObjectC("~"); ;
    break;}
case 124:
#line 458 "cxx.y"
{ yyval=ObjectC(strp_ampersand); ;
    break;}
case 125:
#line 459 "cxx.y"
{ yyval=ObjectC("/"); ;
    break;}
case 126:
#line 460 "cxx.y"
{ yyval=ObjectC(strp_asterisk); ;
    break;}
case 127:
#line 461 "cxx.y"
{ yyval=ObjectC("%"); ;
    break;}
case 128:
#line 462 "cxx.y"
{ yyval=ObjectC("|"); ;
    break;}
case 129:
#line 463 "cxx.y"
{ yyval=ObjectC("^"); ;
    break;}
case 130:
#line 464 "cxx.y"
{ yyval=ObjectC("!"); ;
    break;}
case 131:
#line 465 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 132:
#line 466 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 133:
#line 467 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 134:
#line 468 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 135:
#line 469 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 136:
#line 470 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 137:
#line 471 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 138:
#line 472 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 139:
#line 473 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 140:
#line 474 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 141:
#line 475 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 142:
#line 479 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 143:
#line 480 "cxx.y"
{ yyval=yyvsp[0]; DataTypeC dt(yyvsp[0]); dt.SetPreQual(yyvsp[-1].Name()); ;
    break;}
case 144:
#line 481 "cxx.y"
{ yyval=yyvsp[0]; DataTypeC dt(yyvsp[0]); dt.SetPreQual(yyvsp[-2].Name() + " " + yyvsp[-1].Name()); ;
    break;}
case 145:
#line 482 "cxx.y"
{ yyval=yyvsp[0]; DataTypeC dt(yyvsp[0]); dt.SetPreQual(yyvsp[-3].Name() + " " + yyvsp[-2].Name() + " " + yyvsp[-1].Name()); ;
    break;}
case 146:
#line 485 "cxx.y"
{ yyval=DataTypeC(StringC(""),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetupLineNos(yyvsp[-1],yyvsp[0]); 
                                                 ;
    break;}
case 147:
#line 488 "cxx.y"
{ yyval=DataTypeC(yyvsp[-2].Name(),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetVar(STR(storageType),yyvsp[-2].Name());
	                                           yyval.SetupLineNos(yyvsp[-2],yyvsp[-1],yyvsp[0]); 
	                                         ;
    break;}
case 148:
#line 492 "cxx.y"
{ yyval=DataTypeC(yyvsp[-2].Name(),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetVar(STR(storageType),yyvsp[-2].Name());
	                                           yyval.SetupLineNos(yyvsp[-2],yyvsp[-1],yyvsp[0]); 
	                                         ;
    break;}
case 149:
#line 496 "cxx.y"
{ yyval=DataTypeC(StringC(""),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetupLineNos(yyvsp[-1],yyvsp[0]);
	                                         ;
    break;}
case 150:
#line 499 "cxx.y"
{ yyval=DataTypeC(StringC(""),yyvsp[-1], yyvsp[0].Name()); 
                                                   yyval.SetupLineNos(yyvsp[-1],yyvsp[0]); 
                                                 ;
    break;}
case 151:
#line 502 "cxx.y"
{ yyval=DataTypeC(yyvsp[-2].Name(),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetupLineNos(yyvsp[-2],yyvsp[-1],yyvsp[0]); 
	                                         ;
    break;}
case 152:
#line 505 "cxx.y"
{ yyval=DataTypeC(yyvsp[-2].Name(),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetupLineNos(yyvsp[-2],yyvsp[-1],yyvsp[0]); 
	                                         ;
    break;}
case 153:
#line 508 "cxx.y"
{ yyval=DataTypeC(yyvsp[-3].Name() + " " + yyvsp[-2].Name(),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetupLineNos(yyvsp[-3],yyvsp[-1],yyvsp[0]); 
	                                         ;
    break;}
case 154:
#line 511 "cxx.y"
{ yyval=DataTypeC(yyvsp[-3].Name() + " " + yyvsp[-2].Name(),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetupLineNos(yyvsp[-3],yyvsp[-1],yyvsp[0]);
	                                         ;
    break;}
case 155:
#line 514 "cxx.y"
{ yyval= DataTypeC(STR(typename),yyvsp[-1],yyvsp[0].Name());  
	                                           yyval.SetupLineNos(yyvsp[-2],yyvsp[-1],yyvsp[0]);
	                                         ;
    break;}
case 156:
#line 519 "cxx.y"
{ yyval=ObjectListC(STR(VarNameList)); ;
    break;}
case 157:
#line 520 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 158:
#line 522 "cxx.y"
{ ObjectListC ol(STR(VarNameList)); ol.Append(yyvsp[0]); yyval = ol; ;
    break;}
case 159:
#line 523 "cxx.y"
{ ObjectListC ol(yyvsp[-2]); ol.Append(yyvsp[0]); yyval = ol; ;
    break;}
case 160:
#line 525 "cxx.y"
{ yyval=ObjectC("[]"); ;
    break;}
case 161:
#line 526 "cxx.y"
{ yyval=yyvsp[-3]; yyvsp[-3].Name() += "[]" ;
    break;}
case 162:
#line 528 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 163:
#line 529 "cxx.y"
{ yyval=yyvsp[-2]; yyvsp[-2].Name() += StringC(" = ") + yyvsp[0].Name(); ;
    break;}
case 164:
#line 530 "cxx.y"
{ yyval=yyvsp[-1]; yyvsp[-1].Name() += yyvsp[0].Name(); yyval.SetVar(STR(array),STR(1)); ;
    break;}
case 165:
#line 532 "cxx.y"
{ yyval=yyvsp[-5]; yyvsp[-5].Name() += yyvsp[-4].Name(); yyval.SetVar(STR(array),STR(1)); ;
    break;}
case 166:
#line 533 "cxx.y"
{ yyval=yyvsp[0]; yyvsp[0].Name() = StringC(" = ") + yyvsp[0].Name(); ;
    break;}
case 167:
#line 535 "cxx.y"
{ yyval=ObjectC(""); ;
    break;}
case 168:
#line 536 "cxx.y"
{ yyval=yyvsp[-1]; yyval.Name() += strp_asterisk;  ;
    break;}
case 169:
#line 537 "cxx.y"
{ yyval=yyvsp[-1]; yyval.Name() += strp_ampersand;  ;
    break;}
case 170:
#line 538 "cxx.y"
{ yyval=yyvsp[-1]; yyval.Name() += yyvsp[0].Name();  ;
    break;}
case 175:
#line 548 "cxx.y"
{ yyval =ObjectC(""); ;
    break;}
case 176:
#line 549 "cxx.y"
{ yyval = yyvsp[0]; ;
    break;}
case 177:
#line 551 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 178:
#line 552 "cxx.y"
{ yyvsp[-1] = yyvsp[-1].Name() + yyvsp[0].Name(); ;
    break;}
case 179:
#line 554 "cxx.y"
{ yyval=ObjectC(strp_OpenBracket + yyvsp[-1].Name() + strp_CloseBracket); ;
    break;}
case 200:
#line 559 "cxx.y"
{ yyval=ObjectC(strp_Colon); ;
    break;}
case 201:
#line 560 "cxx.y"
{ yyval=ObjectC("<"); ;
    break;}
case 202:
#line 561 "cxx.y"
{ yyval=ObjectC(">"); ;
    break;}
case 203:
#line 562 "cxx.y"
{ yyval=ObjectC(strp_equals); ;
    break;}
case 204:
#line 563 "cxx.y"
{ yyval=ObjectC(strp_plus); ;
    break;}
case 205:
#line 564 "cxx.y"
{ yyval=ObjectC("-"); ;
    break;}
case 206:
#line 565 "cxx.y"
{ yyval=ObjectC(strp_Tilda); ;
    break;}
case 207:
#line 566 "cxx.y"
{ yyval=ObjectC(strp_ampersand); ;
    break;}
case 208:
#line 567 "cxx.y"
{ yyval=ObjectC("/"); ;
    break;}
case 209:
#line 568 "cxx.y"
{ yyval=ObjectC(strp_asterisk); ;
    break;}
case 210:
#line 569 "cxx.y"
{ yyval=ObjectC("%"); ;
    break;}
case 211:
#line 570 "cxx.y"
{ yyval=ObjectC("|"); ;
    break;}
case 212:
#line 571 "cxx.y"
{ yyval=ObjectC("^"); ;
    break;}
case 213:
#line 572 "cxx.y"
{ yyval=ObjectC("!"); ;
    break;}
case 214:
#line 573 "cxx.y"
{ yyval=ObjectC("["); ;
    break;}
case 215:
#line 574 "cxx.y"
{ yyval=ObjectC("]"); ;
    break;}
case 216:
#line 575 "cxx.y"
{ yyval=ObjectC(strp_Semicolon); ;
    break;}
case 217:
#line 576 "cxx.y"
{ yyval=ObjectC(strp_Comma); ;
    break;}
case 218:
#line 581 "cxx.y"
{ yyval=yyvsp[0]; hookCommentObj = yyvsp[0];  ;
    break;}
case 219:
#line 582 "cxx.y"
{ yyval=yyvsp[0]; hookCommentObj = yyvsp[0];  ;
    break;}
case 220:
#line 583 "cxx.y"
{ yyval=yyvsp[0]; 
                                          yyval.SetVar(STR(dectype),STR(friend));
					  yyval.IncludeLineNo(yyvsp[-1]);
					  hookCommentObj = yyvsp[0];
                                        ;
    break;}
case 221:
#line 589 "cxx.y"
{ yyval = yyvsp[-1]; 
                                          yyval.SetVar(STR(dectype),STR(prototype)); 
					  yyval.IncludeLineNo(yyvsp[0]);
                                        ;
    break;}
case 222:
#line 593 "cxx.y"
{ yyval=yyvsp[-3];   /* "=0"; */
                                          yyval.SetVar(STR(dectype),STR(abstract));
					  yyval.IncludeLineNo(yyvsp[0]);
                                        ;
    break;}
case 223:
#line 597 "cxx.y"
{ yyval=yyvsp[-1]; 
                                          yyval.SetVar(STR(dectype),STR(extern));    
					  yyval.IncludeLineNo(yyvsp[0]);
                                        ;
    break;}
case 224:
#line 603 "cxx.y"
{ yyval = yyvsp[-1];
                                             yyval.SetVar(STR(dectype),STR(definition)); 
					     yyval.IncludeLineNo(yyvsp[0]);
                                           ;
    break;}
case 225:
#line 608 "cxx.y"
{ yyval=ObjectC(strp_plus); ;
    break;}
case 226:
#line 609 "cxx.y"
{ yyval=ObjectC("-"); ;
    break;}
case 227:
#line 610 "cxx.y"
{ yyval=ObjectC(strp_Tilda); ;
    break;}
case 228:
#line 611 "cxx.y"
{ yyval=ObjectC(strp_ampersand); ;
    break;}
case 229:
#line 612 "cxx.y"
{ yyval=ObjectC("/"); ;
    break;}
case 230:
#line 613 "cxx.y"
{ yyval=ObjectC(strp_asterisk); ;
    break;}
case 231:
#line 614 "cxx.y"
{ yyval=ObjectC("%"); ;
    break;}
case 232:
#line 615 "cxx.y"
{ yyval=ObjectC("|"); ;
    break;}
case 233:
#line 616 "cxx.y"
{ yyval=ObjectC("^"); ;
    break;}
case 234:
#line 617 "cxx.y"
{ yyval=ObjectC("!"); ;
    break;}
case 235:
#line 618 "cxx.y"
{ yyval=ObjectC(strp_equals); ;
    break;}
case 236:
#line 619 "cxx.y"
{ yyval=ObjectC("<"); ;
    break;}
case 237:
#line 620 "cxx.y"
{ yyval=ObjectC(">"); ;
    break;}
case 238:
#line 621 "cxx.y"
{ yyval=ObjectC("--"); ;
    break;}
case 239:
#line 622 "cxx.y"
{ yyval=ObjectC("++"); ;
    break;}
case 240:
#line 623 "cxx.y"
{ yyval=ObjectC("[]"); ;
    break;}
case 241:
#line 624 "cxx.y"
{ yyval=ObjectC("()"); ;
    break;}
case 242:
#line 625 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 243:
#line 626 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 244:
#line 628 "cxx.y"
{ yyval = ObjectListC(STR(EmptyArgList)); ;
    break;}
case 245:
#line 629 "cxx.y"
{ yyval = yyvsp[-1]; ;
    break;}
case 246:
#line 632 "cxx.y"
{ yyval = yyvsp[-1]; ;
    break;}
case 247:
#line 636 "cxx.y"
{ yyval = MethodC(yyvsp[-2].Name(),DataTypeC(yyvsp[-3]),ObjectListC(yyvsp[-1]),yyvsp[0]); ;
    break;}
case 248:
#line 639 "cxx.y"
{ yyval = MethodC(yyvsp[-3].Name(),DataTypeC(yyvsp[-6]),ObjectListC(yyvsp[-1]),yyvsp[0]);
        yyval.SetScope(yyvsp[-5]);
      ;
    break;}
case 249:
#line 644 "cxx.y"
{ MethodC amethod(yyvsp[-2].Name(), DataTypeC(STR(void)),ObjectListC(yyvsp[-1]),yyvsp[0]); 
        amethod.CopyLineNo(yyvsp[-2]);
        amethod.SetConstructor(true);
        yyval = amethod;
	ObjectC subScope = yyvsp[-2].GetScope();
	if(subScope.IsValid()) {
	  ObjectListC ol(subScope);
	  DListC<ObjectC> tmp = ol.List().Copy();
	  //cerr << "Got constructor:  SubScope '" << subScope.Name() << "' Path:" << PathName(tmp) << " \n";
	  tmp.DelLast();
	  if(!tmp.IsEmpty()) {
	    //cerr << "Got constructor:  SetScope to Path:" << PathName(tmp) << " \n";
	    ObjectListC oln(STR(ConstructorScopePath),tmp);
	    yyval.SetScope(oln);
	  }
	}
      ;
    break;}
case 250:
#line 662 "cxx.y"
{ yyval = MethodC(STR(operator) + yyvsp[-3].Name(), DataTypeC(yyvsp[-5]),ObjectListC(yyvsp[-1]),yyvsp[0]); ;
    break;}
case 251:
#line 665 "cxx.y"
{ yyval = MethodC(STR(operator) + yyvsp[-3].Name(), DataTypeC(yyvsp[-7]),ObjectListC(yyvsp[-1]),yyvsp[0]); 
         yyval.SetScope(yyvsp[-6]);
       ;
    break;}
case 252:
#line 670 "cxx.y"
{ yyval = MethodC(STR(operator), DataTypeC(yyvsp[-2]),ObjectListC(yyvsp[-1]),yyvsp[0],true); ;
    break;}
case 253:
#line 673 "cxx.y"
{ yyval = MethodC(STR(operator), DataTypeC(yyvsp[-2]),ObjectListC(yyvsp[-1]),yyvsp[0],true); 
        yyval.SetScope(yyvsp[-5]);
      ;
    break;}
case 259:
#line 686 "cxx.y"
{  yyval=ObjectListC(STR(FuncArgList)); ;
    break;}
case 260:
#line 687 "cxx.y"
{  yyval=yyvsp[0]; ;
    break;}
case 261:
#line 689 "cxx.y"
{ ObjectListC ol(STR(FuncArgList)); yyval= ol; ol.Append(yyvsp[0]); ;
    break;}
case 262:
#line 690 "cxx.y"
{ yyval=yyvsp[-2]; ObjectListC ol(yyvsp[-2]); ol.Append(yyvsp[0]); ;
    break;}
case 263:
#line 691 "cxx.y"
{ yyval=yyvsp[-1]; ObjectListC ol(yyvsp[-1]); DataTypeC ell("..."); ol.Append(ell); ;
    break;}
case 264:
#line 693 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 265:
#line 694 "cxx.y"
{ yyval=yyvsp[-1]; DataTypeC dt(yyvsp[-1]); dt.SetAlias(yyvsp[0].Name()); ;
    break;}
case 266:
#line 695 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 267:
#line 699 "cxx.y"
{ 
	  StringC name;
	  if(yyvsp[-5].IsValid())
	    name = yyvsp[-5].Name();
	  else
	    name = StringC("anon?") + StringC(anonCount++);
	  MethodC meth(name,DataTypeC(yyvsp[-8]),ObjectListC(yyvsp[-2]),yyvsp[0],false,true);
	  //$$=DataTypeC($1.Name() + StringC(" (*)(") + $7.Name() + strp_CloseBracket + $9.Name(),name); 
	  ObjectListC ol("(*)");
	  ol.Append(meth);
	  yyval = DataTypeC(name,"",ol);
	  yyval.SetupLineNos(yyvsp[-8],yyvsp[-1],yyvsp[0]);
	;
    break;}
case 268:
#line 713 "cxx.y"
{
	  MethodC meth(yyvsp[-5].Name(),DataTypeC(yyvsp[-10]),ObjectListC(yyvsp[-2]),yyvsp[0],false,true);
	  ObjectListC ol("(*)");
	  ol.Append(meth);	  
	  //$$=DataTypeC($1.Name() + StringC(" (*)(") + $9.Name() + strp_CloseBracket + $11.Name(),$6.Name());
	  yyval = DataTypeC(yyvsp[-4].Name(),"",ol);
	  yyval.SetupLineNos(yyvsp[-10],yyvsp[-1],yyvsp[0]);
	;
    break;}
case 269:
#line 723 "cxx.y"
{ yyval=ObjectC(""); ;
    break;}
case 270:
#line 724 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 271:
#line 725 "cxx.y"
{ yyval=yyvsp[-1]; ;
    break;}
case 272:
#line 726 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 273:
#line 729 "cxx.y"
{ yyval=yyvsp[-1]; yyval.SetupLineNos(yyvsp[-2],yyvsp[0]); ;
    break;}
case 274:
#line 731 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 275:
#line 732 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 747 "cxx.y"


