
/*  A Bison parser, made from cxx.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IDENTIFIER	257
#define	CLCL	258
#define	PUBLIC	259
#define	PROTECTED	260
#define	PRIVATE	261
#define	NAMESPACE	262
#define	STATIC	263
#define	STRING	264
#define	CONSTANT	265
#define	CPVIRTUAL	266
#define	ENUM	267
#define	CPTYPEDEF	268
#define	CPFRIEND	269
#define	CPOPERATOR	270
#define	TEMPLATE	271
#define	CPTHROW	272
#define	SCSPEC	273
#define	TYPENAME_KEYWORD	274
#define	USING	275
#define	EXTERN	276
#define	ELLIPSIS	277
#define	ASM_KEYWORD	278
#define	CV_QUALIFIER	279
#define	TYPEQUAL	280
#define	BINOP	281
#define	BUILTIN	282
#define	DOCSECTION	283

#line 2 "cxx.y"

#include <stdlib.h>
#include <iostream.h>

#include "Ravl/CxxDoc/CxxElements.hh"
#include "Ravl/CxxDoc/DocNode.hh"
#include "Ravl/CxxDoc/Strings.hh"

#ifndef NDEBUG
#define YYDEBUG 1
#endif

#define YYSTYPE ObjectC 
  
  namespace RavlCxxDocN {
    extern ObjectC hookCommentObj;
    extern ObjectListC results;

  }
  
  using namespace RavlN;
  using namespace RavlCxxDocN;
  
  extern int yyerror(const char *str);
  extern int yylex();

  static int anonCount = 1;

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		540
#define	YYFLAG		-32768
#define	YYNTBASE	52

#define YYTRANSLATE(x) ((unsigned)(x) <= 283 ? yytranslate[x] : 119)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    51,     2,     2,     2,    48,    45,     2,    36,
    38,    47,    43,    31,    44,     2,    46,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    33,    32,    41,
    34,    42,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    37,     2,    40,    50,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    30,    49,    39,    35,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     8,    10,    12,    14,    16,    19,
    22,    25,    31,    37,    39,    42,    44,    47,    52,    54,
    56,    60,    65,    73,    79,    83,    93,    96,   105,   113,
   117,   121,   125,   134,   144,   149,   155,   158,   159,   161,
   163,   167,   169,   173,   175,   178,   180,   184,   188,   190,
   191,   193,   195,   198,   201,   207,   212,   215,   219,   223,
   232,   237,   240,   244,   245,   247,   249,   251,   255,   259,
   264,   268,   270,   274,   277,   280,   283,   287,   289,   293,
   295,   299,   301,   305,   306,   309,   313,   315,   317,   319,
   321,   324,   328,   332,   334,   335,   338,   341,   344,   347,
   349,   352,   353,   355,   357,   360,   364,   368,   372,   374,
   376,   378,   380,   382,   384,   386,   388,   390,   392,   394,
   396,   398,   400,   402,   404,   406,   408,   410,   412,   414,
   416,   418,   420,   422,   424,   426,   428,   430,   432,   434,
   436,   439,   443,   446,   450,   454,   457,   460,   464,   468,
   473,   478,   479,   481,   483,   487,   491,   496,   498,   502,
   505,   512,   515,   516,   519,   522,   525,   527,   530,   535,
   537,   540,   544,   546,   550,   555,   563,   564,   566,   568,
   571,   575,   577,   579,   581,   583,   585,   587,   589,   591,
   593,   595,   597,   599,   601,   603,   605,   607,   609,   611,
   613,   615,   617,   619,   621,   623,   625,   627,   629,   631,
   633,   635,   637,   639,   641,   643,   645,   647,   649,   651,
   653,   655,   657,   660,   663,   668,   672,   675,   677,   679,
   681,   683,   685,   687,   689,   691,   693,   695,   697,   699,
   701,   704,   707,   710,   713,   715,   717,   718,   722,   726,
   731,   739,   743,   750,   759,   764,   771,   776,   777,   779,
   781,   785,   786,   788,   790,   794,   797,   799,   802,   804,
   814,   826,   827,   829,   832,   834,   838,   840,   844,   845,
   848,   852,   854,   856,   858,   860,   862,   864,   866,   868,
   870,   872,   874,   876,   878,   880,   882,   884,   886,   888,
   890,   892,   894,   896,   898,   900,   902,   904,   906,   908,
   910,   912,   914,   916,   918,   920,   922,   924,   926,   928,
   930,   932,   934,   936,   938,   940
};

static const short yyrhs[] = {    54,
     0,    55,     0,    53,    55,     0,     0,    53,     0,   100,
     0,    56,     0,    68,     0,     9,   100,     0,     9,    56,
     0,     9,    68,     0,    24,    36,    60,    38,    32,     0,
     8,    63,    30,    54,    39,     0,    65,     0,    67,    32,
     0,    66,     0,     1,    32,     0,     1,    30,   117,    39,
     0,    32,     0,    29,     0,    86,    89,    32,     0,    14,
    86,     3,    32,     0,    14,    86,     3,    37,    85,    40,
    32,     0,    14,    20,    86,     3,    32,     0,    14,   113,
    32,     0,    14,    19,    63,    77,    30,    54,    39,     3,
    32,     0,   113,    32,     0,    14,    13,    63,    30,    57,
    39,     3,    32,     0,    13,    63,    30,    57,    39,    88,
    32,     0,    19,     3,    32,     0,    13,     3,    32,     0,
    15,    86,    32,     0,    19,     3,    77,    30,    81,    39,
    88,    32,     0,    25,    19,    63,    77,    30,    81,    39,
    88,    32,     0,    22,    86,    89,    32,     0,    22,    10,
    30,    54,    39,     0,    94,    32,     0,     0,    58,     0,
    59,     0,    58,    31,    59,     0,     3,     0,     3,    34,
    84,     0,    10,     0,    60,    10,     0,     3,     0,     3,
     4,    61,     0,     3,     4,    62,     0,     3,     0,     0,
    61,     0,    62,     0,     4,    62,     0,     4,    61,     0,
     8,     3,    34,    64,    32,     0,    21,     8,    64,    32,
     0,    21,    62,     0,    21,     4,    62,     0,    21,     4,
    61,     0,    71,    19,     3,    77,    30,    81,    39,    32,
     0,    71,    19,     3,    32,     0,    71,   100,     0,    71,
    71,   100,     0,     0,    70,     0,    86,     0,    11,     0,
    70,    31,    86,     0,    70,    31,    11,     0,    17,    41,
    72,    42,     0,    17,    41,    42,     0,    76,     0,    72,
    31,    76,     0,    86,    63,     0,    19,    63,     0,    20,
    63,     0,    71,    19,    63,     0,    74,     0,    74,    34,
    86,     0,    73,     0,    73,    34,    85,     0,    75,     0,
    75,    34,    86,     0,     0,    33,    78,     0,    78,    31,
    80,     0,    80,     0,     5,     0,     7,     0,     6,     0,
    79,    94,     0,    12,    79,    94,     0,    79,    12,    94,
     0,    94,     0,     0,    81,    82,     0,     6,    33,     0,
     7,    33,     0,     5,    33,     0,    55,     0,    12,   100,
     0,     0,    84,     0,    85,     0,    84,    85,     0,    36,
    97,    38,     0,    37,    84,    40,     0,    30,    84,    39,
     0,     3,     0,    11,     0,    25,     0,    28,     0,    10,
     0,    27,     0,    41,     0,    42,     0,    34,     0,    43,
     0,    44,     0,    35,     0,    45,     0,    46,     0,    47,
     0,    48,     0,    49,     0,    50,     0,    51,     0,    33,
     0,     4,     0,     9,     0,    12,     0,    13,     0,    14,
     0,    15,     0,    16,     0,    17,     0,    18,     0,    20,
     0,    21,     0,    87,     0,    25,    87,     0,    25,    25,
    87,     0,    94,    92,     0,    19,    94,    92,     0,    13,
    94,    92,     0,    28,    92,     0,    26,    92,     0,    26,
    28,    92,     0,    26,    26,    92,     0,    26,    26,    28,
    92,     0,    26,    26,    26,    92,     0,     0,    89,     0,
    91,     0,    89,    31,    91,     0,    37,    83,    40,     0,
    90,    37,    83,    40,     0,     3,     0,     3,    34,    84,
     0,     3,    90,     0,     3,    90,    34,    30,   117,    39,
     0,    34,    84,     0,     0,    92,    47,     0,    92,    45,
     0,    92,    25,     0,     3,     0,    35,     3,     0,     3,
    41,    69,    42,     0,    93,     0,     4,    93,     0,    94,
     4,    93,     0,    96,     0,    95,    31,    96,     0,     3,
    36,    97,    38,     0,     3,    41,    69,    42,    36,    97,
    38,     0,     0,    98,     0,    99,     0,    98,    99,     0,
    36,    97,    38,     0,     3,     0,    11,     0,    27,     0,
     4,     0,     5,     0,     6,     0,     7,     0,     8,     0,
    25,     0,     9,     0,    10,     0,    12,     0,    13,     0,
    14,     0,    28,     0,    15,     0,    16,     0,    17,     0,
    18,     0,    20,     0,    21,     0,    33,     0,    41,     0,
    42,     0,    34,     0,    43,     0,    44,     0,    35,     0,
    45,     0,    46,     0,    47,     0,    48,     0,    49,     0,
    50,     0,    51,     0,    37,     0,    40,     0,    32,     0,
    31,     0,   102,     0,   101,     0,    15,   101,     0,   106,
    32,     0,   106,    34,    11,    32,     0,    22,   106,    32,
     0,   106,   116,     0,    43,     0,    44,     0,    35,     0,
    45,     0,    46,     0,    47,     0,    48,     0,    49,     0,
    50,     0,    51,     0,    34,     0,    41,     0,    42,     0,
    44,    44,     0,    43,    43,     0,    37,    40,     0,    36,
    38,     0,    27,     0,     3,     0,     0,    41,    69,    42,
     0,    36,   110,    38,     0,    86,    93,   105,   114,     0,
    86,    93,     4,    61,   104,   105,   114,     0,    86,   105,
   114,     0,    86,    16,   103,   104,   105,   114,     0,    86,
    93,     4,    16,   103,   104,   105,   114,     0,    16,    86,
   105,   114,     0,    94,     4,    16,    86,   105,   114,     0,
    18,    36,   108,    38,     0,     0,   109,     0,    94,     0,
   109,    31,    94,     0,     0,   111,     0,   112,     0,   111,
    31,   112,     0,   111,    23,     0,    86,     0,    86,    91,
     0,   113,     0,    86,    36,    47,    63,    38,    36,   110,
    38,   114,     0,    86,    36,    94,     4,    47,     3,    38,
    36,   110,    38,   114,     0,     0,   107,     0,    25,   107,
     0,    25,     0,    30,   117,    39,     0,   115,     0,    33,
    95,   115,     0,     0,   117,   118,     0,    30,   117,    39,
     0,     3,     0,    11,     0,    19,     0,    34,     0,    43,
     0,    44,     0,    35,     0,    45,     0,    46,     0,    47,
     0,    48,     0,    49,     0,    50,     0,    51,     0,    33,
     0,    36,     0,    38,     0,    37,     0,    40,     0,    32,
     0,    31,     0,    41,     0,    42,     0,    27,     0,     4,
     0,     5,     0,     6,     0,     7,     0,     8,     0,    25,
     0,     9,     0,    10,     0,    12,     0,    13,     0,    14,
     0,    26,     0,    28,     0,    15,     0,    16,     0,    17,
     0,    18,     0,    20,     0,    21,     0,    22,     0,    24,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    78,    83,    84,    87,    88,    91,    92,    93,    94,    95,
    96,    97,    98,   103,   104,   105,   106,   107,   108,   109,
   115,   126,   131,   136,   140,   145,   165,   166,   185,   192,
   197,   202,   205,   214,   227,   228,   229,   233,   234,   236,
   237,   239,   240,   245,   247,   252,   255,   256,   259,   260,
   263,   265,   266,   267,   272,   276,   284,   286,   287,   295,
   302,   307,   311,   321,   322,   325,   326,   327,   328,   331,
   333,   336,   337,   340,   348,   350,   353,   357,   366,   367,
   368,   369,   370,   383,   384,   386,   388,   390,   391,   392,
   394,   398,   403,   408,   414,   415,   417,   418,   419,   420,
   421,   425,   426,   428,   429,   431,   432,   433,   434,   434,
   434,   434,   434,   434,   435,   436,   437,   438,   439,   440,
   441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
   451,   452,   453,   454,   455,   456,   457,   458,   459,   463,
   464,   465,   468,   471,   475,   479,   482,   485,   488,   491,
   494,   499,   500,   502,   503,   505,   506,   508,   509,   510,
   511,   513,   515,   516,   517,   518,   520,   521,   522,   526,
   527,   533,   541,   542,   544,   545,   547,   548,   550,   551,
   553,   554,   554,   554,   555,   555,   555,   555,   555,   555,
   556,   556,   556,   556,   556,   556,   557,   557,   557,   557,
   557,   557,   558,   559,   560,   561,   562,   563,   564,   565,
   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
   580,   581,   582,   588,   592,   596,   601,   607,   608,   609,
   610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
   620,   621,   622,   623,   624,   625,   627,   628,   630,   633,
   637,   642,   660,   663,   668,   671,   677,   679,   680,   682,
   683,   685,   686,   688,   689,   690,   692,   693,   694,   697,
   707,   713,   714,   715,   716,   719,   721,   722,   724,   725,
   727,   728,   728,   728,   729,   729,   729,   729,   729,   729,
   729,   729,   729,   729,   729,   729,   730,   730,   730,   730,
   730,   730,   730,   730,   730,   731,   731,   731,   731,   731,
   731,   732,   732,   732,   732,   732,   732,   732,   733,   733,
   733,   733,   733,   733,   734,   734
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","IDENTIFIER",
"CLCL","PUBLIC","PROTECTED","PRIVATE","NAMESPACE","STATIC","STRING","CONSTANT",
"CPVIRTUAL","ENUM","CPTYPEDEF","CPFRIEND","CPOPERATOR","TEMPLATE","CPTHROW",
"SCSPEC","TYPENAME_KEYWORD","USING","EXTERN","ELLIPSIS","ASM_KEYWORD","CV_QUALIFIER",
"TYPEQUAL","BINOP","BUILTIN","DOCSECTION","'{'","','","';'","':'","'='","'~'",
"'('","'['","')'","'}'","']'","'<'","'>'","'+'","'-'","'&'","'/'","'*'","'%'",
"'|'","'^'","'!'","program","extdefs","extdefs_opt","extdef","datadef","enum_name_list_opt",
"enum_name_list","enum_name_elem","string","unqualified_id","qualified_id","maybe_identifier",
"any_id","namespace_alias","using_directive","using_decl","template_def","template_inst_args_opt",
"template_inst_args","template_header","template_parm_list","parm","template_type_parm",
"template_template_parm","template_parm","class_inherit_list_all","class_inherit_list",
"class_inherit_mode","class_inherit_def","class_lst","class_def","expr_no_commas_list_opt",
"expr_no_commas_list","expr_no_commas","type_id","type_id_bod","var_name_list_opt",
"var_name_list","var_name_array","var_name_elem","type_id_qual","scope_id","scope_resolved_id",
"base_class_constructors_list","constructor_expr","arg_expr_list_all","arg_expr_list",
"arg_expr_list_item","fndef","func_decl","func_def","operator_types","func_arg_templ_qual",
"func_arg_prototype","func_prototype","func_throw_spec","list_scoped_ids_opt",
"list_scoped_ids","func_arg_list_all","func_arg_list","func_arg_def","function_ptr_def",
"func_qualifier","func_body","func_body_opt_constr","func_body_contents_list",
"func_body_contents", NULL
};
#endif

static const short yyr1[] = {     0,
    52,    53,    53,    54,    54,    55,    55,    55,    55,    55,
    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    57,    57,    58,
    58,    59,    59,    60,    60,    61,    62,    62,    63,    63,
    64,    64,    64,    64,    65,    66,    67,    67,    67,    68,
    68,    68,    68,    69,    69,    70,    70,    70,    70,    71,
    71,    72,    72,    73,    74,    74,    75,    76,    76,    76,
    76,    76,    76,    77,    77,    78,    78,    79,    79,    79,
    80,    80,    80,    80,    81,    81,    82,    82,    82,    82,
    82,    83,    83,    84,    84,    85,    85,    85,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    85,    86,
    86,    86,    87,    87,    87,    87,    87,    87,    87,    87,
    87,    88,    88,    89,    89,    90,    90,    91,    91,    91,
    91,    91,    92,    92,    92,    92,    93,    93,    93,    94,
    94,    94,    95,    95,    96,    96,    97,    97,    98,    98,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
   100,   100,   100,   101,   101,   101,   102,   103,   103,   103,
   103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
   103,   103,   103,   103,   103,   103,   104,   104,   105,   106,
   106,   106,   106,   106,   106,   106,   107,   108,   108,   109,
   109,   110,   110,   111,   111,   111,   112,   112,   112,   113,
   113,   114,   114,   114,   114,   115,   116,   116,   117,   117,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118
};

static const short yyr2[] = {     0,
     1,     1,     2,     0,     1,     1,     1,     1,     2,     2,
     2,     5,     5,     1,     2,     1,     2,     4,     1,     1,
     3,     4,     7,     5,     3,     9,     2,     8,     7,     3,
     3,     3,     8,     9,     4,     5,     2,     0,     1,     1,
     3,     1,     3,     1,     2,     1,     3,     3,     1,     0,
     1,     1,     2,     2,     5,     4,     2,     3,     3,     8,
     4,     2,     3,     0,     1,     1,     1,     3,     3,     4,
     3,     1,     3,     2,     2,     2,     3,     1,     3,     1,
     3,     1,     3,     0,     2,     3,     1,     1,     1,     1,
     2,     3,     3,     1,     0,     2,     2,     2,     2,     1,
     2,     0,     1,     1,     2,     3,     3,     3,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     3,     2,     3,     3,     2,     2,     3,     3,     4,
     4,     0,     1,     1,     3,     3,     4,     1,     3,     2,
     6,     2,     0,     2,     2,     2,     1,     2,     4,     1,
     2,     3,     1,     3,     4,     7,     0,     1,     1,     2,
     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     2,     2,     4,     3,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     2,     2,     2,     1,     1,     0,     3,     3,     4,
     7,     3,     6,     8,     4,     6,     4,     0,     1,     1,
     3,     0,     1,     1,     3,     2,     1,     2,     1,     9,
    11,     0,     1,     2,     1,     3,     1,     3,     0,     2,
     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     0,
     0,   167,     0,    50,     0,    50,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   163,   163,    20,    19,     0,
     0,     1,     2,     7,    14,    16,     0,     8,     0,     0,
   140,   170,   163,     6,   222,   221,     0,     0,   279,    17,
    64,   171,    49,     0,    10,    11,     9,   167,     0,   163,
    50,    50,     0,     0,     0,   163,     0,     0,     0,     0,
     0,   163,   223,     0,     0,     0,   167,   163,     0,     0,
     0,    57,     0,     0,     0,     0,    50,     0,   141,   163,
   163,   147,   146,   168,     3,    15,     0,     0,     0,     0,
    62,   158,     0,     0,   262,     0,   154,     0,   272,     0,
    37,   143,   279,   224,     0,     0,   277,   227,    27,     0,
    67,     0,    65,    66,     0,     0,    31,    38,     0,   145,
   167,     0,    84,     0,     0,     0,    25,    32,   262,   272,
    50,    50,    71,     0,     0,    80,    78,    82,    72,    50,
    30,     0,     0,   144,     0,    46,    59,    58,     0,    51,
    52,     0,     0,     0,   226,    44,     0,    84,   142,   163,
   163,   149,   148,   166,   165,   164,   167,    63,     0,   102,
   160,   246,   245,   238,   230,     0,     0,   239,   240,   228,
   229,   231,   232,   233,   234,   235,   236,   237,   247,   109,
   129,   130,   113,   110,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   111,   114,   112,     0,   128,   117,   120,
   177,     0,   115,   116,   118,   119,   121,   122,   123,   124,
   125,   126,   127,   162,   104,    50,   267,   163,     0,   263,
   264,   269,     0,    21,     0,   272,     0,   275,   273,   252,
     0,   172,     0,     0,     0,   173,     0,   282,   306,   307,
   308,   309,   310,   312,   313,   283,   314,   315,   316,   319,
   320,   321,   322,   284,   323,   324,   325,   326,   311,   317,
   305,   318,   279,   302,   301,   296,   285,   288,   297,   299,
   298,    18,   300,   303,   304,   286,   287,   289,   290,   291,
   292,   293,   294,   295,   280,   169,     0,     0,     0,    42,
     0,    39,    40,    38,     0,     0,    22,     0,     0,   255,
    75,    49,    76,    50,     0,    70,     0,     0,     0,    74,
    88,    90,    89,     0,    85,     0,    87,    94,    95,    47,
    48,    54,    53,    56,     0,    35,    45,     0,     0,   151,
   150,    61,     0,   159,     0,   103,     0,   102,   244,   243,
   242,   241,    64,     0,     0,   182,   185,   186,   187,   188,
   189,   191,   192,   183,   193,   194,   195,   197,   198,   199,
   200,   201,   202,   190,   184,   196,   220,   219,   203,   206,
   209,   177,   217,   218,   204,   205,   207,   208,   210,   211,
   212,   213,   214,   215,   216,     0,   178,   179,     0,   105,
     0,   158,   268,     0,   249,   266,     0,   155,    46,     0,
   247,   250,   258,   274,     0,   276,   177,    64,     0,   278,
   225,     0,    69,    68,    55,    13,     0,   152,     0,     0,
     0,    24,     0,    77,    73,    81,    79,    83,     0,     0,
     0,    91,     0,    36,    12,    95,    95,   156,   279,     0,
     0,   272,   108,     0,   106,   180,   107,     0,     0,   265,
   247,     0,   260,     0,   259,   272,     0,     0,   174,   281,
    43,     0,   153,    41,     0,     0,     0,    92,    86,    93,
     0,     0,     0,     0,   152,   100,    96,     0,     0,     0,
   157,   248,   253,   181,   262,     0,     0,   272,   257,     0,
   256,   175,     0,    29,     0,     0,    23,    99,    97,    98,
   101,     0,   152,     0,   161,     0,     0,   272,   251,   261,
   177,    28,     0,    33,     0,    60,   272,   262,   254,     0,
    26,    34,   270,     0,   176,   272,   271,     0,     0,     0
};

static const short yydefgoto[] = {   538,
    21,    22,    23,    24,   301,   302,   303,   157,   150,   151,
    44,   152,    25,    26,    27,    28,   112,   113,    29,   135,
   136,   137,   138,   139,   143,   325,   326,   327,   443,   487,
   345,   346,   225,    30,    31,   472,   473,   171,    97,   102,
    32,    56,   245,   246,   396,   397,   398,    34,    35,    36,
   189,   354,    99,    37,   239,   464,   465,   229,   230,   231,
    38,   240,   107,   108,   110,   295
};

static const short yypact[] = {  1007,
    80,    94,    30,    44,   403,   120,  1067,  1034,  1123,   119,
   135,   334,   476,   138,  1134,   233,-32768,-32768,-32768,    49,
   358,-32768,-32768,-32768,-32768,-32768,   181,-32768,   306,   151,
-32768,-32768,    22,-32768,-32768,-32768,   414,   215,-32768,-32768,
  1078,-32768,   192,   220,-32768,-32768,-32768,   219,   232,   265,
   213,   213,  1123,  1142,    97,   265,   261,   250,   250,  1095,
   156,   303,-32768,   283,   282,   278,   315,   265,   329,   332,
    60,-32768,   309,   252,   311,   341,   213,  1153,-32768,   301,
-32768,   269,   269,-32768,-32768,-32768,  1034,   254,   439,   113,
-32768,   139,   229,   816,   143,   318,-32768,    79,   109,   289,
-32768,   269,-32768,-32768,   357,   354,-32768,-32768,-32768,   522,
-32768,   326,   338,-32768,    60,   974,-32768,   367,    30,   269,
   368,   348,   352,   378,     6,    32,-32768,-32768,  1123,   109,
   213,   385,-32768,   370,    13,   360,   361,   374,-32768,   385,
-32768,   510,   362,   269,   332,   329,-32768,-32768,   332,-32768,
-32768,   359,   974,   322,-32768,-32768,   208,   352,-32768,-32768,
-32768,   269,   269,-32768,-32768,-32768,   404,-32768,   816,   816,
   162,-32768,-32768,-32768,-32768,   375,   372,-32768,-32768,   381,
   377,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   386,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   816,-32768,-32768,-32768,
   718,   816,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   816,-32768,   385,    73,   426,   394,    14,
-32768,-32768,    39,-32768,   128,   109,   397,   417,-32768,-32768,
  1123,-32768,   571,   148,   253,-32768,   408,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1106,   424,   418,   425,
   421,   431,-32768,   367,   433,   434,-32768,   816,   426,-32768,
-32768,-32768,-32768,   385,  1048,-32768,   816,  1123,  1123,-32768,
-32768,-32768,-32768,   295,   437,   190,-32768,   265,-32768,-32768,
-32768,-32768,-32768,-32768,   430,-32768,-32768,   438,   443,   269,
   269,-32768,   445,   816,   436,   816,   448,   816,-32768,-32768,
-32768,-32768,  1078,   282,   194,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   718,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   444,   718,-32768,   767,-32768,
   447,   186,-32768,    46,-32768,-32768,  1123,-32768,-32768,   229,
   386,-32768,   250,-32768,   282,-32768,   718,  1078,   357,-32768,
-32768,   620,-32768,-32768,-32768,-32768,   816,    39,   367,   442,
   974,-32768,   450,-32768,-32768,-32768,-32768,-32768,   250,   510,
   250,   265,   867,-32768,-32768,-32768,-32768,-32768,-32768,   453,
   441,   109,-32768,   449,-32768,-32768,-32768,   460,   494,-32768,
   386,   282,   265,   462,   472,   109,   467,   464,-32768,-32768,
   816,   475,   477,-32768,   506,   473,   486,   265,-32768,   265,
   487,   490,   518,   439,    39,-32768,-32768,   904,   941,   669,
-32768,-32768,-32768,-32768,  1123,   481,   282,   109,-32768,   250,
-32768,-32768,   558,-32768,   568,   640,-32768,-32768,-32768,-32768,
-32768,   617,    39,   660,-32768,   699,   662,   109,-32768,   265,
   718,-32768,   708,-32768,   709,-32768,   109,  1123,-32768,   704,
-32768,-32768,-32768,   706,-32768,   109,-32768,   747,   748,-32768
};

static const short yypgoto[] = {-32768,
-32768,  -105,   -17,   751,   468,-32768,   328,-32768,   -53,    16,
    26,   658,-32768,-32768,-32768,   769,  -323,-32768,   -16,-32768,
-32768,-32768,-32768,   471,   -39,-32768,   451,   349,   -83,-32768,
   457,   -75,  -204,    -7,    -3,  -332,    28,-32768,   -50,    40,
    11,    10,-32768,   371,  -357,-32768,   396,     0,    19,-32768,
   388,  -387,   -58,    58,   553,-32768,-32768,  -378,-32768,   389,
    -4,  -122,   554,-32768,   -94,-32768
};


#define	YYLAST		1188


static const short yytable[] = {    55,
    61,    65,    57,    85,    47,    74,   130,   310,   243,    33,
   299,    79,    89,    42,    33,    50,   147,    62,   224,   400,
    68,    90,    62,   462,   454,   100,    63,    72,    91,   451,
    33,    49,     2,   114,     2,     3,   406,   307,    62,   236,
    98,   402,   308,   315,   407,   124,    43,   335,     2,   134,
    79,    84,    90,   101,   316,    82,    83,    96,   140,   467,
    50,    68,   146,   149,    20,    64,    20,    50,    68,    62,
    75,    98,    94,   497,   159,   402,   122,   123,   226,    90,
    20,    90,   235,   305,    98,   148,    68,   227,   168,   120,
   232,   330,   459,   344,   468,   332,    62,    68,    62,   125,
    98,   154,   158,   433,   228,    63,    94,   144,   126,    39,
   242,    40,   436,   412,   129,     2,   516,    75,   339,   162,
   163,   227,    48,     3,   232,    33,   237,   343,    93,   242,
   409,   355,   126,   238,    41,   309,   399,    67,     3,   400,
    68,   400,  -167,   410,    64,     2,     3,    20,   129,   534,
   400,   328,   512,    92,    20,    58,   311,   313,     2,    66,
   331,    59,    33,   530,   333,   320,    93,    54,    16,    20,
    17,    93,   169,    76,  -167,   170,   403,    20,   422,    41,
   525,   411,   408,   417,    94,    20,    95,   128,   418,   226,
    20,   129,     2,     3,   400,   347,   190,   191,   348,   340,
   341,   441,   192,   193,   194,   195,   196,   197,   198,   199,
   200,   201,    86,   202,   203,   121,     3,   337,   204,   169,
   205,   206,   170,   207,    20,   115,   208,   209,   210,   211,
   212,   172,   453,   415,   213,   214,   215,   216,   217,   218,
   219,   220,   221,   222,   223,   338,   109,    20,   -49,   116,
   117,   401,     2,     3,    92,   173,   167,     3,    80,    41,
    81,   118,   174,   175,   176,   177,   400,    93,   119,   178,
   179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     2,     3,   103,   419,    20,    94,    20,   129,    20,   424,
    58,     2,   127,   164,    10,   452,   131,   132,   134,   321,
   322,   323,    54,    16,   241,    17,   100,   140,     2,     3,
   437,   438,    20,   165,   104,   166,   106,   129,    58,   133,
    87,     9,    10,    20,    88,   476,   160,    60,   161,   493,
    54,    16,   145,    17,   146,   442,    69,    70,   153,   434,
    20,    71,   155,   501,   -84,   114,   141,   142,   233,   234,
   156,   471,   233,   336,   490,    41,   466,    -5,     1,   244,
     2,     3,   488,   489,   247,     4,     5,   296,   297,   300,
     6,     7,     8,     9,    10,   519,    11,   304,    12,    13,
   306,    14,    15,    16,   142,    17,    18,   312,   314,    19,
   334,   329,    20,   317,   318,   529,    -5,   -49,   -49,   227,
   -49,   -49,   232,   498,   533,     2,     3,   319,    41,   -49,
   114,   350,   349,   537,   242,     6,     7,     8,     9,    10,
   352,    11,   463,   351,    13,   486,   353,    15,    16,   404,
    17,   405,   413,   -84,   237,   342,   142,    20,   518,   421,
    33,     2,     3,   103,    41,   104,   105,   106,   478,   328,
   480,    58,    33,    87,     9,   425,   426,    59,   427,   428,
    60,   429,   431,    54,    16,   432,    17,   440,   444,   445,
   486,   486,   446,    20,   447,   448,    90,   449,     2,     3,
   475,   455,   492,   511,   458,    73,   494,   227,    58,   477,
   232,     9,   491,    62,    59,   495,   496,    33,    33,   499,
    54,    16,   500,    17,   502,   503,   504,   233,   505,   520,
    20,   506,     2,     3,   321,   322,   323,   507,   517,   508,
   227,   324,   509,   232,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,    20,   268,   269,   270,   271,   272,
   510,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   248,   249,   250,   251,   252,   253,   254,
   255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
   265,   266,   267,   521,   268,   269,   270,   271,   272,   522,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   416,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,   267,   523,   268,   269,   270,   271,   272,   524,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   470,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   248,   249,   250,   251,   252,   253,   254,   255,   256,
   257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
   267,   526,   268,   269,   270,   271,   272,   528,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   515,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
   366,   367,   368,   369,   370,   371,   527,   372,   373,   531,
   532,   535,   374,   536,   375,   376,   539,   540,   377,   378,
   379,   380,   381,   382,   383,    45,   474,   384,   385,   386,
   387,   388,   389,   390,   391,   392,   393,   394,   395,   190,
   191,   430,   298,    46,   439,   192,   193,   194,   195,   196,
   197,   198,   199,   200,   201,   435,   202,   203,   479,   469,
   414,   204,   456,   205,   206,   460,   207,   461,   420,   208,
   209,   210,   211,   212,   450,     0,   457,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   190,   191,
     0,     0,     0,     0,   192,   193,   194,   195,   196,   197,
   198,   199,   200,   201,     0,   202,   203,     0,     0,     0,
   204,     0,   205,   206,     0,   207,     0,     0,   208,   209,
   210,   211,   212,     0,     0,     0,   213,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,     1,     0,     2,
     3,   481,   482,   483,     4,     5,     0,     0,   484,     6,
     7,     8,     9,    10,     0,    11,     0,    12,    13,     0,
    14,    15,    16,     0,    17,    18,     0,     0,    19,     0,
     0,    20,     0,     0,     1,   485,     2,     3,   481,   482,
   483,     4,     5,     0,     0,   484,     6,     7,     8,     9,
    10,     0,    11,     0,    12,    13,     0,    14,    15,    16,
     0,    17,    18,     0,     0,    19,     0,     0,    20,     0,
     0,     1,   513,     2,     3,   481,   482,   483,     4,     5,
     0,     0,   484,     6,     7,     8,     9,    10,     0,    11,
     0,    12,    13,     0,    14,    15,    16,     0,    17,    18,
     0,     0,    19,     0,     1,    20,     2,     3,     0,   514,
     0,     4,     5,     0,     0,     0,     6,     7,     8,     9,
    10,     0,    11,     0,    12,    13,     0,    14,    15,    16,
     0,    17,    18,     0,     0,    19,    -4,     1,    20,     2,
     3,     0,    -4,     0,     4,     5,     0,     0,     0,     6,
     7,     8,     9,    10,     0,    11,     0,    12,    13,     0,
    14,    15,    16,     0,    17,    18,     2,     3,    19,     0,
     0,    20,     0,     0,     0,     0,    58,     0,     0,     9,
     2,     3,    59,     0,     0,    60,     0,     0,    54,    16,
    58,    17,     0,     0,    10,     0,   131,   132,    20,     2,
     3,     0,    54,    16,     0,    17,     0,     0,     0,    51,
     2,     3,    20,     0,     0,    52,    53,     0,   111,     0,
    58,    54,    16,     0,    17,     0,    59,     2,     3,     0,
     0,    20,    54,    16,     0,    17,     0,    58,     2,     3,
     9,     0,    20,    59,     0,     0,   423,     0,    58,    54,
    16,     0,    17,     0,    59,     2,     3,     0,     0,    20,
    54,    16,     0,    17,     0,    58,     2,     3,     0,     0,
    20,    59,     0,     0,     2,     3,    58,    54,    16,     0,
    17,     0,    77,     0,    58,     2,     3,    20,    78,    16,
    59,    17,     0,     0,     0,    58,    78,    16,    20,    17,
     0,    59,     0,     0,     0,     0,    20,     0,    16,     0,
    17,     0,     0,     0,     0,     0,     0,    20
};

static const short yycheck[] = {     7,
     8,     9,     7,    21,     5,    13,    65,   130,   103,     0,
   116,    15,    29,     3,     5,     6,    70,     8,    94,   224,
    11,    29,    13,   411,   382,     4,     8,    12,    29,   353,
    21,     6,     3,    41,     3,     4,    23,    32,    29,    98,
    30,     3,    37,    31,    31,    53,     3,   153,     3,    66,
    54,     3,    60,    32,    42,    16,    17,    30,    66,   417,
    51,    52,     3,     4,    35,     8,    35,    58,    59,    60,
    13,    61,    34,   461,    78,     3,    51,    52,    47,    87,
    35,    89,     4,   123,    74,    70,    77,    95,    89,    50,
    95,   145,    47,   169,   418,   149,    87,    88,    89,     3,
    90,    74,    77,   308,    95,    87,    34,    68,    36,    30,
   100,    32,   317,   236,    36,     3,   495,    60,   158,    80,
    81,   129,     3,     4,   129,   116,    18,   167,    16,   119,
     3,   207,    36,    25,    41,   126,   212,     3,     4,   344,
   131,   346,     4,    16,    87,     3,     4,    35,    36,   528,
   355,   142,   485,     3,    35,    13,   131,   132,     3,    41,
   145,    19,   153,   521,   149,   140,    16,    25,    26,    35,
    28,    16,    34,    36,    36,    37,   227,    35,   273,    41,
   513,   235,   233,    36,    34,    35,    36,    32,    41,    47,
    35,    36,     3,     4,   399,    34,     3,     4,    37,   160,
   161,    12,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    32,    20,    21,     3,     4,    10,    25,    34,
    27,    28,    37,    30,    35,    34,    33,    34,    35,    36,
    37,     3,    39,   241,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    38,    32,    35,    30,    30,
    32,   226,     3,     4,     3,    27,     3,     4,    26,    41,
    28,    30,    34,    35,    36,    37,   471,    16,     4,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
     3,     4,    30,    31,    35,    34,    35,    36,    35,   297,
    13,     3,    32,    25,    17,   354,    19,    20,   315,     5,
     6,     7,    25,    26,    16,    28,     4,   315,     3,     4,
   318,   319,    35,    45,    32,    47,    34,    36,    13,    42,
    15,    16,    17,    35,    19,   431,    26,    22,    28,   452,
    25,    26,     4,    28,     3,   326,     3,     4,    30,   314,
    35,     8,    32,   466,    30,   353,    32,    33,    31,    32,
    10,   427,    31,    32,   449,    41,   415,     0,     1,     3,
     3,     4,   446,   447,    11,     8,     9,    42,    31,     3,
    13,    14,    15,    16,    17,   498,    19,    30,    21,    22,
     3,    24,    25,    26,    33,    28,    29,     3,    19,    32,
    32,    30,    35,    34,    34,   518,    39,    30,    31,   407,
    33,    34,   407,   462,   527,     3,     4,    34,    41,    42,
   418,    40,    38,   536,   404,    13,    14,    15,    16,    17,
    44,    19,   413,    43,    22,   443,    41,    25,    26,     4,
    28,    38,    36,    30,    18,    32,    33,    35,   497,    32,
   431,     3,     4,    30,    41,    32,    33,    34,   439,   440,
   441,    13,   443,    15,    16,    32,    39,    19,    34,    39,
    22,    31,    30,    25,    26,    32,    28,    31,    39,    32,
   488,   489,    30,    35,    30,    40,   484,    30,     3,     4,
    39,    38,    42,   484,    38,    10,    38,   495,    13,    40,
   495,    16,    40,   484,    19,    36,     3,   488,   489,    38,
    25,    26,    31,    28,    38,    42,    32,    31,     3,   500,
    35,    39,     3,     4,     5,     6,     7,    32,    38,    33,
   528,    12,    33,   528,     3,     4,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    35,    24,    25,    26,    27,    28,
    33,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    36,    24,    25,    26,    27,    28,    32,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,     3,     4,     5,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,     3,    24,    25,    26,    27,    28,    32,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,     3,     4,     5,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    32,    24,    25,    26,    27,    28,    36,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    38,    20,    21,    32,
    32,    38,    25,    38,    27,    28,     0,     0,    31,    32,
    33,    34,    35,    36,    37,     5,   429,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,     3,
     4,   304,   115,     5,   324,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,   315,    20,    21,   440,   419,
   238,    25,   397,    27,    28,   407,    30,   410,   245,    33,
    34,    35,    36,    37,   348,    -1,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,     3,     4,
    -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    -1,    20,    21,    -1,    -1,    -1,
    25,    -1,    27,    28,    -1,    30,    -1,    -1,    33,    34,
    35,    36,    37,    -1,    -1,    -1,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,     1,    -1,     3,
     4,     5,     6,     7,     8,     9,    -1,    -1,    12,    13,
    14,    15,    16,    17,    -1,    19,    -1,    21,    22,    -1,
    24,    25,    26,    -1,    28,    29,    -1,    -1,    32,    -1,
    -1,    35,    -1,    -1,     1,    39,     3,     4,     5,     6,
     7,     8,     9,    -1,    -1,    12,    13,    14,    15,    16,
    17,    -1,    19,    -1,    21,    22,    -1,    24,    25,    26,
    -1,    28,    29,    -1,    -1,    32,    -1,    -1,    35,    -1,
    -1,     1,    39,     3,     4,     5,     6,     7,     8,     9,
    -1,    -1,    12,    13,    14,    15,    16,    17,    -1,    19,
    -1,    21,    22,    -1,    24,    25,    26,    -1,    28,    29,
    -1,    -1,    32,    -1,     1,    35,     3,     4,    -1,    39,
    -1,     8,     9,    -1,    -1,    -1,    13,    14,    15,    16,
    17,    -1,    19,    -1,    21,    22,    -1,    24,    25,    26,
    -1,    28,    29,    -1,    -1,    32,     0,     1,    35,     3,
     4,    -1,    39,    -1,     8,     9,    -1,    -1,    -1,    13,
    14,    15,    16,    17,    -1,    19,    -1,    21,    22,    -1,
    24,    25,    26,    -1,    28,    29,     3,     4,    32,    -1,
    -1,    35,    -1,    -1,    -1,    -1,    13,    -1,    -1,    16,
     3,     4,    19,    -1,    -1,    22,    -1,    -1,    25,    26,
    13,    28,    -1,    -1,    17,    -1,    19,    20,    35,     3,
     4,    -1,    25,    26,    -1,    28,    -1,    -1,    -1,    13,
     3,     4,    35,    -1,    -1,    19,    20,    -1,    11,    -1,
    13,    25,    26,    -1,    28,    -1,    19,     3,     4,    -1,
    -1,    35,    25,    26,    -1,    28,    -1,    13,     3,     4,
    16,    -1,    35,    19,    -1,    -1,    11,    -1,    13,    25,
    26,    -1,    28,    -1,    19,     3,     4,    -1,    -1,    35,
    25,    26,    -1,    28,    -1,    13,     3,     4,    -1,    -1,
    35,    19,    -1,    -1,     3,     4,    13,    25,    26,    -1,
    28,    -1,    19,    -1,    13,     3,     4,    35,    25,    26,
    19,    28,    -1,    -1,    -1,    13,    25,    26,    35,    28,
    -1,    19,    -1,    -1,    -1,    -1,    35,    -1,    26,    -1,
    28,    -1,    -1,    -1,    -1,    -1,    -1,    35
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 78 "cxx.y"
{ results = yyvsp[0]; ;
    break;}
case 2:
#line 83 "cxx.y"
{ ScopeC ol(STR(extdefs)); yyval=ol; ol.Append(yyvsp[0]);  ;
    break;}
case 3:
#line 84 "cxx.y"
{ ObjectListC ol(yyvsp[-1]); yyval=yyvsp[-1]; ol.Append(yyvsp[0]);  ;
    break;}
case 4:
#line 87 "cxx.y"
{ ScopeC ol(STR(extdefs)); yyval=ol; ;
    break;}
case 5:
#line 88 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 6:
#line 91 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 7:
#line 92 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 8:
#line 93 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 9:
#line 94 "cxx.y"
{ yyval=yyvsp[0]; yyval.SetVar(STR(static),STR(1)); ;
    break;}
case 10:
#line 95 "cxx.y"
{ yyval=yyvsp[0]; yyval.SetVar(STR(static),STR(1)); ;
    break;}
case 11:
#line 96 "cxx.y"
{ yyval=yyvsp[0]; yyval.SetVar(STR(static),STR(1)); ;
    break;}
case 12:
#line 97 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 13:
#line 98 "cxx.y"
{ yyval=ScopeC(yyvsp[-3].Name(),yyvsp[-1]); 
							   yyval.UpdateComment(yyvsp[-4].Comment());
    	                                                   yyval.SetVar(STR(dectype),STR(definition));
                                                           yyval.SetVar(STR(storageType),STR(namespace));
	                                                 ;
    break;}
case 14:
#line 103 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 15:
#line 104 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 16:
#line 105 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 17:
#line 106 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 18:
#line 107 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 19:
#line 108 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 20:
#line 109 "cxx.y"
{ 
	                     yyval=DocNodeC(StringC("anon?") + StringC(anonCount++)); 
          		     hookCommentObj = yyval;
                           ;
    break;}
case 21:
#line 116 "cxx.y"
{ ObjectListC ol(yyvsp[-1]);
						   ObjectListC ret(STR(varList),true);
						   for(DLIterC<ObjectC> it(ol.List());it.IsElm();it.Next()) {
						     VariableC avar(yyvsp[-2],it.Data().Name());
						     ret.Append(avar);
						   }
          				           hookCommentObj = ret; 
                                                   yyval.SetupLineNos(yyvsp[-2],yyvsp[0]);
						   yyval=ret;
                                                 ;
    break;}
case 22:
#line 126 "cxx.y"
{ yyval=TypedefC(yyvsp[-1].Name(),yyvsp[-2]);
                                                   yyval.SetupLineNos(yyvsp[-3],yyvsp[0]);
          				           hookCommentObj = yyval; 
                                                 ;
    break;}
case 23:
#line 131 "cxx.y"
{ yyvsp[-5].SetVar(STR(array),STR(1)); 
                                                               yyval=TypedefC(yyvsp[-4].Name(),yyvsp[-5]); 
          				                       hookCommentObj = yyval; 
                                                               yyval.SetupLineNos(yyvsp[-6],yyvsp[0]);
                                                             ;
    break;}
case 24:
#line 136 "cxx.y"
{ yyval=TypedefC(yyvsp[-1].Name(),yyvsp[-2]); 
                                                               yyval.SetupLineNos(yyvsp[-4],yyvsp[0]);
          				                       hookCommentObj = yyval;
                                                             ;
    break;}
case 25:
#line 140 "cxx.y"
{ DataTypeC dt(yyvsp[-1]);
                                                               yyval=TypedefC(dt.Alias(),dt);
                                                               yyval.SetupLineNos(yyvsp[-2],yyvsp[0]);
          				                       hookCommentObj = yyval; 
                                                             ;
    break;}
case 26:
#line 146 "cxx.y"
{ 
							       StringC className;
							       if(yyvsp[-6].IsValid())
								 className = yyvsp[-6].Name();
							       else 
								 className = StringC("anon?") + StringC(anonCount++);
							       ClassC aclass(className,yyvsp[-3],yyvsp[-5]);
                                                               aclass.SetVar(STR(dectype),STR(definition));
                                                               aclass.SetVar(STR(storageType),yyvsp[-7].Name());
							       TypedefC td(yyvsp[-2].Name(),DataTypeC(className));
							       td.SetDefinition(aclass);
							       ObjectListC ret(STR(x),true);
							       ret.Append(td);
							       if(yyvsp[-6].IsValid())
								 ret.Append(aclass);
                                                               yyval.SetupLineNos(yyvsp[-8],yyvsp[0]);
							       yyval = ret;
          				                       hookCommentObj = yyval;
							     ;
    break;}
case 27:
#line 165 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 28:
#line 166 "cxx.y"
{ 
							       StringC enumName;
							       if(yyvsp[-5].IsValid())
								 enumName = yyvsp[-5].Name();
							       else 
								 enumName = StringC("anon_enum?") + StringC(anonCount++);
                                                               EnumC anEnum(enumName,yyvsp[-3]);
                                                               anEnum.SetVar(STR(dectype),STR(definition));
                                                               anEnum.SetVar(STR(storageType),STR(enum));
							       TypedefC td(yyvsp[-1].Name(),DataTypeC(enumName));
							       td.SetDefinition(anEnum);
							       ObjectListC ret("x",true);
							       ret.Append(td);
							       if(yyvsp[-5].IsValid())
								 ret.Append(anEnum);
                                                               yyval.SetupLineNos(yyvsp[-7],yyvsp[0]);
							       yyval = ret;
          				                       hookCommentObj = yyval;
                                                             ;
    break;}
case 29:
#line 185 "cxx.y"
{
                                                  if(yyvsp[-5].IsValid())
						    yyval=EnumC(yyvsp[-5].Name(),yyvsp[-3]);
						  else
						    yyval=EnumC(StringC("anon_enum?") + StringC(anonCount++),yyvsp[-3]);
						  hookCommentObj = yyval;
                                                ;
    break;}
case 30:
#line 192 "cxx.y"
{ yyval=ClassC(yyvsp[-1].Name());
						  yyval.UpdateComment(yyvsp[-2].Comment()); 
						  yyval.SetVar(STR(storageType),yyvsp[-2].Name());
                                                  yyval.SetVar(STR(dectype),STR(forward));
                                                ;
    break;}
case 31:
#line 197 "cxx.y"
{ yyval=EnumC(yyvsp[-1].Name());
						  yyval.UpdateComment(yyvsp[-2].Comment()); 
						  yyval.SetVar(STR(storageType),STR(enum));
                                                  yyval.SetVar(STR(dectype),STR(forward));
                                                ;
    break;}
case 32:
#line 202 "cxx.y"
{ yyval=yyvsp[-1]; 
                                                  yyval.SetVar(STR(dectype),STR(friend));  
                                                ;
    break;}
case 33:
#line 206 "cxx.y"
{ 
						  ClassC newClass(yyvsp[-6].Name(),yyvsp[-3],yyvsp[-5]);
						  yyval = newClass;
						  yyval.UpdateComment(yyvsp[-7].Comment()); 
						  yyval.SetupLineNos(yyvsp[-7],yyvsp[0]);
						  newClass.SetVar(STR(dectype),STR(definition));
						  newClass.SetVar(STR(storageType),yyvsp[-7].Name());
						;
    break;}
case 34:
#line 214 "cxx.y"
{
                                                  StringC nname;
						  if(yyvsp[-6].IsValid())
						    nname = yyvsp[-6].Name();
						  else
						    nname = StringC("anon_struct?") + StringC(anonCount++);
						  ClassC newClass(nname,yyvsp[-3],yyvsp[-5]);
						  yyval = newClass;
						  yyval.UpdateComment(yyvsp[-8].Comment()); 
						  yyval.SetupLineNos(yyvsp[-8],yyvsp[-1]);
						  newClass.SetVar(STR(dectype),STR(definition));
						  newClass.SetVar(STR(storageType),yyvsp[-7].Name());
                                                ;
    break;}
case 35:
#line 227 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 36:
#line 228 "cxx.y"
{ yyval = yyvsp[-1]; ObjectListC ol(yyvsp[-1]); ol.SetWrapper(true); ;
    break;}
case 37:
#line 229 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 38:
#line 233 "cxx.y"
{ ObjectListC ol(STR(EnumNameList)); yyval=ol; ;
    break;}
case 39:
#line 234 "cxx.y"
{ yyval=yyvsp[0];
    break;}
case 40:
#line 236 "cxx.y"
{ ObjectListC ol(STR(VarNameList)); ol.Append(yyvsp[0]); yyval = ol;  ;
    break;}
case 41:
#line 237 "cxx.y"
{ ObjectListC ol(yyvsp[-2]); ol.Append(yyvsp[0]); yyval = ol; ;
    break;}
case 42:
#line 239 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 43:
#line 240 "cxx.y"
{ yyval = yyvsp[-2].Name() +  StringC(" = ") + yyvsp[0].Name(); ;
    break;}
case 46:
#line 252 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 47:
#line 255 "cxx.y"
{ yyval = yyvsp[-2].Name() + strp_ColonColon + yyvsp[0].Name(); ;
    break;}
case 48:
#line 256 "cxx.y"
{ yyval = yyvsp[-2].Name() + strp_ColonColon + yyvsp[0].Name(); ;
    break;}
case 49:
#line 259 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 50:
#line 260 "cxx.y"
{ yyval=ObjectC(); ;
    break;}
case 51:
#line 264 "cxx.y"
{ yyval = yyvsp[0]; ;
    break;}
case 52:
#line 265 "cxx.y"
{ yyval = yyvsp[0]; ;
    break;}
case 53:
#line 266 "cxx.y"
{ yyval=ObjectC(strp_ColonColon + yyvsp[0].Name()); ;
    break;}
case 54:
#line 267 "cxx.y"
{ yyval=ObjectC(strp_ColonColon + yyvsp[0].Name()); ;
    break;}
case 56:
#line 277 "cxx.y"
{
	    InheritC inh(SAPublic,true);
	    inh.SetScopeDef(yyvsp[-1]);  
	    yyval = inh;
	  ;
    break;}
case 60:
#line 297 "cxx.y"
{ yyval =  ClassTemplateC(yyvsp[-5].Name(),yyvsp[-2],yyvsp[-4],yyvsp[-7]);
						  yyval.SetVar(STR(dectype),STR(definition));
						  yyval.SetVar(STR(storageType),yyvsp[-6].Name());
						  yyval.UpdateComment(yyvsp[-7].Comment());
						;
    break;}
case 61:
#line 302 "cxx.y"
{ yyval = ClassTemplateC(yyvsp[-1].Name(),yyvsp[-3]); 
						    yyval.SetVar(STR(dectype),STR(forward));
						    yyval.SetVar(STR(storageType),yyvsp[-2].Name());
						    yyval.UpdateComment(yyvsp[-3].Comment());
                                                  ;
    break;}
case 62:
#line 307 "cxx.y"
{ yyval = yyvsp[0];
                                                    ObjectListC ol1(yyvsp[-1]);
						    yyval.UpdateComment(yyvsp[-1].Comment());
                                                  ;
    break;}
case 63:
#line 311 "cxx.y"
{ yyval = yyvsp[0];
                                                    ObjectListC ol1(yyvsp[-2]);
                                                    ObjectListC ol2(yyvsp[-1]);
						    yyval.UpdateComment(yyvsp[-2].Comment());
                                                  ;
    break;}
case 64:
#line 321 "cxx.y"
{ yyval=ObjectListC(STR(TemplateInstArgs)); ;
    break;}
case 65:
#line 322 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 66:
#line 325 "cxx.y"
{ ObjectListC ol(STR(TemplateInstArgs)); yyval=ol; ol.Append(yyvsp[0]); ;
    break;}
case 67:
#line 326 "cxx.y"
{ ObjectListC ol(STR(TemplateInstArgs)); yyval=ol; ol.Append(yyvsp[0]); ;
    break;}
case 68:
#line 327 "cxx.y"
{ ObjectListC ol(yyvsp[-2]); yyval=yyvsp[-2]; ol.Append(yyvsp[0]); ;
    break;}
case 69:
#line 328 "cxx.y"
{ ObjectListC ol(yyvsp[-2]); yyval=yyvsp[-2]; ol.Append(yyvsp[0]); ;
    break;}
case 70:
#line 332 "cxx.y"
{ yyval=yyvsp[-1]; yyval.UpdateComment(yyvsp[-3].Comment()); ;
    break;}
case 71:
#line 333 "cxx.y"
{ yyval=ObjectListC(STR(TemplateDefArgs)); yyval.UpdateComment(yyvsp[-2].Comment()); ;
    break;}
case 72:
#line 336 "cxx.y"
{ ObjectListC ol(STR(TemplateDefArgs)); yyval=ol; ol.Append(yyvsp[0]); ;
    break;}
case 73:
#line 337 "cxx.y"
{ yyval=yyvsp[-2]; ObjectListC ol(yyvsp[-2]); ol.Append(yyvsp[0]); ;
    break;}
case 74:
#line 340 "cxx.y"
{ yyval=yyvsp[-1]; 
                                      if(yyvsp[0].IsValid()) { 
                                        DataTypeC dt(yyvsp[-1]); 
					dt.SetAlias(yyvsp[0].Name()); 
                                      } 
                                    ;
    break;}
case 75:
#line 349 "cxx.y"
{ yyval= DataTypeC(STR(class),yyvsp[0]); ;
    break;}
case 76:
#line 350 "cxx.y"
{ yyval= DataTypeC(STR(typename),yyvsp[0]);  ;
    break;}
case 77:
#line 354 "cxx.y"
{ yyval=ObjectC("template<> class " + yyvsp[-2].Name()); ;
    break;}
case 78:
#line 365 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 79:
#line 366 "cxx.y"
{ yyval=yyvsp[-2]; ;
    break;}
case 80:
#line 367 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 81:
#line 368 "cxx.y"
{ yyval=yyvsp[-2]; ;
    break;}
case 82:
#line 369 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 83:
#line 370 "cxx.y"
{ yyval=yyvsp[-2]; ;
    break;}
case 84:
#line 383 "cxx.y"
{ yyval=ObjectListC(STR(classInherit)); ;
    break;}
case 85:
#line 384 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 86:
#line 387 "cxx.y"
{ yyval = yyvsp[-2]; ObjectListC ol(yyvsp[-2]); ol.Append(yyvsp[0]);  ;
    break;}
case 87:
#line 388 "cxx.y"
{ ObjectListC ol(STR(classInherit),true); ol.Append(yyvsp[0]); yyval = ol; ;
    break;}
case 88:
#line 390 "cxx.y"
{ yyval = InheritC(SAPublic);    yyval.CopyLineNo(yyvsp[0]); ;
    break;}
case 89:
#line 391 "cxx.y"
{ yyval = InheritC(SAPrivate);   yyval.CopyLineNo(yyvsp[0]); ;
    break;}
case 90:
#line 392 "cxx.y"
{ yyval = InheritC(SAProtected); yyval.CopyLineNo(yyvsp[0]); ;
    break;}
case 91:
#line 394 "cxx.y"
{ yyval = yyvsp[-1];
							  InheritC inh(yyval);
							  inh.SetScopeDef(yyvsp[0]);
							;
    break;}
case 92:
#line 398 "cxx.y"
{ yyval = yyvsp[-1];
                                                          InheritC inh(yyval);
							  inh.SetScopeDef(yyvsp[0]);
							  inh.SetVirtual(true);
							;
    break;}
case 93:
#line 403 "cxx.y"
{ yyval = yyvsp[-2];
                                                          InheritC inh(yyval);
							  inh.SetScopeDef(yyvsp[0]);
							  inh.SetVirtual(true);
							;
    break;}
case 94:
#line 408 "cxx.y"
{ yyval = InheritC(SAPrivate);
                                                          InheritC inh(yyval);
							  inh.SetScopeDef(yyvsp[0]);
							;
    break;}
case 95:
#line 414 "cxx.y"
{ yyval = ObjectListC(STR(ClassContents)); ;
    break;}
case 96:
#line 415 "cxx.y"
{ ObjectListC ol(yyvsp[-1]); ol.Append(yyvsp[0]); yyval = ol; ;
    break;}
case 97:
#line 417 "cxx.y"
{ yyval = MarkerC(STR(protected)); yyval.SetupLineNos(yyvsp[-1],yyvsp[0]); ;
    break;}
case 98:
#line 418 "cxx.y"
{ yyval = MarkerC(STR(private));   yyval.SetupLineNos(yyvsp[-1],yyvsp[0]); ;
    break;}
case 99:
#line 419 "cxx.y"
{ yyval = MarkerC(STR(public));    yyval.SetupLineNos(yyvsp[-1],yyvsp[0]); ;
    break;}
case 100:
#line 420 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 101:
#line 421 "cxx.y"
{ yyval=yyvsp[0]; yyval.SetVar(STR(virtual),STR(1)); ;
    break;}
case 102:
#line 425 "cxx.y"
{ yyval=ObjectC(""); ;
    break;}
case 103:
#line 426 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 104:
#line 428 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 105:
#line 429 "cxx.y"
{ yyval = yyvsp[-1].Name() + ' ' +  yyvsp[0].Name(); ;
    break;}
case 106:
#line 431 "cxx.y"
{ yyval=ObjectC(strp_OpenBracket + yyvsp[-1].Name() + strp_CloseBracket); ;
    break;}
case 107:
#line 432 "cxx.y"
{ yyval=ObjectC(StringC("[") + yyvsp[-1].Name() + "]"); ;
    break;}
case 108:
#line 433 "cxx.y"
{ yyval=ObjectC(StringC("{") + yyvsp[-1].Name() + "}"); ;
    break;}
case 115:
#line 435 "cxx.y"
{ yyval=ObjectC("<"); ;
    break;}
case 116:
#line 436 "cxx.y"
{ yyval=ObjectC(">"); ;
    break;}
case 117:
#line 437 "cxx.y"
{ yyval=ObjectC(strp_equals); ;
    break;}
case 118:
#line 438 "cxx.y"
{ yyval=ObjectC(strp_plus); ;
    break;}
case 119:
#line 439 "cxx.y"
{ yyval=ObjectC("-"); ;
    break;}
case 120:
#line 440 "cxx.y"
{ yyval=ObjectC("~"); ;
    break;}
case 121:
#line 441 "cxx.y"
{ yyval=ObjectC(strp_ampersand); ;
    break;}
case 122:
#line 442 "cxx.y"
{ yyval=ObjectC("/"); ;
    break;}
case 123:
#line 443 "cxx.y"
{ yyval=ObjectC(strp_asterisk); ;
    break;}
case 124:
#line 444 "cxx.y"
{ yyval=ObjectC("%"); ;
    break;}
case 125:
#line 445 "cxx.y"
{ yyval=ObjectC("|"); ;
    break;}
case 126:
#line 446 "cxx.y"
{ yyval=ObjectC("^"); ;
    break;}
case 127:
#line 447 "cxx.y"
{ yyval=ObjectC("!"); ;
    break;}
case 128:
#line 448 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 129:
#line 449 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 130:
#line 450 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 131:
#line 451 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 132:
#line 452 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 133:
#line 453 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 134:
#line 454 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 135:
#line 455 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 136:
#line 456 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 137:
#line 457 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 138:
#line 458 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 139:
#line 459 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 140:
#line 463 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 141:
#line 464 "cxx.y"
{ yyval=yyvsp[0]; DataTypeC dt(yyvsp[0]); dt.SetPreQual(yyvsp[-1].Name()); ;
    break;}
case 142:
#line 465 "cxx.y"
{ yyval=yyvsp[0]; DataTypeC dt(yyvsp[0]); dt.SetPreQual(yyvsp[-2].Name() + " " + yyvsp[-1].Name()); ;
    break;}
case 143:
#line 468 "cxx.y"
{ yyval=DataTypeC(StringC(""),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetupLineNos(yyvsp[-1],yyvsp[0]); 
                                                 ;
    break;}
case 144:
#line 471 "cxx.y"
{ yyval=DataTypeC(yyvsp[-2].Name(),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetVar(STR(storageType),yyvsp[-2].Name());
	                                           yyval.SetupLineNos(yyvsp[-2],yyvsp[-1],yyvsp[0]); 
	                                         ;
    break;}
case 145:
#line 475 "cxx.y"
{ yyval=DataTypeC(yyvsp[-2].Name(),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetVar(STR(storageType),yyvsp[-2].Name());
	                                           yyval.SetupLineNos(yyvsp[-2],yyvsp[-1],yyvsp[0]); 
	                                         ;
    break;}
case 146:
#line 479 "cxx.y"
{ yyval=DataTypeC(StringC(""),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetupLineNos(yyvsp[-1],yyvsp[0]);
	                                         ;
    break;}
case 147:
#line 482 "cxx.y"
{ yyval=DataTypeC(StringC(""),yyvsp[-1], yyvsp[0].Name()); 
                                                   yyval.SetupLineNos(yyvsp[-1],yyvsp[0]); 
                                                 ;
    break;}
case 148:
#line 485 "cxx.y"
{ yyval=DataTypeC(yyvsp[-2].Name(),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetupLineNos(yyvsp[-2],yyvsp[-1],yyvsp[0]); 
	                                         ;
    break;}
case 149:
#line 488 "cxx.y"
{ yyval=DataTypeC(yyvsp[-2].Name(),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetupLineNos(yyvsp[-2],yyvsp[-1],yyvsp[0]); 
	                                         ;
    break;}
case 150:
#line 491 "cxx.y"
{ yyval=DataTypeC(yyvsp[-3].Name() + " " + yyvsp[-2].Name(),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetupLineNos(yyvsp[-3],yyvsp[-1],yyvsp[0]); 
	                                         ;
    break;}
case 151:
#line 494 "cxx.y"
{ yyval=DataTypeC(yyvsp[-3].Name() + " " + yyvsp[-2].Name(),yyvsp[-1],yyvsp[0].Name()); 
	                                           yyval.SetupLineNos(yyvsp[-3],yyvsp[-1],yyvsp[0]);
	                                         ;
    break;}
case 152:
#line 499 "cxx.y"
{ yyval=ObjectListC(STR(VarNameList)); ;
    break;}
case 153:
#line 500 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 154:
#line 502 "cxx.y"
{ ObjectListC ol(STR(VarNameList)); ol.Append(yyvsp[0]); yyval = ol; ;
    break;}
case 155:
#line 503 "cxx.y"
{ ObjectListC ol(yyvsp[-2]); ol.Append(yyvsp[0]); yyval = ol; ;
    break;}
case 156:
#line 505 "cxx.y"
{ yyval=ObjectC("[]"); ;
    break;}
case 157:
#line 506 "cxx.y"
{ yyval=yyvsp[-3]; yyvsp[-3].Name() += "[]" ;
    break;}
case 158:
#line 508 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 159:
#line 509 "cxx.y"
{ yyval=yyvsp[-2]; yyvsp[-2].Name() += StringC(" = ") + yyvsp[0].Name(); ;
    break;}
case 160:
#line 510 "cxx.y"
{ yyval=yyvsp[-1]; yyvsp[-1].Name() += yyvsp[0].Name(); yyval.SetVar(STR(array),STR(1)); ;
    break;}
case 161:
#line 512 "cxx.y"
{ yyval=yyvsp[-5]; yyvsp[-5].Name() += yyvsp[-4].Name(); yyval.SetVar(STR(array),STR(1)); ;
    break;}
case 162:
#line 513 "cxx.y"
{ yyval=yyvsp[0]; yyvsp[0].Name() = StringC(" = ") + yyvsp[0].Name(); ;
    break;}
case 163:
#line 515 "cxx.y"
{ yyval=ObjectC(""); ;
    break;}
case 164:
#line 516 "cxx.y"
{ yyval=yyvsp[-1]; yyval.Name() += strp_asterisk;  ;
    break;}
case 165:
#line 517 "cxx.y"
{ yyval=yyvsp[-1]; yyval.Name() += strp_ampersand;  ;
    break;}
case 166:
#line 518 "cxx.y"
{ yyval=yyvsp[-1]; yyval.Name() += yyvsp[0].Name();  ;
    break;}
case 167:
#line 520 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 168:
#line 521 "cxx.y"
{ yyval = ObjectC(StringC("~") + yyvsp[0].Name()); yyval.CopyLineNo(yyvsp[0]); ;
    break;}
case 169:
#line 522 "cxx.y"
{ yyval = ObjectTemplateC(yyvsp[-3].Name(),yyvsp[-1]); ;
    break;}
case 170:
#line 526 "cxx.y"
{ ObjectListC ol(yyvsp[0].Name()); ol.Append(yyvsp[0]); yyval=ol; yyval.CopyLineNo(yyvsp[0]); ;
    break;}
case 171:
#line 527 "cxx.y"
{ ObjectListC ol(yyvsp[0].Name()); 
                                       ObjectC newun(strp_ColonColon);
                                       ol.Append(newun);
				       ol.Append(yyvsp[0]);
				       yyval = ol;
                                     ;
    break;}
case 172:
#line 533 "cxx.y"
{ ObjectListC ol(yyvsp[-2]); 
				       ol.Append(yyvsp[0]);
				       ol.Name() = yyvsp[0].Name();  // Give name of last component to list.
				       yyval = ol;
                                     ;
    break;}
case 177:
#line 547 "cxx.y"
{ yyval =ObjectC(""); ;
    break;}
case 178:
#line 548 "cxx.y"
{ yyval = yyvsp[0]; ;
    break;}
case 179:
#line 550 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 180:
#line 551 "cxx.y"
{ yyvsp[-1] = yyvsp[-1].Name() + yyvsp[0].Name(); ;
    break;}
case 181:
#line 553 "cxx.y"
{ yyval=ObjectC(strp_OpenBracket + yyvsp[-1].Name() + strp_CloseBracket); ;
    break;}
case 203:
#line 558 "cxx.y"
{ yyval=ObjectC(strp_Colon); ;
    break;}
case 204:
#line 559 "cxx.y"
{ yyval=ObjectC("<"); ;
    break;}
case 205:
#line 560 "cxx.y"
{ yyval=ObjectC(">"); ;
    break;}
case 206:
#line 561 "cxx.y"
{ yyval=ObjectC(strp_equals); ;
    break;}
case 207:
#line 562 "cxx.y"
{ yyval=ObjectC(strp_plus); ;
    break;}
case 208:
#line 563 "cxx.y"
{ yyval=ObjectC("-"); ;
    break;}
case 209:
#line 564 "cxx.y"
{ yyval=ObjectC(strp_Tilda); ;
    break;}
case 210:
#line 565 "cxx.y"
{ yyval=ObjectC(strp_ampersand); ;
    break;}
case 211:
#line 566 "cxx.y"
{ yyval=ObjectC("/"); ;
    break;}
case 212:
#line 567 "cxx.y"
{ yyval=ObjectC(strp_asterisk); ;
    break;}
case 213:
#line 568 "cxx.y"
{ yyval=ObjectC("%"); ;
    break;}
case 214:
#line 569 "cxx.y"
{ yyval=ObjectC("|"); ;
    break;}
case 215:
#line 570 "cxx.y"
{ yyval=ObjectC("^"); ;
    break;}
case 216:
#line 571 "cxx.y"
{ yyval=ObjectC("!"); ;
    break;}
case 217:
#line 572 "cxx.y"
{ yyval=ObjectC("["); ;
    break;}
case 218:
#line 573 "cxx.y"
{ yyval=ObjectC("]"); ;
    break;}
case 219:
#line 574 "cxx.y"
{ yyval=ObjectC(strp_Semicolon); ;
    break;}
case 220:
#line 575 "cxx.y"
{ yyval=ObjectC(strp_Comma); ;
    break;}
case 221:
#line 580 "cxx.y"
{ yyval=yyvsp[0]; hookCommentObj = yyvsp[0];  ;
    break;}
case 222:
#line 581 "cxx.y"
{ yyval=yyvsp[0]; hookCommentObj = yyvsp[0];  ;
    break;}
case 223:
#line 582 "cxx.y"
{ yyval=yyvsp[0]; 
                                          yyval.SetVar(STR(dectype),STR(friend));
					  yyval.IncludeLineNo(yyvsp[-1]);
					  hookCommentObj = yyvsp[0];
                                        ;
    break;}
case 224:
#line 588 "cxx.y"
{ yyval = yyvsp[-1]; 
                                          yyval.SetVar(STR(dectype),STR(prototype)); 
					  yyval.IncludeLineNo(yyvsp[0]);
                                        ;
    break;}
case 225:
#line 592 "cxx.y"
{ yyval=yyvsp[-3];   /* "=0"; */
                                          yyval.SetVar(STR(dectype),STR(abstract));
					  yyval.IncludeLineNo(yyvsp[0]);
                                        ;
    break;}
case 226:
#line 596 "cxx.y"
{ yyval=yyvsp[-1]; 
                                          yyval.SetVar(STR(dectype),STR(extern));    
					  yyval.IncludeLineNo(yyvsp[0]);
                                        ;
    break;}
case 227:
#line 602 "cxx.y"
{ yyval = yyvsp[-1];
                                             yyval.SetVar(STR(dectype),STR(definition)); 
					     yyval.IncludeLineNo(yyvsp[0]);
                                           ;
    break;}
case 228:
#line 607 "cxx.y"
{ yyval=ObjectC(strp_plus); ;
    break;}
case 229:
#line 608 "cxx.y"
{ yyval=ObjectC("-"); ;
    break;}
case 230:
#line 609 "cxx.y"
{ yyval=ObjectC(strp_Tilda); ;
    break;}
case 231:
#line 610 "cxx.y"
{ yyval=ObjectC(strp_ampersand); ;
    break;}
case 232:
#line 611 "cxx.y"
{ yyval=ObjectC("/"); ;
    break;}
case 233:
#line 612 "cxx.y"
{ yyval=ObjectC(strp_asterisk); ;
    break;}
case 234:
#line 613 "cxx.y"
{ yyval=ObjectC("%"); ;
    break;}
case 235:
#line 614 "cxx.y"
{ yyval=ObjectC("|"); ;
    break;}
case 236:
#line 615 "cxx.y"
{ yyval=ObjectC("^"); ;
    break;}
case 237:
#line 616 "cxx.y"
{ yyval=ObjectC("!"); ;
    break;}
case 238:
#line 617 "cxx.y"
{ yyval=ObjectC(strp_equals); ;
    break;}
case 239:
#line 618 "cxx.y"
{ yyval=ObjectC("<"); ;
    break;}
case 240:
#line 619 "cxx.y"
{ yyval=ObjectC(">"); ;
    break;}
case 241:
#line 620 "cxx.y"
{ yyval=ObjectC("--"); ;
    break;}
case 242:
#line 621 "cxx.y"
{ yyval=ObjectC("++"); ;
    break;}
case 243:
#line 622 "cxx.y"
{ yyval=ObjectC("[]"); ;
    break;}
case 244:
#line 623 "cxx.y"
{ yyval=ObjectC("()"); ;
    break;}
case 245:
#line 624 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 246:
#line 625 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 247:
#line 627 "cxx.y"
{ yyval = ObjectListC(STR(EmptyArgList)); ;
    break;}
case 248:
#line 628 "cxx.y"
{ yyval = yyvsp[-1]; ;
    break;}
case 249:
#line 631 "cxx.y"
{ yyval = yyvsp[-1]; ;
    break;}
case 250:
#line 635 "cxx.y"
{ yyval = MethodC(yyvsp[-2].Name(),DataTypeC(yyvsp[-3]),ObjectListC(yyvsp[-1]),yyvsp[0]); ;
    break;}
case 251:
#line 638 "cxx.y"
{ yyval = MethodC(yyvsp[-3].Name(),DataTypeC(yyvsp[-6]),ObjectListC(yyvsp[-1]),yyvsp[0]);
        yyval.SetScope(yyvsp[-5]);
      ;
    break;}
case 252:
#line 643 "cxx.y"
{ MethodC amethod(yyvsp[-2].Name(), DataTypeC(STR(void)),ObjectListC(yyvsp[-1]),yyvsp[0]); 
        amethod.CopyLineNo(yyvsp[-2]);
        amethod.SetConstructor(true);
        yyval = amethod;
	ObjectC subScope = yyvsp[-2].GetScope();
	if(subScope.IsValid()) {
	  ObjectListC ol(subScope);
	  DListC<ObjectC> tmp = ol.List().Copy();
	  //cerr << "Got constructor:  SubScope '" << subScope.Name() << "' Path:" << PathName(tmp) << " \n";
	  tmp.DelLast();
	  if(!tmp.IsEmpty()) {
	    //cerr << "Got constructor:  SetScope to Path:" << PathName(tmp) << " \n";
	    ObjectListC oln(STR(ConstructorScopePath),tmp);
	    yyval.SetScope(oln);
	  }
	}
      ;
    break;}
case 253:
#line 661 "cxx.y"
{ yyval = MethodC(STR(operator) + yyvsp[-3].Name(), DataTypeC(yyvsp[-5]),ObjectListC(yyvsp[-1]),yyvsp[0]); ;
    break;}
case 254:
#line 664 "cxx.y"
{ yyval = MethodC(STR(operator) + yyvsp[-3].Name(), DataTypeC(yyvsp[-7]),ObjectListC(yyvsp[-1]),yyvsp[0]); 
         yyval.SetScope(yyvsp[-6]);
       ;
    break;}
case 255:
#line 669 "cxx.y"
{ yyval = MethodC(STR(operator), DataTypeC(yyvsp[-2]),ObjectListC(yyvsp[-1]),yyvsp[0],true); ;
    break;}
case 256:
#line 672 "cxx.y"
{ yyval = MethodC(STR(operator), DataTypeC(yyvsp[-2]),ObjectListC(yyvsp[-1]),yyvsp[0],true); 
        yyval.SetScope(yyvsp[-5]);
      ;
    break;}
case 262:
#line 685 "cxx.y"
{  yyval=ObjectListC(STR(FuncArgList)); ;
    break;}
case 263:
#line 686 "cxx.y"
{  yyval=yyvsp[0]; ;
    break;}
case 264:
#line 688 "cxx.y"
{ ObjectListC ol(STR(FuncArgList)); yyval= ol; ol.Append(yyvsp[0]); ;
    break;}
case 265:
#line 689 "cxx.y"
{ yyval=yyvsp[-2]; ObjectListC ol(yyvsp[-2]); ol.Append(yyvsp[0]); ;
    break;}
case 266:
#line 690 "cxx.y"
{ yyval=yyvsp[-1]; ObjectListC ol(yyvsp[-1]); DataTypeC ell("..."); ol.Append(ell); ;
    break;}
case 267:
#line 692 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 268:
#line 693 "cxx.y"
{ yyval=yyvsp[-1]; DataTypeC dt(yyvsp[-1]); dt.SetAlias(yyvsp[0].Name()); ;
    break;}
case 269:
#line 694 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 270:
#line 698 "cxx.y"
{ 
	  StringC name;
	  if(yyvsp[-5].IsValid())
	    name = yyvsp[-5].Name();
	  else
	    name = StringC("anon?") + StringC(anonCount++);
	  yyval=DataTypeC(yyvsp[-8].Name() + StringC(" (*)(") + yyvsp[-2].Name() + strp_CloseBracket + yyvsp[0].Name(),name); 
	  yyval.SetupLineNos(yyvsp[-8],yyvsp[-1],yyvsp[0]);
	;
    break;}
case 271:
#line 708 "cxx.y"
{ yyval=DataTypeC(yyvsp[-10].Name() + StringC(" (*)(") + yyvsp[-2].Name() + strp_CloseBracket + yyvsp[0].Name(),yyvsp[-5].Name()); 
	  yyval.SetupLineNos(yyvsp[-10],yyvsp[-1],yyvsp[0]);
	;
    break;}
case 272:
#line 713 "cxx.y"
{ yyval=ObjectC(""); ;
    break;}
case 273:
#line 714 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 274:
#line 715 "cxx.y"
{ yyval=yyvsp[-1]; ;
    break;}
case 275:
#line 716 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 276:
#line 719 "cxx.y"
{ yyval=yyvsp[-1]; yyval.SetupLineNos(yyvsp[-2],yyvsp[0]); ;
    break;}
case 277:
#line 721 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
case 278:
#line 722 "cxx.y"
{ yyval=yyvsp[0]; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 737 "cxx.y"


